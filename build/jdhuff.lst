ARM GAS  /tmp/ccDN7JHH.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"jdhuff.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.jpeg_fill_bit_buffer,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	jpeg_fill_bit_buffer:
  25              	.LFB4:
  26              		.file 1 "Middlewares/Third_Party/LibJPEG/source/jdhuff.c"
   1:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
   2:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * jdhuff.c
   3:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
   4:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Copyright (C) 1991-1997, Thomas G. Lane.
   5:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Modified 2006-2009 by Guido Vollbeding.
   6:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * This file is part of the Independent JPEG Group's software.
   7:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
   9:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * This file contains Huffman entropy decoding routines.
  10:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Both sequential and progressive modes are supported in this single module.
  11:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
  12:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Much of the complexity here has to do with supporting input suspension.
  13:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * If the data source module demands suspension, we want to be able to back
  14:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * up to the start of the current MCU.  To do this, we copy state variables
  15:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * into local working storage, and update them back to the permanent
  16:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * storage only upon successful completion of an MCU.
  17:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
  18:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  19:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define JPEG_INTERNALS
  20:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #include "jinclude.h"
  21:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #include "jpeglib.h"
  22:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  23:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  24:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /* Derived data constructed for each Huffman table */
  25:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  26:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */
  27:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  28:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** typedef struct {
  29:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Basic tables: (element [0] of each array is unused) */
  30:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   INT32 maxcode[18];		/* largest code of length k (-1 if none) */
  31:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* (maxcode[17] is a sentinel to ensure jpeg_huff_decode terminates) */
  32:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   INT32 valoffset[17];		/* huffval[] offset for codes of length k */
ARM GAS  /tmp/ccDN7JHH.s 			page 2


  33:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* valoffset[k] = huffval[] index of 1st symbol of code length k, less
  34:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * the smallest code of length k; so given a code of length k, the
  35:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * corresponding symbol is huffval[code + valoffset[k]]
  36:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
  37:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  38:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Link to public Huffman table (needed only in jpeg_huff_decode) */
  39:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   JHUFF_TBL *pub;
  40:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  41:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
  42:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * the input data stream.  If the next Huffman code is no more
  43:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * than HUFF_LOOKAHEAD bits long, we can obtain its length and
  44:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * the corresponding symbol directly from these tables.
  45:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
  46:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
  47:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
  48:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** } d_derived_tbl;
  49:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  50:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  51:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
  52:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Fetching the next N bits from the input stream is a time-critical operation
  53:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * for the Huffman decoders.  We implement it with a combination of inline
  54:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * macros and out-of-line subroutines.  Note that N (the number of bits
  55:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * demanded at one time) never exceeds 15 for JPEG use.
  56:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
  57:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * We read source bytes into get_buffer and dole out bits as needed.
  58:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * If get_buffer already contains enough bits, they are fetched in-line
  59:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * by the macros CHECK_BIT_BUFFER and GET_BITS.  When there aren't enough
  60:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer
  61:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * as full as possible (not just to the number of bits needed; this
  62:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).
  63:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.
  64:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains
  65:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * at least the requested number of bits --- dummy zeroes are inserted if
  66:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * necessary.
  67:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
  68:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  69:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** typedef INT32 bit_buf_type;	/* type of bit-extraction buffer */
  70:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define BIT_BUF_SIZE  32	/* size of buffer in bits */
  71:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  72:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /* If long is > 32 bits on your machine, and shifting/masking longs is
  73:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE
  74:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * appropriately should be a win.  Unfortunately we can't define the size
  75:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * with something like  #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8)
  76:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * because not all machines measure sizeof in 8-bit bytes.
  77:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
  78:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  79:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** typedef struct {		/* Bitreading state saved across MCUs */
  80:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   bit_buf_type get_buffer;	/* current bit-extraction buffer */
  81:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int bits_left;		/* # of unused bits in it */
  82:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** } bitread_perm_state;
  83:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  84:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** typedef struct {		/* Bitreading working state within an MCU */
  85:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Current data source location */
  86:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* We need a copy, rather than munging the original, in case of suspension */
  87:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   const JOCTET * next_input_byte; /* => next byte to read from source */
  88:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
  89:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Bit input buffer --- note these values are kept in register variables,
ARM GAS  /tmp/ccDN7JHH.s 			page 3


  90:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * not in this struct, inside the inner loops.
  91:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
  92:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   bit_buf_type get_buffer;	/* current bit-extraction buffer */
  93:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int bits_left;		/* # of unused bits in it */
  94:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Pointer needed by jpeg_fill_bit_buffer. */
  95:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   j_decompress_ptr cinfo;	/* back link to decompress master record */
  96:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** } bitread_working_state;
  97:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
  98:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /* Macros to declare and load/save bitread local variables. */
  99:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define BITREAD_STATE_VARS  \
 100:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	register bit_buf_type get_buffer;  \
 101:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	register int bits_left;  \
 102:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	bitread_working_state br_state
 103:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 104:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define BITREAD_LOAD_STATE(cinfop,permstate)  \
 105:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	br_state.cinfo = cinfop; \
 106:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	br_state.next_input_byte = cinfop->src->next_input_byte; \
 107:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer; \
 108:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	get_buffer = permstate.get_buffer; \
 109:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	bits_left = permstate.bits_left;
 110:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 111:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define BITREAD_SAVE_STATE(cinfop,permstate)  \
 112:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	cinfop->src->next_input_byte = br_state.next_input_byte; \
 113:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	cinfop->src->bytes_in_buffer = br_state.bytes_in_buffer; \
 114:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	permstate.get_buffer = get_buffer; \
 115:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	permstate.bits_left = bits_left
 116:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 117:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 118:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * These macros provide the in-line portion of bit fetching.
 119:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer
 120:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * before using GET_BITS, PEEK_BITS, or DROP_BITS.
 121:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * The variables get_buffer and bits_left are assumed to be locals,
 122:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * but the state struct might not be (jpeg_huff_decode needs this).
 123:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *	CHECK_BIT_BUFFER(state,n,action);
 124:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *		Ensure there are N bits in get_buffer; if suspend, take action.
 125:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *      val = GET_BITS(n);
 126:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *		Fetch next N bits.
 127:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *      val = PEEK_BITS(n);
 128:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *		Fetch next N bits without removing them from the buffer.
 129:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *	DROP_BITS(n);
 130:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *		Discard next N bits.
 131:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * The value N should be a simple variable, not an expression, because it
 132:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * is evaluated multiple times.
 133:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 134:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 135:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define CHECK_BIT_BUFFER(state,nbits,action) \
 136:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	{ if (bits_left < (nbits)) {  \
 137:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (! jpeg_fill_bit_buffer(&(state),get_buffer,bits_left,nbits))  \
 138:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      { action; }  \
 139:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    get_buffer = (state).get_buffer; bits_left = (state).bits_left; } }
 140:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 141:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define GET_BITS(nbits) \
 142:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	(((int) (get_buffer >> (bits_left -= (nbits)))) & BIT_MASK(nbits))
 143:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 144:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define PEEK_BITS(nbits) \
 145:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	(((int) (get_buffer >> (bits_left -  (nbits)))) & BIT_MASK(nbits))
 146:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
ARM GAS  /tmp/ccDN7JHH.s 			page 4


 147:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define DROP_BITS(nbits) \
 148:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	(bits_left -= (nbits))
 149:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 150:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 151:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 152:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Code for extracting next Huffman-coded symbol from input bit stream.
 153:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Again, this is time-critical and we make the main paths be macros.
 154:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
 155:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
 156:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * without looping.  Usually, more than 95% of the Huffman codes will be 8
 157:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * or fewer bits long.  The few overlength codes are handled with a loop,
 158:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * which need not be inline code.
 159:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
 160:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Notes about the HUFF_DECODE macro:
 161:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * 1. Near the end of the data segment, we may fail to get enough bits
 162:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *    for a lookahead.  In that case, we do it the hard way.
 163:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * 2. If the lookahead table contains no entry, the next code must be
 164:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *    more than HUFF_LOOKAHEAD bits long.
 165:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * 3. jpeg_huff_decode returns -1 if forced to suspend.
 166:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 167:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 168:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
 169:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** { register int nb, look; \
 170:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (bits_left < HUFF_LOOKAHEAD) { \
 171:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
 172:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     get_buffer = state.get_buffer; bits_left = state.bits_left; \
 173:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (bits_left < HUFF_LOOKAHEAD) { \
 174:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       nb = 1; goto slowlabel; \
 175:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     } \
 176:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   } \
 177:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   look = PEEK_BITS(HUFF_LOOKAHEAD); \
 178:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if ((nb = htbl->look_nbits[look]) != 0) { \
 179:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     DROP_BITS(nb); \
 180:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     result = htbl->look_sym[look]; \
 181:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   } else { \
 182:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     nb = HUFF_LOOKAHEAD+1; \
 183:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** slowlabel: \
 184:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if ((result=jpeg_huff_decode(&state,get_buffer,bits_left,htbl,nb)) < 0) \
 185:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	{ failaction; } \
 186:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     get_buffer = state.get_buffer; bits_left = state.bits_left; \
 187:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   } \
 188:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 189:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 190:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 191:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 192:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Expanded entropy decoder object for Huffman decoding.
 193:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
 194:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * The savable_state subrecord contains fields that change within an MCU,
 195:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * but must not be updated permanently until we complete the MCU.
 196:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 197:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 198:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** typedef struct {
 199:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   unsigned int EOBRUN;			/* remaining EOBs in EOBRUN */
 200:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int last_dc_val[MAX_COMPS_IN_SCAN];	/* last DC coef for each component */
 201:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** } savable_state;
 202:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 203:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /* This macro is to work around compilers with missing or broken
ARM GAS  /tmp/ccDN7JHH.s 			page 5


 204:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * structure assignment.  You'll need to fix this code if you have
 205:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * such a compiler and you change MAX_COMPS_IN_SCAN.
 206:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 207:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 208:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #ifndef NO_STRUCT_ASSIGN
 209:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define ASSIGN_STATE(dest,src)  ((dest) = (src))
 210:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #else
 211:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #if MAX_COMPS_IN_SCAN == 4
 212:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define ASSIGN_STATE(dest,src)  \
 213:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	((dest).EOBRUN = (src).EOBRUN, \
 214:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
 215:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
 216:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
 217:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 (dest).last_dc_val[3] = (src).last_dc_val[3])
 218:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #endif
 219:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #endif
 220:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 221:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 222:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** typedef struct {
 223:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   struct jpeg_entropy_decoder pub; /* public fields */
 224:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 225:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* These fields are loaded into local variables at start of each MCU.
 226:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * In case of suspension, we exit WITHOUT updating them.
 227:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
 228:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
 229:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   savable_state saved;		/* Other state at start of MCU */
 230:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 231:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* These fields are NOT loaded into local working state. */
 232:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   boolean insufficient_data;	/* set TRUE after emitting warning */
 233:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   unsigned int restarts_to_go;	/* MCUs left in this restart interval */
 234:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 235:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Following two fields used only in progressive mode */
 236:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 237:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Pointers to derived tables (these workspaces have image lifespan) */
 238:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl * derived_tbls[NUM_HUFF_TBLS];
 239:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 240:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl * ac_derived_tbl; /* active table during an AC scan */
 241:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 242:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Following fields used only in sequential mode */
 243:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 244:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Pointers to derived tables (these workspaces have image lifespan) */
 245:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
 246:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
 247:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 248:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Precalculated info set up by start_pass for use in decode_mcu: */
 249:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 250:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Pointers to derived tables to be used for each block within an MCU */
 251:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl * dc_cur_tbls[D_MAX_BLOCKS_IN_MCU];
 252:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl * ac_cur_tbls[D_MAX_BLOCKS_IN_MCU];
 253:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Whether we care about the DC and AC coefficient values for each block */
 254:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int coef_limit[D_MAX_BLOCKS_IN_MCU];
 255:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** } huff_entropy_decoder;
 256:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 257:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** typedef huff_entropy_decoder * huff_entropy_ptr;
 258:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 259:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 260:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** static const int jpeg_zigzag_order[8][8] = {
ARM GAS  /tmp/ccDN7JHH.s 			page 6


 261:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  0,  1,  5,  6, 14, 15, 27, 28 },
 262:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  2,  4,  7, 13, 16, 26, 29, 42 },
 263:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  3,  8, 12, 17, 25, 30, 41, 43 },
 264:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  9, 11, 18, 24, 31, 40, 44, 53 },
 265:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 10, 19, 23, 32, 39, 45, 52, 54 },
 266:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 20, 22, 33, 38, 46, 51, 55, 60 },
 267:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 21, 34, 37, 47, 50, 56, 59, 61 },
 268:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 35, 36, 48, 49, 57, 58, 62, 63 }
 269:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** };
 270:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 271:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** static const int jpeg_zigzag_order7[7][7] = {
 272:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  0,  1,  5,  6, 14, 15, 27 },
 273:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  2,  4,  7, 13, 16, 26, 28 },
 274:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  3,  8, 12, 17, 25, 29, 38 },
 275:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  9, 11, 18, 24, 30, 37, 39 },
 276:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 10, 19, 23, 31, 36, 40, 45 },
 277:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 20, 22, 32, 35, 41, 44, 46 },
 278:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 21, 33, 34, 42, 43, 47, 48 }
 279:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** };
 280:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 281:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** static const int jpeg_zigzag_order6[6][6] = {
 282:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  0,  1,  5,  6, 14, 15 },
 283:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  2,  4,  7, 13, 16, 25 },
 284:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  3,  8, 12, 17, 24, 26 },
 285:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  9, 11, 18, 23, 27, 32 },
 286:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 10, 19, 22, 28, 31, 33 },
 287:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 20, 21, 29, 30, 34, 35 }
 288:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** };
 289:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 290:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** static const int jpeg_zigzag_order5[5][5] = {
 291:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  0,  1,  5,  6, 14 },
 292:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  2,  4,  7, 13, 15 },
 293:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  3,  8, 12, 16, 21 },
 294:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   {  9, 11, 17, 20, 22 },
 295:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 10, 18, 19, 23, 24 }
 296:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** };
 297:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 298:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** static const int jpeg_zigzag_order4[4][4] = {
 299:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 0,  1,  5,  6 },
 300:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 2,  4,  7, 12 },
 301:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 3,  8, 11, 13 },
 302:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 9, 10, 14, 15 }
 303:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** };
 304:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 305:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** static const int jpeg_zigzag_order3[3][3] = {
 306:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 0, 1, 5 },
 307:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 2, 4, 6 },
 308:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 3, 7, 8 }
 309:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** };
 310:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 311:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** static const int jpeg_zigzag_order2[2][2] = {
 312:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 0, 1 },
 313:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 2, 3 }
 314:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** };
 315:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 316:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 317:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
ARM GAS  /tmp/ccDN7JHH.s 			page 7


 318:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Compute the derived values for a Huffman table.
 319:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * This routine also performs some validation checks on the table.
 320:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 321:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 322:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** LOCAL(void)
 323:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, boolean isDC, int tblno,
 324:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 			 d_derived_tbl ** pdtbl)
 325:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {
 326:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   JHUFF_TBL *htbl;
 327:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl *dtbl;
 328:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int p, i, l, si, numsymbols;
 329:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int lookbits, ctr;
 330:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   char huffsize[257];
 331:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   unsigned int huffcode[257];
 332:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   unsigned int code;
 333:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 334:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Note that huffsize[] and huffcode[] are filled in code-length order,
 335:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * paralleling the order of the symbols themselves in htbl->huffval[].
 336:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
 337:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 338:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Find the input Huffman table */
 339:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 340:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 341:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   htbl =
 342:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 343:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (htbl == NULL)
 344:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 345:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 346:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Allocate a workspace if we haven't already done so. */
 347:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (*pdtbl == NULL)
 348:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 349:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 350:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				  SIZEOF(d_derived_tbl));
 351:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   dtbl = *pdtbl;
 352:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   dtbl->pub = htbl;		/* fill in back link */
 353:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   
 354:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Figure C.1: make table of Huffman code length for each symbol */
 355:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 356:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   p = 0;
 357:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 358:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     i = (int) htbl->bits[l];
 359:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 360:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 361:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     while (i--)
 362:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       huffsize[p++] = (char) l;
 363:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 364:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huffsize[p] = 0;
 365:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   numsymbols = p;
 366:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   
 367:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Figure C.2: generate the codes themselves */
 368:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* We also validate that the counts represent a legal Huffman code tree. */
 369:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   
 370:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   code = 0;
 371:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   si = huffsize[0];
 372:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   p = 0;
 373:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   while (huffsize[p]) {
 374:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     while (((int) huffsize[p]) == si) {
ARM GAS  /tmp/ccDN7JHH.s 			page 8


 375:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       huffcode[p++] = code;
 376:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       code++;
 377:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 378:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* code is now 1 more than the last code used for codelength si; but
 379:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * it must still fit in si bits, since no code is allowed to be all ones.
 380:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      */
 381:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (((INT32) code) >= (((INT32) 1) << si))
 382:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 383:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code <<= 1;
 384:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     si++;
 385:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 386:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 387:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Figure F.15: generate decoding tables for bit-sequential decoding */
 388:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 389:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   p = 0;
 390:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 391:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (htbl->bits[l]) {
 392:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* valoffset[l] = huffval[] index of 1st symbol of code length l,
 393:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * minus the minimum code of length l
 394:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        */
 395:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 396:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       p += htbl->bits[l];
 397:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 398:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     } else {
 399:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 400:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 401:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 402:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 403:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 404:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Compute lookahead tables to speed up decoding.
 405:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * First we set all the table entries to 0, indicating "too long";
 406:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * then we iterate through the Huffman codes that are short enough and
 407:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * fill in all the entries that correspond to bit sequences starting
 408:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * with that code.
 409:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
 410:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 411:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 412:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 413:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   p = 0;
 414:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 415:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 416:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 417:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Generate left-justified code followed by all possible bit sequences */
 418:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 419:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 420:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 421:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	dtbl->look_sym[lookbits] = htbl->huffval[p];
 422:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	lookbits++;
 423:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 424:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 425:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 426:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 427:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Validate symbols as being reasonable.
 428:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * For AC tables, we make no check, but accept all byte values 0..255.
 429:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * For DC tables, we require the symbols to be in range 0..15.
 430:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * (Tighter bounds could be applied depending on the data depth and mode,
 431:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * but this is sufficient to ensure safe decoding.)
ARM GAS  /tmp/ccDN7JHH.s 			page 9


 432:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
 433:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (isDC) {
 434:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (i = 0; i < numsymbols; i++) {
 435:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int sym = htbl->huffval[i];
 436:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (sym < 0 || sym > 15)
 437:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 438:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 439:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 440:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 441:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 442:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 443:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 444:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Out-of-line code for bit fetching.
 445:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Note: current values of get_buffer and bits_left are passed as parameters,
 446:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * but are returned in the corresponding fields of the state struct.
 447:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
 448:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
 449:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * of get_buffer to be used.  (On machines with wider words, an even larger
 450:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * buffer could be used.)  However, on some machines 32-bit shifts are
 451:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * quite slow and take time proportional to the number of places shifted.
 452:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * (This is true with most PC compilers, for instance.)  In this case it may
 453:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
 454:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * average shift distance at the cost of more calls to jpeg_fill_bit_buffer.
 455:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 456:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 457:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #ifdef SLOW_SHIFT_32
 458:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define MIN_GET_BITS  15	/* minimum allowable value */
 459:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #else
 460:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define MIN_GET_BITS  (BIT_BUF_SIZE-7)
 461:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #endif
 462:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 463:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 464:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** LOCAL(boolean)
 465:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** jpeg_fill_bit_buffer (bitread_working_state * state,
 466:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		      register bit_buf_type get_buffer, register int bits_left,
 467:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		      int nbits)
 468:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /* Load up the bit buffer to a depth of at least nbits */
 469:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {
  27              		.loc 1 469 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 40
  35              		.cfi_offset 3, -40
  36              		.cfi_offset 4, -36
  37              		.cfi_offset 5, -32
  38              		.cfi_offset 6, -28
  39              		.cfi_offset 7, -24
  40              		.cfi_offset 8, -20
  41              		.cfi_offset 9, -16
  42              		.cfi_offset 10, -12
  43              		.cfi_offset 11, -8
  44              		.cfi_offset 14, -4
  45 0004 8246     		mov	r10, r0
ARM GAS  /tmp/ccDN7JHH.s 			page 10


  46 0006 8946     		mov	r9, r1
  47 0008 1646     		mov	r6, r2
  48 000a 9B46     		mov	fp, r3
 470:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Copy heavily used state fields into locals (hopefully registers) */
 471:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   register const JOCTET * next_input_byte = state->next_input_byte;
  49              		.loc 1 471 0
  50 000c 0768     		ldr	r7, [r0]
  51              	.LVL1:
 472:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   register size_t bytes_in_buffer = state->bytes_in_buffer;
  52              		.loc 1 472 0
  53 000e 4468     		ldr	r4, [r0, #4]
  54              	.LVL2:
 473:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   j_decompress_ptr cinfo = state->cinfo;
  55              		.loc 1 473 0
  56 0010 0569     		ldr	r5, [r0, #16]
  57              	.LVL3:
 474:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 475:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
 476:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* (It is assumed that no request will be for more than that many bits.) */
 477:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* We fail to do so only if we hit a marker or are forced to suspend. */
 478:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 479:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
  58              		.loc 1 479 0
  59 0012 D5F8B431 		ldr	r3, [r5, #436]
  60              	.LVL4:
  61 0016 002B     		cmp	r3, #0
  62 0018 3CD0     		beq	.L2
  63              	.LVL5:
  64              	.L3:
 480:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     while (bits_left < MIN_GET_BITS) {
 481:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       register int c;
 482:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 483:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Attempt to read a byte */
 484:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (bytes_in_buffer == 0) {
 485:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 486:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  return FALSE;
 487:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	next_input_byte = cinfo->src->next_input_byte;
 488:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 489:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 490:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       bytes_in_buffer--;
 491:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       c = GETJOCTET(*next_input_byte++);
 492:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 493:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* If it's 0xFF, check and discard stuffed zero byte */
 494:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (c == 0xFF) {
 495:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Loop here to discard any padding FF's on terminating marker,
 496:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 * so that we can save a valid unread_marker value.  NOTE: we will
 497:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 * accept multiple FF's followed by a 0 as meaning a single FF data
 498:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 * byte.  This data pattern is not valid according to the standard.
 499:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 */
 500:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	do {
 501:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (bytes_in_buffer == 0) {
 502:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 503:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      return FALSE;
 504:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    next_input_byte = cinfo->src->next_input_byte;
 505:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 506:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  }
 507:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  bytes_in_buffer--;
ARM GAS  /tmp/ccDN7JHH.s 			page 11


 508:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  c = GETJOCTET(*next_input_byte++);
 509:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} while (c == 0xFF);
 510:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 511:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (c == 0) {
 512:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Found FF/00, which represents an FF data byte */
 513:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  c = 0xFF;
 514:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} else {
 515:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Oops, it's actually a marker indicating end of compressed data.
 516:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	   * Save the marker code for later use.
 517:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	   * Fine point: it might appear that we should save the marker into
 518:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	   * bitread working state, not straight into permanent state.  But
 519:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	   * once we have hit a marker, we cannot need to suspend within the
 520:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	   * current MCU, because we will read no more bytes from the data
 521:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	   * source.  So it is OK to update permanent state right away.
 522:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	   */
 523:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  cinfo->unread_marker = c;
 524:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* See if we need to insert some fake zero bits. */
 525:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  goto no_more_bytes;
 526:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
 527:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 528:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 529:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* OK, load c into get_buffer */
 530:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       get_buffer = (get_buffer << 8) | c;
 531:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       bits_left += 8;
 532:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     } /* end while */
 533:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   } else {
 534:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   no_more_bytes:
 535:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* We get here if we've read the marker that terminates the compressed
 536:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * data segment.  There should be enough bits in the buffer register
 537:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * to satisfy the request; if so, no problem.
 538:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      */
 539:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (nbits > bits_left) {
  65              		.loc 1 539 0
  66 001a 5E45     		cmp	r6, fp
  67 001c 15DA     		bge	.L10
 540:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Uh-oh.  Report corrupted data to user and stuff zeroes into
 541:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * the data stream, so that we can produce some kind of image.
 542:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * We use a nonvolatile flag to ensure that only one warning message
 543:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * appears per data segment.
 544:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        */
 545:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
  68              		.loc 1 545 0
  69 001e D5F8D031 		ldr	r3, [r5, #464]
  70 0022 5B6A     		ldr	r3, [r3, #36]
  71 0024 63B9     		cbnz	r3, .L11
 546:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	WARNMS(cinfo, JWRN_HIT_MARKER);
  72              		.loc 1 546 0
  73 0026 2B68     		ldr	r3, [r5]
  74 0028 7822     		movs	r2, #120
  75 002a 5A61     		str	r2, [r3, #20]
  76 002c 2B68     		ldr	r3, [r5]
  77 002e 5B68     		ldr	r3, [r3, #4]
  78 0030 4FF0FF31 		mov	r1, #-1
  79 0034 2846     		mov	r0, r5
  80 0036 9847     		blx	r3
  81              	.LVL6:
 547:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
ARM GAS  /tmp/ccDN7JHH.s 			page 12


  82              		.loc 1 547 0
  83 0038 D5F8D031 		ldr	r3, [r5, #464]
  84 003c 0122     		movs	r2, #1
  85 003e 5A62     		str	r2, [r3, #36]
  86              	.L11:
 548:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 549:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Fill the buffer with zero bits */
 550:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       get_buffer <<= MIN_GET_BITS - bits_left;
  87              		.loc 1 550 0
  88 0040 C6F11906 		rsb	r6, r6, #25
  89              	.LVL7:
  90 0044 09FA06F9 		lsl	r9, r9, r6
  91              	.LVL8:
 551:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       bits_left = MIN_GET_BITS;
  92              		.loc 1 551 0
  93 0048 1926     		movs	r6, #25
  94              	.LVL9:
  95              	.L10:
 552:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 553:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 554:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 555:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Unload the local registers */
 556:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   state->next_input_byte = next_input_byte;
  96              		.loc 1 556 0
  97 004a CAF80070 		str	r7, [r10]
 557:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   state->bytes_in_buffer = bytes_in_buffer;
  98              		.loc 1 557 0
  99 004e CAF80440 		str	r4, [r10, #4]
 558:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   state->get_buffer = get_buffer;
 100              		.loc 1 558 0
 101 0052 CAF80890 		str	r9, [r10, #8]
 559:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   state->bits_left = bits_left;
 102              		.loc 1 559 0
 103 0056 CAF80C60 		str	r6, [r10, #12]
 560:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 561:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return TRUE;
 104              		.loc 1 561 0
 105 005a 0123     		movs	r3, #1
 106              	.L1:
 562:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 107              		.loc 1 562 0
 108 005c 1846     		mov	r0, r3
 109 005e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 110              	.LVL10:
 111              	.L12:
 112              	.LBB2:
 113 0062 3B46     		mov	r3, r7
 114 0064 24E0     		b	.L4
 115              	.L13:
 116 0066 3B46     		mov	r3, r7
 117              	.LVL11:
 118              	.L7:
 507:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  c = GETJOCTET(*next_input_byte++);
 119              		.loc 1 507 0
 120 0068 013C     		subs	r4, r4, #1
 121              	.LVL12:
 508:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} while (c == 0xFF);
ARM GAS  /tmp/ccDN7JHH.s 			page 13


 122              		.loc 1 508 0
 123 006a 5F1C     		adds	r7, r3, #1
 124              	.LVL13:
 125 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 126              	.LVL14:
 509:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 127              		.loc 1 509 0
 128 006e FF2B     		cmp	r3, #255
 129 0070 0CD1     		bne	.L15
 130              	.LVL15:
 131              	.L8:
 501:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 132              		.loc 1 501 0
 133 0072 002C     		cmp	r4, #0
 134 0074 F7D1     		bne	.L13
 502:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      return FALSE;
 135              		.loc 1 502 0
 136 0076 AB69     		ldr	r3, [r5, #24]
 137 0078 DB68     		ldr	r3, [r3, #12]
 138 007a 2846     		mov	r0, r5
 139 007c 9847     		blx	r3
 140              	.LVL16:
 141 007e 0346     		mov	r3, r0
 142 0080 0028     		cmp	r0, #0
 143 0082 EBD0     		beq	.L1
 504:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 144              		.loc 1 504 0
 145 0084 AA69     		ldr	r2, [r5, #24]
 146 0086 1368     		ldr	r3, [r2]
 147              	.LVL17:
 505:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  }
 148              		.loc 1 505 0
 149 0088 5468     		ldr	r4, [r2, #4]
 150              	.LVL18:
 151 008a EDE7     		b	.L7
 152              	.LVL19:
 153              	.L15:
 511:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Found FF/00, which represents an FF data byte */
 154              		.loc 1 511 0
 155 008c C3B9     		cbnz	r3, .L16
 156              	.LVL20:
 157              	.L6:
 530:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       bits_left += 8;
 158              		.loc 1 530 0
 159 008e 48EA0929 		orr	r9, r8, r9, lsl #8
 160              	.LVL21:
 531:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     } /* end while */
 161              		.loc 1 531 0
 162 0092 0836     		adds	r6, r6, #8
 163              	.LVL22:
 164              	.L2:
 165              	.LBE2:
 480:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       register int c;
 166              		.loc 1 480 0
 167 0094 182E     		cmp	r6, #24
 168 0096 D8DC     		bgt	.L10
 169              	.LBB3:
ARM GAS  /tmp/ccDN7JHH.s 			page 14


 484:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 170              		.loc 1 484 0
 171 0098 002C     		cmp	r4, #0
 172 009a E2D1     		bne	.L12
 485:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  return FALSE;
 173              		.loc 1 485 0
 174 009c AB69     		ldr	r3, [r5, #24]
 175 009e DB68     		ldr	r3, [r3, #12]
 176 00a0 2846     		mov	r0, r5
 177 00a2 9847     		blx	r3
 178              	.LVL23:
 179 00a4 0346     		mov	r3, r0
 180 00a6 0028     		cmp	r0, #0
 181 00a8 D8D0     		beq	.L1
 487:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 182              		.loc 1 487 0
 183 00aa AA69     		ldr	r2, [r5, #24]
 184 00ac 1368     		ldr	r3, [r2]
 185              	.LVL24:
 488:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 186              		.loc 1 488 0
 187 00ae 5468     		ldr	r4, [r2, #4]
 188              	.LVL25:
 189              	.L4:
 490:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       c = GETJOCTET(*next_input_byte++);
 190              		.loc 1 490 0
 191 00b0 013C     		subs	r4, r4, #1
 192              	.LVL26:
 491:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 193              		.loc 1 491 0
 194 00b2 5F1C     		adds	r7, r3, #1
 195              	.LVL27:
 196 00b4 93F80080 		ldrb	r8, [r3]	@ zero_extendqisi2
 197              	.LVL28:
 494:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Loop here to discard any padding FF's on terminating marker,
 198              		.loc 1 494 0
 199 00b8 B8F1FF0F 		cmp	r8, #255
 200 00bc E7D1     		bne	.L6
 201 00be D8E7     		b	.L8
 202              	.LVL29:
 203              	.L16:
 523:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* See if we need to insert some fake zero bits. */
 204              		.loc 1 523 0
 205 00c0 C5F8B431 		str	r3, [r5, #436]
 525:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
 206              		.loc 1 525 0
 207 00c4 A9E7     		b	.L3
 208              	.LBE3:
 209              		.cfi_endproc
 210              	.LFE4:
 212              		.section	.text.jpeg_huff_decode,"ax",%progbits
 213              		.align	1
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu fpv5-sp-d16
 219              	jpeg_huff_decode:
ARM GAS  /tmp/ccDN7JHH.s 			page 15


 220              	.LFB5:
 563:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 564:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 565:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 566:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Figure F.12: extend sign bit.
 567:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * On some machines, a shift and sub will be faster than a table lookup.
 568:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 569:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 570:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #ifdef AVOID_TABLES
 571:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 572:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define BIT_MASK(nbits)   ((1<<(nbits))-1)
 573:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) - ((1<<(s))-1) : (x))
 574:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 575:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #else
 576:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 577:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define BIT_MASK(nbits)   bmask[nbits]
 578:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #define HUFF_EXTEND(x,s)  ((x) <= bmask[(s) - 1] ? (x) - bmask[s] : (x))
 579:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 580:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** static const int bmask[16] =	/* bmask[n] is mask for n rightmost bits */
 581:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   { 0, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF,
 582:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF };
 583:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 584:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** #endif /* AVOID_TABLES */
 585:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 586:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 587:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 588:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Out-of-line code for Huffman code decoding.
 589:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 590:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 591:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** LOCAL(int)
 592:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** jpeg_huff_decode (bitread_working_state * state,
 593:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		  register bit_buf_type get_buffer, register int bits_left,
 594:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		  d_derived_tbl * htbl, int min_bits)
 595:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {
 221              		.loc 1 595 0
 222              		.cfi_startproc
 223              		@ args = 4, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL30:
 226 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 227              	.LCFI1:
 228              		.cfi_def_cfa_offset 24
 229              		.cfi_offset 3, -24
 230              		.cfi_offset 4, -20
 231              		.cfi_offset 5, -16
 232              		.cfi_offset 6, -12
 233              		.cfi_offset 7, -8
 234              		.cfi_offset 14, -4
 235 0002 0746     		mov	r7, r0
 236 0004 1E46     		mov	r6, r3
 237 0006 069D     		ldr	r5, [sp, #24]
 238              	.LVL31:
 596:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   register int l = min_bits;
 597:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   register INT32 code;
 598:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 599:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* HUFF_DECODE has determined that the code is at least min_bits */
 600:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* bits long, so fetch that many bits in one swoop. */
ARM GAS  /tmp/ccDN7JHH.s 			page 16


 601:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 602:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   CHECK_BIT_BUFFER(*state, l, return -1);
 239              		.loc 1 602 0
 240 0008 9542     		cmp	r5, r2
 241 000a 07DC     		bgt	.L27
 242              	.LVL32:
 243              	.L18:
 603:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   code = GET_BITS(l);
 244              		.loc 1 603 0
 245 000c 521B     		subs	r2, r2, r5
 246              	.LVL33:
 247 000e 41FA02F3 		asr	r3, r1, r2
 248 0012 2048     		ldr	r0, .L29
 249 0014 50F82500 		ldr	r0, [r0, r5, lsl #2]
 250 0018 0340     		ands	r3, r3, r0
 251              	.LVL34:
 604:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 605:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Collect the rest of the Huffman code one bit at a time. */
 606:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* This is per Figure F.16 in the JPEG spec. */
 607:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 608:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   while (code > htbl->maxcode[l]) {
 252              		.loc 1 608 0
 253 001a 0DE0     		b	.L20
 254              	.LVL35:
 255              	.L27:
 602:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   code = GET_BITS(l);
 256              		.loc 1 602 0 discriminator 1
 257 001c 2B46     		mov	r3, r5
 258              	.LVL36:
 259 001e FFF7FEFF 		bl	jpeg_fill_bit_buffer
 260              	.LVL37:
 261 0022 88B3     		cbz	r0, .L24
 602:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   code = GET_BITS(l);
 262              		.loc 1 602 0 is_stmt 0 discriminator 3
 263 0024 B968     		ldr	r1, [r7, #8]
 264              	.LVL38:
 265 0026 FA68     		ldr	r2, [r7, #12]
 266              	.LVL39:
 267 0028 F0E7     		b	.L18
 268              	.LVL40:
 269              	.L21:
 609:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code <<= 1;
 610:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     CHECK_BIT_BUFFER(*state, 1, return -1);
 611:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code |= GET_BITS(1);
 270              		.loc 1 611 0 is_stmt 1
 271 002a 013A     		subs	r2, r2, #1
 272              	.LVL41:
 273 002c 41FA02F3 		asr	r3, r1, r2
 274 0030 03F00103 		and	r3, r3, #1
 275 0034 2343     		orrs	r3, r3, r4
 276              	.LVL42:
 612:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     l++;
 277              		.loc 1 612 0
 278 0036 0135     		adds	r5, r5, #1
 279              	.LVL43:
 280              	.L20:
 608:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code <<= 1;
ARM GAS  /tmp/ccDN7JHH.s 			page 17


 281              		.loc 1 608 0
 282 0038 56F82500 		ldr	r0, [r6, r5, lsl #2]
 283 003c 9842     		cmp	r0, r3
 284 003e 0ADA     		bge	.L28
 609:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code <<= 1;
 285              		.loc 1 609 0
 286 0040 5C00     		lsls	r4, r3, #1
 287              	.LVL44:
 610:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code |= GET_BITS(1);
 288              		.loc 1 610 0
 289 0042 002A     		cmp	r2, #0
 290 0044 F1DC     		bgt	.L21
 610:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code |= GET_BITS(1);
 291              		.loc 1 610 0 is_stmt 0 discriminator 1
 292 0046 0123     		movs	r3, #1
 293 0048 3846     		mov	r0, r7
 294 004a FFF7FEFF 		bl	jpeg_fill_bit_buffer
 295              	.LVL45:
 296 004e F0B1     		cbz	r0, .L25
 610:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code |= GET_BITS(1);
 297              		.loc 1 610 0 discriminator 3
 298 0050 B968     		ldr	r1, [r7, #8]
 299              	.LVL46:
 300 0052 FA68     		ldr	r2, [r7, #12]
 301              	.LVL47:
 302 0054 E9E7     		b	.L21
 303              	.LVL48:
 304              	.L28:
 613:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 614:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 615:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Unload the local registers */
 616:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   state->get_buffer = get_buffer;
 305              		.loc 1 616 0 is_stmt 1
 306 0056 B960     		str	r1, [r7, #8]
 617:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   state->bits_left = bits_left;
 307              		.loc 1 617 0
 308 0058 FA60     		str	r2, [r7, #12]
 618:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 619:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* With garbage input we may reach the sentinel value l = 17. */
 620:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 621:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (l > 16) {
 309              		.loc 1 621 0
 310 005a 102D     		cmp	r5, #16
 311 005c 0BDD     		ble	.L23
 622:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 312              		.loc 1 622 0
 313 005e 3B69     		ldr	r3, [r7, #16]
 314              	.LVL49:
 315 0060 1B68     		ldr	r3, [r3]
 316 0062 7922     		movs	r2, #121
 317              	.LVL50:
 318 0064 5A61     		str	r2, [r3, #20]
 319              	.LVL51:
 320 0066 3869     		ldr	r0, [r7, #16]
 321 0068 0368     		ldr	r3, [r0]
 322 006a 5B68     		ldr	r3, [r3, #4]
 323 006c 4FF0FF31 		mov	r1, #-1
ARM GAS  /tmp/ccDN7JHH.s 			page 18


 324              	.LVL52:
 325 0070 9847     		blx	r3
 326              	.LVL53:
 623:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     return 0;			/* fake a zero as the safest result */
 327              		.loc 1 623 0
 328 0072 0020     		movs	r0, #0
 329              	.LVL54:
 330              	.L17:
 624:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 625:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 626:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 627:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 331              		.loc 1 627 0
 332 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 333              	.LVL55:
 334              	.L23:
 626:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 335              		.loc 1 626 0
 336 0076 D6F88C20 		ldr	r2, [r6, #140]
 337              	.LVL56:
 338 007a 1235     		adds	r5, r5, #18
 339              	.LVL57:
 340 007c 56F82510 		ldr	r1, [r6, r5, lsl #2]
 341              	.LVL58:
 342 0080 0B44     		add	r3, r3, r1
 343              	.LVL59:
 344 0082 1344     		add	r3, r3, r2
 345 0084 587C     		ldrb	r0, [r3, #17]	@ zero_extendqisi2
 346 0086 F5E7     		b	.L17
 347              	.LVL60:
 348              	.L24:
 602:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   code = GET_BITS(l);
 349              		.loc 1 602 0
 350 0088 4FF0FF30 		mov	r0, #-1
 351 008c F2E7     		b	.L17
 352              	.LVL61:
 353              	.L25:
 610:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code |= GET_BITS(1);
 354              		.loc 1 610 0
 355 008e 4FF0FF30 		mov	r0, #-1
 356 0092 EFE7     		b	.L17
 357              	.L30:
 358              		.align	2
 359              	.L29:
 360 0094 00000000 		.word	.LANCHOR0
 361              		.cfi_endproc
 362              	.LFE5:
 364              		.section	.text.process_restart,"ax",%progbits
 365              		.align	1
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu fpv5-sp-d16
 371              	process_restart:
 372              	.LFB6:
 628:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 629:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
ARM GAS  /tmp/ccDN7JHH.s 			page 19


 630:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 631:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Check for a restart marker & resynchronize decoder.
 632:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Returns FALSE if must suspend.
 633:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 634:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 635:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** LOCAL(boolean)
 636:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** process_restart (j_decompress_ptr cinfo)
 637:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {
 373              		.loc 1 637 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              	.LVL62:
 378 0000 38B5     		push	{r3, r4, r5, lr}
 379              	.LCFI2:
 380              		.cfi_def_cfa_offset 16
 381              		.cfi_offset 3, -16
 382              		.cfi_offset 4, -12
 383              		.cfi_offset 5, -8
 384              		.cfi_offset 14, -4
 385 0002 0446     		mov	r4, r0
 638:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 386              		.loc 1 638 0
 387 0004 D0F8D051 		ldr	r5, [r0, #464]
 388              	.LVL63:
 639:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int ci;
 640:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 641:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Throw away any unused bits remaining in bit buffer; */
 642:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* include any full bytes in next_marker's count of discarded bytes */
 643:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 389              		.loc 1 643 0
 390 0008 D0F8CC11 		ldr	r1, [r0, #460]
 391 000c EA68     		ldr	r2, [r5, #12]
 392 000e 002A     		cmp	r2, #0
 393 0010 0EDB     		blt	.L38
 394              	.L32:
 395 0012 8B69     		ldr	r3, [r1, #24]
 396 0014 03EBE203 		add	r3, r3, r2, asr #3
 397 0018 8B61     		str	r3, [r1, #24]
 644:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 398              		.loc 1 644 0
 399 001a 0023     		movs	r3, #0
 400 001c EB60     		str	r3, [r5, #12]
 645:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 646:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Advance past the RSTn marker */
 647:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (! (*cinfo->marker->read_restart_marker) (cinfo))
 401              		.loc 1 647 0
 402 001e D4F8CC31 		ldr	r3, [r4, #460]
 403 0022 9B68     		ldr	r3, [r3, #8]
 404 0024 2046     		mov	r0, r4
 405              	.LVL64:
 406 0026 9847     		blx	r3
 407              	.LVL65:
 408 0028 0346     		mov	r3, r0
 409 002a B8B1     		cbz	r0, .L31
 648:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     return FALSE;
 649:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
ARM GAS  /tmp/ccDN7JHH.s 			page 20


 650:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Re-initialize DC predictions to 0 */
 651:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 410              		.loc 1 651 0
 411 002c 0023     		movs	r3, #0
 412 002e 07E0     		b	.L34
 413              	.LVL66:
 414              	.L38:
 643:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 415              		.loc 1 643 0
 416 0030 0732     		adds	r2, r2, #7
 417 0032 EEE7     		b	.L32
 418              	.LVL67:
 419              	.L35:
 652:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     entropy->saved.last_dc_val[ci] = 0;
 420              		.loc 1 652 0 discriminator 3
 421 0034 1A1D     		adds	r2, r3, #4
 422 0036 05EB8202 		add	r2, r5, r2, lsl #2
 423 003a 0021     		movs	r1, #0
 424 003c 5160     		str	r1, [r2, #4]
 651:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     entropy->saved.last_dc_val[ci] = 0;
 425              		.loc 1 651 0 discriminator 3
 426 003e 0133     		adds	r3, r3, #1
 427              	.LVL68:
 428              	.L34:
 651:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     entropy->saved.last_dc_val[ci] = 0;
 429              		.loc 1 651 0 is_stmt 0 discriminator 1
 430 0040 D4F85021 		ldr	r2, [r4, #336]
 431 0044 9A42     		cmp	r2, r3
 432 0046 F5DC     		bgt	.L35
 653:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Re-init EOB run count, too */
 654:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->saved.EOBRUN = 0;
 433              		.loc 1 654 0 is_stmt 1
 434 0048 0023     		movs	r3, #0
 435              	.LVL69:
 436 004a 2B61     		str	r3, [r5, #16]
 655:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 656:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Reset restart counter */
 657:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->restarts_to_go = cinfo->restart_interval;
 437              		.loc 1 657 0
 438 004c D4F81831 		ldr	r3, [r4, #280]
 439 0050 AB62     		str	r3, [r5, #40]
 658:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 659:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Reset out-of-data flag, unless read_restart_marker left us smack up
 660:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * against a marker.  In that case we will end up treating the next data
 661:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * segment as empty, and we can avoid producing bogus output pixels by
 662:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * leaving the flag set.
 663:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
 664:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->unread_marker == 0)
 440              		.loc 1 664 0
 441 0052 D4F8B431 		ldr	r3, [r4, #436]
 442 0056 1BB9     		cbnz	r3, .L36
 665:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     entropy->insufficient_data = FALSE;
 443              		.loc 1 665 0
 444 0058 6B62     		str	r3, [r5, #36]
 666:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 667:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return TRUE;
 445              		.loc 1 667 0
ARM GAS  /tmp/ccDN7JHH.s 			page 21


 446 005a 0123     		movs	r3, #1
 447              	.L31:
 668:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 448              		.loc 1 668 0
 449 005c 1846     		mov	r0, r3
 450 005e 38BD     		pop	{r3, r4, r5, pc}
 451              	.LVL70:
 452              	.L36:
 667:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 453              		.loc 1 667 0
 454 0060 0123     		movs	r3, #1
 455 0062 FBE7     		b	.L31
 456              		.cfi_endproc
 457              	.LFE6:
 459              		.section	.text.decode_mcu_DC_first,"ax",%progbits
 460              		.align	1
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu fpv5-sp-d16
 466              	decode_mcu_DC_first:
 467              	.LFB7:
 669:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 670:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 671:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 672:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Huffman MCU decoding.
 673:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Each of these routines decodes and returns one MCU's worth of
 674:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Huffman-compressed coefficients. 
 675:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * The coefficients are reordered from zigzag order into natural array order,
 676:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * but are not dequantized.
 677:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
 678:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * The i'th block of the MCU is stored into the block pointed to by
 679:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
 680:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * (Wholesale zeroing is usually a little faster than retail...)
 681:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  *
 682:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * We return FALSE if data source requested suspension.  In that case no
 683:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * changes have been made to permanent state.  (Exception: some output
 684:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * coefficients may already have been assigned.  This is harmless for
 685:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * spectral selection, since we'll just re-assign them on the next call.
 686:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Successive approximation AC refinement has to be more careful, however.)
 687:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 688:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 689:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 690:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * MCU decoding for DC initial scan (either spectral selection,
 691:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * or first pass of successive approximation).
 692:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 693:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 694:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** METHODDEF(boolean)
 695:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 696:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {   
 468              		.loc 1 696 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 48
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              	.LVL71:
 473 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 474              	.LCFI3:
ARM GAS  /tmp/ccDN7JHH.s 			page 22


 475              		.cfi_def_cfa_offset 36
 476              		.cfi_offset 4, -36
 477              		.cfi_offset 5, -32
 478              		.cfi_offset 6, -28
 479              		.cfi_offset 7, -24
 480              		.cfi_offset 8, -20
 481              		.cfi_offset 9, -16
 482              		.cfi_offset 10, -12
 483              		.cfi_offset 11, -8
 484              		.cfi_offset 14, -4
 485 0004 8FB0     		sub	sp, sp, #60
 486              	.LCFI4:
 487              		.cfi_def_cfa_offset 96
 488 0006 0746     		mov	r7, r0
 489 0008 8A46     		mov	r10, r1
 697:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 490              		.loc 1 697 0
 491 000a D0F8D081 		ldr	r8, [r0, #464]
 492              	.LVL72:
 698:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int Al = cinfo->Al;
 493              		.loc 1 698 0
 494 000e D0F8A4B1 		ldr	fp, [r0, #420]
 495              	.LVL73:
 699:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   register int s, r;
 700:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int blkn, ci;
 701:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   JBLOCKROW block;
 702:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   BITREAD_STATE_VARS;
 703:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   savable_state state;
 704:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl * tbl;
 705:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   jpeg_component_info * compptr;
 706:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 707:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 708:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->restart_interval) {
 496              		.loc 1 708 0
 497 0012 D0F81831 		ldr	r3, [r0, #280]
 498 0016 13B1     		cbz	r3, .L40
 709:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 499              		.loc 1 709 0
 500 0018 D8F82830 		ldr	r3, [r8, #40]
 501 001c D3B1     		cbz	r3, .L56
 502              	.LVL74:
 503              	.L40:
 710:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (! process_restart(cinfo))
 711:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
 712:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 713:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 714:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
 715:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
 716:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
 717:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (! entropy->insufficient_data) {
 504              		.loc 1 717 0
 505 001e D8F82430 		ldr	r3, [r8, #36]
 506 0022 0393     		str	r3, [sp, #12]
 507 0024 002B     		cmp	r3, #0
 508 0026 40F09380 		bne	.L42
 718:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 719:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Load up working state */
ARM GAS  /tmp/ccDN7JHH.s 			page 23


 720:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 509              		.loc 1 720 0
 510 002a 0D97     		str	r7, [sp, #52]
 511 002c BB69     		ldr	r3, [r7, #24]
 512 002e 1A68     		ldr	r2, [r3]
 513 0030 0992     		str	r2, [sp, #36]
 514 0032 5B68     		ldr	r3, [r3, #4]
 515 0034 0A93     		str	r3, [sp, #40]
 516 0036 D8F808E0 		ldr	lr, [r8, #8]
 517              	.LVL75:
 518 003a D8F80CC0 		ldr	ip, [r8, #12]
 519              	.LVL76:
 721:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 520              		.loc 1 721 0
 521 003e 04AC     		add	r4, sp, #16
 522 0040 08F11005 		add	r5, r8, #16
 523 0044 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 524 0046 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 525 0048 2B68     		ldr	r3, [r5]
 526 004a 2360     		str	r3, [r4]
 527              	.LVL77:
 722:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 723:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Outer loop handles each block in the MCU */
 724:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 725:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 528              		.loc 1 725 0
 529 004c 0026     		movs	r6, #0
 530 004e 7146     		mov	r1, lr
 531 0050 6246     		mov	r2, ip
 532 0052 3AE0     		b	.L43
 533              	.LVL78:
 534              	.L56:
 710:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
 535              		.loc 1 710 0
 536 0054 FFF7FEFF 		bl	process_restart
 537              	.LVL79:
 538 0058 0390     		str	r0, [sp, #12]
 539 005a 0028     		cmp	r0, #0
 540 005c DFD1     		bne	.L40
 541 005e 7EE0     		b	.L39
 542              	.LVL80:
 543              	.L59:
 544              	.LBB4:
 726:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       block = MCU_data[blkn];
 727:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 728:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 729:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 730:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 731:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Decode a single block's worth of coefficients */
 732:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 733:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Section F.2.2.1: decode the DC coefficient difference */
 734:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 545              		.loc 1 734 0 discriminator 1
 546 0060 0023     		movs	r3, #0
 547 0062 09A8     		add	r0, sp, #36
 548 0064 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 549              	.LVL81:
ARM GAS  /tmp/ccDN7JHH.s 			page 24


 550 0068 0028     		cmp	r0, #0
 551 006a 7CD0     		beq	.L50
 552              		.loc 1 734 0 is_stmt 0 discriminator 4
 553 006c 0B99     		ldr	r1, [sp, #44]
 554              	.LVL82:
 555 006e 0C9A     		ldr	r2, [sp, #48]
 556              	.LVL83:
 557 0070 072A     		cmp	r2, #7
 558 0072 40DC     		bgt	.L44
 559              		.loc 1 734 0
 560 0074 0123     		movs	r3, #1
 561 0076 00E0     		b	.L45
 562              	.LVL84:
 563              	.L52:
 564 0078 0923     		movs	r3, #9
 565              	.LVL85:
 566              	.L45:
 567              		.loc 1 734 0 discriminator 10
 568 007a 0093     		str	r3, [sp]
 569 007c 2346     		mov	r3, r4
 570              	.LVL86:
 571 007e 09A8     		add	r0, sp, #36
 572 0080 FFF7FEFF 		bl	jpeg_huff_decode
 573              	.LVL87:
 574 0084 041E     		subs	r4, r0, #0
 575              	.LVL88:
 576 0086 6ADB     		blt	.L39
 577              		.loc 1 734 0 discriminator 12
 578 0088 0B99     		ldr	r1, [sp, #44]
 579              	.LVL89:
 580 008a 0C9A     		ldr	r2, [sp, #48]
 581              	.LVL90:
 582              	.L46:
 583              	.LBE4:
 735:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (s) {
 584              		.loc 1 735 0 is_stmt 1
 585 008c 84B1     		cbz	r4, .L47
 736:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 586              		.loc 1 736 0
 587 008e 9442     		cmp	r4, r2
 588 0090 41DC     		bgt	.L57
 589              	.L48:
 737:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = GET_BITS(s);
 590              		.loc 1 737 0
 591 0092 121B     		subs	r2, r2, r4
 592              	.LVL91:
 593 0094 41FA02F3 		asr	r3, r1, r2
 594 0098 3548     		ldr	r0, .L60
 595 009a 50F824C0 		ldr	ip, [r0, r4, lsl #2]
 596 009e 03EA0C03 		and	r3, r3, ip
 597              	.LVL92:
 738:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	s = HUFF_EXTEND(r, s);
 598              		.loc 1 738 0
 599 00a2 013C     		subs	r4, r4, #1
 600              	.LVL93:
 601 00a4 50F82400 		ldr	r0, [r0, r4, lsl #2]
 602 00a8 9842     		cmp	r0, r3
ARM GAS  /tmp/ccDN7JHH.s 			page 25


 603 00aa 3CDB     		blt	.L54
 604              		.loc 1 738 0 is_stmt 0 discriminator 1
 605 00ac A3EB0C04 		sub	r4, r3, ip
 606              	.LVL94:
 607              	.L47:
 739:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 740:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 741:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Convert DC difference to actual value, update last_dc_val */
 742:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       s += state.last_dc_val[ci];
 608              		.loc 1 742 0 is_stmt 1 discriminator 2
 609 00b0 0EAB     		add	r3, sp, #56
 610 00b2 03EB8505 		add	r5, r3, r5, lsl #2
 611              	.LVL95:
 612 00b6 55F8243C 		ldr	r3, [r5, #-36]
 613 00ba 1C44     		add	r4, r4, r3
 614              	.LVL96:
 743:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       state.last_dc_val[ci] = s;
 615              		.loc 1 743 0 discriminator 2
 616 00bc 45F8244C 		str	r4, [r5, #-36]
 744:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
 745:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       (*block)[0] = (JCOEF) (s << Al);
 617              		.loc 1 745 0 discriminator 2
 618 00c0 04FA0BF4 		lsl	r4, r4, fp
 619              	.LVL97:
 620 00c4 A9F80040 		strh	r4, [r9]	@ movhi
 725:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       block = MCU_data[blkn];
 621              		.loc 1 725 0 discriminator 2
 622 00c8 0136     		adds	r6, r6, #1
 623              	.LVL98:
 624              	.L43:
 725:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       block = MCU_data[blkn];
 625              		.loc 1 725 0 is_stmt 0 discriminator 1
 626 00ca D7F86C31 		ldr	r3, [r7, #364]
 627 00ce B342     		cmp	r3, r6
 628 00d0 2BDD     		ble	.L58
 726:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 629              		.loc 1 726 0 is_stmt 1
 630 00d2 5AF82690 		ldr	r9, [r10, r6, lsl #2]
 631              	.LVL99:
 727:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 632              		.loc 1 727 0
 633 00d6 06F15C03 		add	r3, r6, #92
 634 00da 57F82350 		ldr	r5, [r7, r3, lsl #2]
 635              	.LVL100:
 728:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 636              		.loc 1 728 0
 637 00de 05F15403 		add	r3, r5, #84
 638 00e2 07EB8303 		add	r3, r7, r3, lsl #2
 639 00e6 5B68     		ldr	r3, [r3, #4]
 640              	.LVL101:
 729:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 641              		.loc 1 729 0
 642 00e8 5B69     		ldr	r3, [r3, #20]
 643              	.LVL102:
 644 00ea 0A33     		adds	r3, r3, #10
 645 00ec 08EB8303 		add	r3, r8, r3, lsl #2
 646 00f0 5C68     		ldr	r4, [r3, #4]
ARM GAS  /tmp/ccDN7JHH.s 			page 26


 647              	.LVL103:
 648              	.LBB5:
 734:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (s) {
 649              		.loc 1 734 0
 650 00f2 072A     		cmp	r2, #7
 651 00f4 B4DD     		ble	.L59
 652              	.LVL104:
 653              	.L44:
 734:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (s) {
 654              		.loc 1 734 0 is_stmt 0 discriminator 6
 655 00f6 A2F10803 		sub	r3, r2, #8
 656 00fa 41FA03F3 		asr	r3, r1, r3
 657 00fe DBB2     		uxtb	r3, r3
 658              	.LVL105:
 659 0100 03F12400 		add	r0, r3, #36
 660 0104 54F82000 		ldr	r0, [r4, r0, lsl #2]
 661              	.LVL106:
 662 0108 0028     		cmp	r0, #0
 663 010a B5D0     		beq	.L52
 734:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (s) {
 664              		.loc 1 734 0 discriminator 8
 665 010c 121A     		subs	r2, r2, r0
 666              	.LVL107:
 667 010e 1C44     		add	r4, r4, r3
 668              	.LVL108:
 669 0110 94F89044 		ldrb	r4, [r4, #1168]	@ zero_extendqisi2
 670              	.LVL109:
 671 0114 BAE7     		b	.L46
 672              	.LVL110:
 673              	.L57:
 674              	.LBE5:
 736:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = GET_BITS(s);
 675              		.loc 1 736 0 is_stmt 1 discriminator 1
 676 0116 2346     		mov	r3, r4
 677 0118 09A8     		add	r0, sp, #36
 678 011a FFF7FEFF 		bl	jpeg_fill_bit_buffer
 679              	.LVL111:
 680 011e 20B3     		cbz	r0, .L53
 736:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = GET_BITS(s);
 681              		.loc 1 736 0 is_stmt 0 discriminator 3
 682 0120 0B99     		ldr	r1, [sp, #44]
 683              	.LVL112:
 684 0122 0C9A     		ldr	r2, [sp, #48]
 685              	.LVL113:
 686 0124 B5E7     		b	.L48
 687              	.LVL114:
 688              	.L54:
 738:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 689              		.loc 1 738 0 is_stmt 1
 690 0126 1C46     		mov	r4, r3
 691              	.LVL115:
 692 0128 C2E7     		b	.L47
 693              	.LVL116:
 694              	.L58:
 695 012a 8E46     		mov	lr, r1
 696 012c 9446     		mov	ip, r2
 746:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
ARM GAS  /tmp/ccDN7JHH.s 			page 27


 747:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 748:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Completed MCU, so update state */
 749:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 697              		.loc 1 749 0
 698 012e BB69     		ldr	r3, [r7, #24]
 699 0130 099A     		ldr	r2, [sp, #36]
 700              	.LVL117:
 701 0132 1A60     		str	r2, [r3]
 702 0134 BB69     		ldr	r3, [r7, #24]
 703 0136 0A9A     		ldr	r2, [sp, #40]
 704 0138 5A60     		str	r2, [r3, #4]
 705 013a C8F80810 		str	r1, [r8, #8]
 706 013e C8F80CC0 		str	ip, [r8, #12]
 750:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 707              		.loc 1 750 0
 708 0142 08F11004 		add	r4, r8, #16
 709 0146 04AD     		add	r5, sp, #16
 710 0148 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 711              	.LVL118:
 712 014a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 713 014c 2B68     		ldr	r3, [r5]
 714 014e 2360     		str	r3, [r4]
 715              	.LVL119:
 716              	.L42:
 751:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 752:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 753:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
 754:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->restarts_to_go--;
 717              		.loc 1 754 0
 718 0150 D8F82830 		ldr	r3, [r8, #40]
 719 0154 013B     		subs	r3, r3, #1
 720 0156 C8F82830 		str	r3, [r8, #40]
 755:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 756:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return TRUE;
 721              		.loc 1 756 0
 722 015a 0123     		movs	r3, #1
 723 015c 0393     		str	r3, [sp, #12]
 724              	.L39:
 757:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 725              		.loc 1 757 0
 726 015e 0398     		ldr	r0, [sp, #12]
 727 0160 0FB0     		add	sp, sp, #60
 728              	.LCFI5:
 729              		.cfi_remember_state
 730              		.cfi_def_cfa_offset 36
 731              		@ sp needed
 732 0162 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 733              	.LVL120:
 734              	.L50:
 735              	.LCFI6:
 736              		.cfi_restore_state
 737              	.LBB6:
 734:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (s) {
 738              		.loc 1 734 0
 739 0166 0390     		str	r0, [sp, #12]
 740 0168 F9E7     		b	.L39
 741              	.LVL121:
ARM GAS  /tmp/ccDN7JHH.s 			page 28


 742              	.L53:
 743              	.LBE6:
 736:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = GET_BITS(s);
 744              		.loc 1 736 0
 745 016a 0390     		str	r0, [sp, #12]
 746 016c F7E7     		b	.L39
 747              	.L61:
 748 016e 00BF     		.align	2
 749              	.L60:
 750 0170 00000000 		.word	.LANCHOR0
 751              		.cfi_endproc
 752              	.LFE7:
 754              		.section	.text.decode_mcu_AC_first,"ax",%progbits
 755              		.align	1
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv5-sp-d16
 761              	decode_mcu_AC_first:
 762              	.LFB8:
 758:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 759:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 760:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 761:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * MCU decoding for AC initial scan (either spectral selection,
 762:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * or first pass of successive approximation).
 763:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 764:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 765:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** METHODDEF(boolean)
 766:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 767:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {   
 763              		.loc 1 767 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 40
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              	.LVL122:
 768 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 769              	.LCFI7:
 770              		.cfi_def_cfa_offset 36
 771              		.cfi_offset 4, -36
 772              		.cfi_offset 5, -32
 773              		.cfi_offset 6, -28
 774              		.cfi_offset 7, -24
 775              		.cfi_offset 8, -20
 776              		.cfi_offset 9, -16
 777              		.cfi_offset 10, -12
 778              		.cfi_offset 11, -8
 779              		.cfi_offset 14, -4
 780 0004 8DB0     		sub	sp, sp, #52
 781              	.LCFI8:
 782              		.cfi_def_cfa_offset 88
 783 0006 8146     		mov	r9, r0
 784 0008 0C46     		mov	r4, r1
 768:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 785              		.loc 1 768 0
 786 000a D0F8D071 		ldr	r7, [r0, #464]
 787              	.LVL123:
 769:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   register int s, k, r;
ARM GAS  /tmp/ccDN7JHH.s 			page 29


 770:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   unsigned int EOBRUN;
 771:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int Se, Al;
 772:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   const int * natural_order;
 773:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   JBLOCKROW block;
 774:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   BITREAD_STATE_VARS;
 775:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl * tbl;
 776:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 777:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 778:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->restart_interval) {
 788              		.loc 1 778 0
 789 000e D0F81831 		ldr	r3, [r0, #280]
 790 0012 0BB1     		cbz	r3, .L63
 779:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 791              		.loc 1 779 0
 792 0014 BB6A     		ldr	r3, [r7, #40]
 793 0016 CBB1     		cbz	r3, .L86
 794              	.LVL124:
 795              	.L63:
 780:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (! process_restart(cinfo))
 781:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
 782:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 783:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 784:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
 785:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
 786:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
 787:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (! entropy->insufficient_data) {
 796              		.loc 1 787 0
 797 0018 7B6A     		ldr	r3, [r7, #36]
 798 001a 0393     		str	r3, [sp, #12]
 799 001c 6BB9     		cbnz	r3, .L65
 788:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 789:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     Se = cinfo->Se;
 800              		.loc 1 789 0
 801 001e D9F89CA1 		ldr	r10, [r9, #412]
 802              	.LVL125:
 790:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     Al = cinfo->Al;
 803              		.loc 1 790 0
 804 0022 D9F8A431 		ldr	r3, [r9, #420]
 805 0026 1846     		mov	r0, r3
 806              	.LVL126:
 791:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     natural_order = cinfo->natural_order;
 807              		.loc 1 791 0
 808 0028 D9F8ACB1 		ldr	fp, [r9, #428]
 809              	.LVL127:
 792:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 793:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Load up working state.
 794:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * We can avoid loading/saving bitread state if in an EOB run.
 795:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      */
 796:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 810              		.loc 1 796 0
 811 002c 3B69     		ldr	r3, [r7, #16]
 812 002e 0493     		str	r3, [sp, #16]
 813              	.LVL128:
 797:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 798:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* There is always only one block per MCU */
 799:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 800:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (EOBRUN > 0)		/* if it's a band of zeroes... */
ARM GAS  /tmp/ccDN7JHH.s 			page 30


 814              		.loc 1 800 0
 815 0030 93B1     		cbz	r3, .L66
 801:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       EOBRUN--;			/* ...process it now (we do nothing) */
 816              		.loc 1 801 0
 817 0032 013B     		subs	r3, r3, #1
 818              	.LVL129:
 819 0034 0493     		str	r3, [sp, #16]
 820              	.LVL130:
 821              	.L67:
 802:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     else {
 803:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 804:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       block = MCU_data[0];
 805:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       tbl = entropy->ac_derived_tbl;
 806:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 807:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (k = cinfo->Ss; k <= Se; k++) {
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 809:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 810:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	s &= 15;
 811:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
 812:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  k += r;
 813:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 814:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 815:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 816:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 817:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 818:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} else {
 819:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (r == 15) {	/* ZRL */
 820:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    k += 15;		/* skip 15 zeroes in band */
 821:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  } else {		/* EOBr, run length is 2^r + appended bits */
 822:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    EOBRUN = 1 << r;
 823:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (r) {		/* EOBr, r > 0 */
 824:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 825:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      r = GET_BITS(r);
 826:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      EOBRUN += r;
 827:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    }
 828:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    EOBRUN--;		/* this band is processed at this moment */
 829:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    break;		/* force end-of-band */
 830:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  }
 831:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
 832:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 833:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 834:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 835:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 836:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 837:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Completed MCU, so update state */
 838:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 822              		.loc 1 838 0
 823 0036 049B     		ldr	r3, [sp, #16]
 824 0038 3B61     		str	r3, [r7, #16]
 825              	.LVL131:
 826              	.L65:
 839:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 840:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 841:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
 842:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->restarts_to_go--;
 827              		.loc 1 842 0
 828 003a BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/ccDN7JHH.s 			page 31


 829 003c 013B     		subs	r3, r3, #1
 830 003e BB62     		str	r3, [r7, #40]
 843:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 844:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return TRUE;
 831              		.loc 1 844 0
 832 0040 0123     		movs	r3, #1
 833 0042 0393     		str	r3, [sp, #12]
 834              	.L62:
 845:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 835              		.loc 1 845 0
 836 0044 0398     		ldr	r0, [sp, #12]
 837 0046 0DB0     		add	sp, sp, #52
 838              	.LCFI9:
 839              		.cfi_remember_state
 840              		.cfi_def_cfa_offset 36
 841              		@ sp needed
 842 0048 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 843              	.LVL132:
 844              	.L86:
 845              	.LCFI10:
 846              		.cfi_restore_state
 780:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
 847              		.loc 1 780 0
 848 004c FFF7FEFF 		bl	process_restart
 849              	.LVL133:
 850 0050 0390     		str	r0, [sp, #12]
 851 0052 0028     		cmp	r0, #0
 852 0054 E0D1     		bne	.L63
 853 0056 F5E7     		b	.L62
 854              	.LVL134:
 855              	.L66:
 803:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       block = MCU_data[0];
 856              		.loc 1 803 0
 857 0058 CDF82C90 		str	r9, [sp, #44]
 858 005c D9F81830 		ldr	r3, [r9, #24]
 859              	.LVL135:
 860 0060 1A68     		ldr	r2, [r3]
 861 0062 0792     		str	r2, [sp, #28]
 862 0064 5B68     		ldr	r3, [r3, #4]
 863 0066 0893     		str	r3, [sp, #32]
 864 0068 B968     		ldr	r1, [r7, #8]
 865              	.LVL136:
 866 006a FA68     		ldr	r2, [r7, #12]
 867              	.LVL137:
 804:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       tbl = entropy->ac_derived_tbl;
 868              		.loc 1 804 0
 869 006c 2668     		ldr	r6, [r4]
 870              	.LVL138:
 805:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 871              		.loc 1 805 0
 872 006e D7F83C80 		ldr	r8, [r7, #60]
 873              	.LVL139:
 807:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 874              		.loc 1 807 0
 875 0072 D9F89851 		ldr	r5, [r9, #408]
 876              	.LVL140:
 877 0076 0597     		str	r7, [sp, #20]
ARM GAS  /tmp/ccDN7JHH.s 			page 32


 878 0078 0746     		mov	r7, r0
 879              	.LVL141:
 880 007a 31E0     		b	.L68
 881              	.LVL142:
 882              	.L89:
 883              	.LBB7:
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 884              		.loc 1 808 0 discriminator 1
 885 007c 0023     		movs	r3, #0
 886 007e 07A8     		add	r0, sp, #28
 887 0080 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 888              	.LVL143:
 889 0084 0028     		cmp	r0, #0
 890 0086 74D0     		beq	.L81
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 891              		.loc 1 808 0 is_stmt 0 discriminator 4
 892 0088 0999     		ldr	r1, [sp, #36]
 893              	.LVL144:
 894 008a 0A9A     		ldr	r2, [sp, #40]
 895              	.LVL145:
 896 008c 072A     		cmp	r2, #7
 897 008e 2BDC     		bgt	.L69
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 898              		.loc 1 808 0
 899 0090 0123     		movs	r3, #1
 900 0092 00E0     		b	.L70
 901              	.LVL146:
 902              	.L83:
 903 0094 0923     		movs	r3, #9
 904              	.LVL147:
 905              	.L70:
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 906              		.loc 1 808 0 discriminator 10
 907 0096 0093     		str	r3, [sp]
 908 0098 4346     		mov	r3, r8
 909              	.LVL148:
 910 009a 07A8     		add	r0, sp, #28
 911 009c FFF7FEFF 		bl	jpeg_huff_decode
 912              	.LVL149:
 913 00a0 041E     		subs	r4, r0, #0
 914 00a2 CFDB     		blt	.L62
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 915              		.loc 1 808 0 discriminator 12
 916 00a4 0999     		ldr	r1, [sp, #36]
 917              	.LVL150:
 918 00a6 0A9A     		ldr	r2, [sp, #40]
 919              	.LVL151:
 920              	.L71:
 921              	.LBE7:
 809:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	s &= 15;
 922              		.loc 1 809 0 is_stmt 1
 923 00a8 2311     		asrs	r3, r4, #4
 924              	.LVL152:
 811:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  k += r;
 925              		.loc 1 811 0
 926 00aa 14F00F04 		ands	r4, r4, #15
 927              	.LVL153:
ARM GAS  /tmp/ccDN7JHH.s 			page 33


 928 00ae 34D0     		beq	.L72
 812:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 929              		.loc 1 812 0
 930 00b0 1D44     		add	r5, r5, r3
 931              	.LVL154:
 813:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 932              		.loc 1 813 0
 933 00b2 A242     		cmp	r2, r4
 934 00b4 28DB     		blt	.L87
 935              	.LVL155:
 936              	.L73:
 814:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 937              		.loc 1 814 0
 938 00b6 121B     		subs	r2, r2, r4
 939              	.LVL156:
 940 00b8 41FA02F3 		asr	r3, r1, r2
 941 00bc 2F48     		ldr	r0, .L91
 942 00be 50F824C0 		ldr	ip, [r0, r4, lsl #2]
 943 00c2 03EA0C03 		and	r3, r3, ip
 944              	.LVL157:
 815:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 945              		.loc 1 815 0
 946 00c6 013C     		subs	r4, r4, #1
 947              	.LVL158:
 948 00c8 50F82400 		ldr	r0, [r0, r4, lsl #2]
 949 00cc 9842     		cmp	r0, r3
 950 00ce 01DB     		blt	.L74
 815:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 951              		.loc 1 815 0 is_stmt 0 discriminator 1
 952 00d0 A3EB0C03 		sub	r3, r3, ip
 953              	.LVL159:
 954              	.L74:
 817:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} else {
 955              		.loc 1 817 0 is_stmt 1 discriminator 4
 956 00d4 BB40     		lsls	r3, r3, r7
 957              	.LVL160:
 958 00d6 5BF82500 		ldr	r0, [fp, r5, lsl #2]
 959 00da 26F81030 		strh	r3, [r6, r0, lsl #1]	@ movhi
 960              	.LVL161:
 961              	.L75:
 807:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 962              		.loc 1 807 0 discriminator 2
 963 00de 0135     		adds	r5, r5, #1
 964              	.LVL162:
 965              	.L68:
 807:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 966              		.loc 1 807 0 is_stmt 0 discriminator 1
 967 00e0 5545     		cmp	r5, r10
 968 00e2 3ADC     		bgt	.L88
 969              	.LBB8:
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 970              		.loc 1 808 0 is_stmt 1
 971 00e4 072A     		cmp	r2, #7
 972 00e6 C9DD     		ble	.L89
 973              	.L69:
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 974              		.loc 1 808 0 is_stmt 0 discriminator 6
ARM GAS  /tmp/ccDN7JHH.s 			page 34


 975 00e8 A2F10803 		sub	r3, r2, #8
 976 00ec 41FA03F3 		asr	r3, r1, r3
 977 00f0 DBB2     		uxtb	r3, r3
 978              	.LVL163:
 979 00f2 03F12400 		add	r0, r3, #36
 980 00f6 58F82000 		ldr	r0, [r8, r0, lsl #2]
 981              	.LVL164:
 982 00fa 0028     		cmp	r0, #0
 983 00fc CAD0     		beq	.L83
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 984              		.loc 1 808 0 discriminator 8
 985 00fe 121A     		subs	r2, r2, r0
 986              	.LVL165:
 987 0100 4344     		add	r3, r3, r8
 988              	.LVL166:
 989 0102 93F89044 		ldrb	r4, [r3, #1168]	@ zero_extendqisi2
 990              	.LVL167:
 991 0106 CFE7     		b	.L71
 992              	.LVL168:
 993              	.L87:
 994              	.LBE8:
 813:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 995              		.loc 1 813 0 is_stmt 1 discriminator 1
 996 0108 2346     		mov	r3, r4
 997              	.LVL169:
 998 010a 07A8     		add	r0, sp, #28
 999 010c FFF7FEFF 		bl	jpeg_fill_bit_buffer
 1000              	.LVL170:
 1001 0110 0028     		cmp	r0, #0
 1002 0112 30D0     		beq	.L84
 813:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 1003              		.loc 1 813 0 is_stmt 0 discriminator 3
 1004 0114 0999     		ldr	r1, [sp, #36]
 1005              	.LVL171:
 1006 0116 0A9A     		ldr	r2, [sp, #40]
 1007              	.LVL172:
 1008 0118 CDE7     		b	.L73
 1009              	.LVL173:
 1010              	.L72:
 819:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    k += 15;		/* skip 15 zeroes in band */
 1011              		.loc 1 819 0 is_stmt 1
 1012 011a 0F2B     		cmp	r3, #15
 1013 011c 01D1     		bne	.L76
 820:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  } else {		/* EOBr, run length is 2^r + appended bits */
 1014              		.loc 1 820 0
 1015 011e 0F35     		adds	r5, r5, #15
 1016              	.LVL174:
 1017 0120 DDE7     		b	.L75
 1018              	.L76:
 1019 0122 059F     		ldr	r7, [sp, #20]
 1020              	.LVL175:
 1021 0124 1E46     		mov	r6, r3
 1022              	.LVL176:
 822:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (r) {		/* EOBr, r > 0 */
 1023              		.loc 1 822 0
 1024 0126 0124     		movs	r4, #1
 1025              	.LVL177:
ARM GAS  /tmp/ccDN7JHH.s 			page 35


 1026 0128 9C40     		lsls	r4, r4, r3
 1027              	.LVL178:
 823:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 1028              		.loc 1 823 0
 1029 012a 4BB1     		cbz	r3, .L77
 824:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      r = GET_BITS(r);
 1030              		.loc 1 824 0
 1031 012c 9A42     		cmp	r2, r3
 1032 012e 0ADB     		blt	.L90
 1033              	.LVL179:
 1034              	.L78:
 825:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      EOBRUN += r;
 1035              		.loc 1 825 0
 1036 0130 921B     		subs	r2, r2, r6
 1037              	.LVL180:
 1038 0132 41FA02F3 		asr	r3, r1, r2
 1039 0136 1148     		ldr	r0, .L91
 1040 0138 50F82600 		ldr	r0, [r0, r6, lsl #2]
 1041 013c 0340     		ands	r3, r3, r0
 1042              	.LVL181:
 826:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    }
 1043              		.loc 1 826 0
 1044 013e 1C44     		add	r4, r4, r3
 1045              	.LVL182:
 1046              	.L77:
 828:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    break;		/* force end-of-band */
 1047              		.loc 1 828 0
 1048 0140 631E     		subs	r3, r4, #1
 1049              	.LVL183:
 1050 0142 0493     		str	r3, [sp, #16]
 1051              	.LVL184:
 829:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  }
 1052              		.loc 1 829 0
 1053 0144 0AE0     		b	.L79
 1054              	.LVL185:
 1055              	.L90:
 824:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      r = GET_BITS(r);
 1056              		.loc 1 824 0 discriminator 1
 1057 0146 07A8     		add	r0, sp, #28
 1058 0148 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 1059              	.LVL186:
 1060 014c 0390     		str	r0, [sp, #12]
 1061 014e 0028     		cmp	r0, #0
 1062 0150 3FF478AF 		beq	.L62
 824:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      r = GET_BITS(r);
 1063              		.loc 1 824 0 is_stmt 0 discriminator 3
 1064 0154 0999     		ldr	r1, [sp, #36]
 1065              	.LVL187:
 1066 0156 0A9A     		ldr	r2, [sp, #40]
 1067              	.LVL188:
 1068 0158 EAE7     		b	.L78
 1069              	.LVL189:
 1070              	.L88:
 1071 015a 059F     		ldr	r7, [sp, #20]
 1072              	.LVL190:
 1073              	.L79:
 834:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
ARM GAS  /tmp/ccDN7JHH.s 			page 36


 1074              		.loc 1 834 0 is_stmt 1
 1075 015c D9F81830 		ldr	r3, [r9, #24]
 1076 0160 0798     		ldr	r0, [sp, #28]
 1077 0162 1860     		str	r0, [r3]
 1078 0164 D9F81830 		ldr	r3, [r9, #24]
 1079 0168 0898     		ldr	r0, [sp, #32]
 1080 016a 5860     		str	r0, [r3, #4]
 1081 016c B960     		str	r1, [r7, #8]
 1082 016e FA60     		str	r2, [r7, #12]
 1083 0170 61E7     		b	.L67
 1084              	.LVL191:
 1085              	.L81:
 1086              	.LBB9:
 808:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 1087              		.loc 1 808 0
 1088 0172 0390     		str	r0, [sp, #12]
 1089 0174 66E7     		b	.L62
 1090              	.LVL192:
 1091              	.L84:
 1092              	.LBE9:
 813:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 1093              		.loc 1 813 0
 1094 0176 0390     		str	r0, [sp, #12]
 1095 0178 64E7     		b	.L62
 1096              	.L92:
 1097 017a 00BF     		.align	2
 1098              	.L91:
 1099 017c 00000000 		.word	.LANCHOR0
 1100              		.cfi_endproc
 1101              	.LFE8:
 1103              		.section	.text.decode_mcu_DC_refine,"ax",%progbits
 1104              		.align	1
 1105              		.syntax unified
 1106              		.thumb
 1107              		.thumb_func
 1108              		.fpu fpv5-sp-d16
 1110              	decode_mcu_DC_refine:
 1111              	.LFB9:
 846:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 847:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 848:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 849:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * MCU decoding for DC successive approximation refinement scan.
 850:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Note: we assume such scans can be multi-component, although the spec
 851:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * is not very clear on the point.
 852:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 853:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 854:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** METHODDEF(boolean)
 855:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 856:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {   
 1112              		.loc 1 856 0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 24
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 1116              	.LVL193:
 1117 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1118              	.LCFI11:
 1119              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccDN7JHH.s 			page 37


 1120              		.cfi_offset 4, -28
 1121              		.cfi_offset 5, -24
 1122              		.cfi_offset 6, -20
 1123              		.cfi_offset 7, -16
 1124              		.cfi_offset 8, -12
 1125              		.cfi_offset 9, -8
 1126              		.cfi_offset 14, -4
 1127 0004 87B0     		sub	sp, sp, #28
 1128              	.LCFI12:
 1129              		.cfi_def_cfa_offset 56
 1130 0006 0646     		mov	r6, r0
 1131 0008 0F46     		mov	r7, r1
 857:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1132              		.loc 1 857 0
 1133 000a D0F8D091 		ldr	r9, [r0, #464]
 1134              	.LVL194:
 858:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 1135              		.loc 1 858 0
 1136 000e D0F8A431 		ldr	r3, [r0, #420]
 1137 0012 4FF00108 		mov	r8, #1
 1138 0016 08FA03F8 		lsl	r8, r8, r3
 1139              	.LVL195:
 859:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int blkn;
 860:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   JBLOCKROW block;
 861:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   BITREAD_STATE_VARS;
 862:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 863:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 864:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->restart_interval) {
 1140              		.loc 1 864 0
 1141 001a D0F81831 		ldr	r3, [r0, #280]
 1142 001e 13B1     		cbz	r3, .L94
 865:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 1143              		.loc 1 865 0
 1144 0020 D9F82830 		ldr	r3, [r9, #40]
 1145 0024 5BB1     		cbz	r3, .L101
 1146              	.LVL196:
 1147              	.L94:
 866:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (! process_restart(cinfo))
 867:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
 868:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 869:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 870:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Not worth the cycles to check insufficient_data here,
 871:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * since we will not change the data anyway if we read zeroes.
 872:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
 873:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 874:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Load up working state */
 875:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 1148              		.loc 1 875 0
 1149 0026 0596     		str	r6, [sp, #20]
 1150 0028 B369     		ldr	r3, [r6, #24]
 1151 002a 1A68     		ldr	r2, [r3]
 1152 002c 0192     		str	r2, [sp, #4]
 1153 002e 5B68     		ldr	r3, [r3, #4]
 1154 0030 0293     		str	r3, [sp, #8]
 1155 0032 D9F80810 		ldr	r1, [r9, #8]
 1156              	.LVL197:
 1157 0036 D9F80C20 		ldr	r2, [r9, #12]
ARM GAS  /tmp/ccDN7JHH.s 			page 38


 1158              	.LVL198:
 876:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 877:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Outer loop handles each block in the MCU */
 878:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 879:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 1159              		.loc 1 879 0
 1160 003a 0024     		movs	r4, #0
 1161 003c 0FE0     		b	.L96
 1162              	.LVL199:
 1163              	.L101:
 866:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (! process_restart(cinfo))
 1164              		.loc 1 866 0
 1165 003e FFF7FEFF 		bl	process_restart
 1166              	.LVL200:
 1167 0042 0346     		mov	r3, r0
 1168 0044 0028     		cmp	r0, #0
 1169 0046 EED1     		bne	.L94
 1170 0048 2CE0     		b	.L93
 1171              	.LVL201:
 1172              	.L103:
 880:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     block = MCU_data[blkn];
 881:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 882:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 883:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 1173              		.loc 1 883 0 discriminator 1
 1174 004a 0123     		movs	r3, #1
 1175 004c 01A8     		add	r0, sp, #4
 1176 004e FFF7FEFF 		bl	jpeg_fill_bit_buffer
 1177              	.LVL202:
 1178 0052 0346     		mov	r3, r0
 1179 0054 30B3     		cbz	r0, .L93
 1180              		.loc 1 883 0 is_stmt 0 discriminator 3
 1181 0056 0399     		ldr	r1, [sp, #12]
 1182              	.LVL203:
 1183 0058 049A     		ldr	r2, [sp, #16]
 1184              	.LVL204:
 1185 005a 08E0     		b	.L97
 1186              	.L98:
 879:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     block = MCU_data[blkn];
 1187              		.loc 1 879 0 is_stmt 1 discriminator 2
 1188 005c 0134     		adds	r4, r4, #1
 1189              	.LVL205:
 1190              	.L96:
 879:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     block = MCU_data[blkn];
 1191              		.loc 1 879 0 is_stmt 0 discriminator 1
 1192 005e D6F86C31 		ldr	r3, [r6, #364]
 1193 0062 A342     		cmp	r3, r4
 1194 0064 0EDD     		ble	.L102
 880:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     block = MCU_data[blkn];
 1195              		.loc 1 880 0 is_stmt 1
 1196 0066 57F82450 		ldr	r5, [r7, r4, lsl #2]
 1197              	.LVL206:
 1198              		.loc 1 883 0
 1199 006a 002A     		cmp	r2, #0
 1200 006c EDDD     		ble	.L103
 1201              	.L97:
 884:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (GET_BITS(1))
ARM GAS  /tmp/ccDN7JHH.s 			page 39


 1202              		.loc 1 884 0
 1203 006e 013A     		subs	r2, r2, #1
 1204              	.LVL207:
 1205 0070 41FA02F3 		asr	r3, r1, r2
 1206 0074 13F0010F 		tst	r3, #1
 1207 0078 F0D0     		beq	.L98
 885:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       (*block)[0] |= p1;
 1208              		.loc 1 885 0
 1209 007a 2B88     		ldrh	r3, [r5]
 1210 007c 48EA0303 		orr	r3, r8, r3
 1211 0080 2B80     		strh	r3, [r5]	@ movhi
 1212 0082 EBE7     		b	.L98
 1213              	.LVL208:
 1214              	.L102:
 886:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Note: since we use |=, repeating the assignment later is safe */
 887:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 888:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 889:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Completed MCU, so update state */
 890:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 1215              		.loc 1 890 0
 1216 0084 B369     		ldr	r3, [r6, #24]
 1217 0086 0198     		ldr	r0, [sp, #4]
 1218 0088 1860     		str	r0, [r3]
 1219 008a B369     		ldr	r3, [r6, #24]
 1220 008c 0298     		ldr	r0, [sp, #8]
 1221 008e 5860     		str	r0, [r3, #4]
 1222 0090 C9F80810 		str	r1, [r9, #8]
 1223 0094 C9F80C20 		str	r2, [r9, #12]
 891:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 892:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
 893:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->restarts_to_go--;
 1224              		.loc 1 893 0
 1225 0098 D9F82830 		ldr	r3, [r9, #40]
 1226 009c 013B     		subs	r3, r3, #1
 1227 009e C9F82830 		str	r3, [r9, #40]
 894:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 895:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return TRUE;
 1228              		.loc 1 895 0
 1229 00a2 0123     		movs	r3, #1
 1230              	.LVL209:
 1231              	.L93:
 896:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 1232              		.loc 1 896 0
 1233 00a4 1846     		mov	r0, r3
 1234 00a6 07B0     		add	sp, sp, #28
 1235              	.LCFI13:
 1236              		.cfi_def_cfa_offset 28
 1237              		@ sp needed
 1238 00a8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1239              		.cfi_endproc
 1240              	.LFE9:
 1242              		.section	.text.decode_mcu_AC_refine,"ax",%progbits
 1243              		.align	1
 1244              		.syntax unified
 1245              		.thumb
 1246              		.thumb_func
 1247              		.fpu fpv5-sp-d16
ARM GAS  /tmp/ccDN7JHH.s 			page 40


 1249              	decode_mcu_AC_refine:
 1250              	.LFB10:
 897:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 898:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 899:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
 900:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * MCU decoding for AC successive approximation refinement scan.
 901:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
 902:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 903:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** METHODDEF(boolean)
 904:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 905:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {   
 1251              		.loc 1 905 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 320
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 1255              	.LVL210:
 1256 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1257              	.LCFI14:
 1258              		.cfi_def_cfa_offset 36
 1259              		.cfi_offset 4, -36
 1260              		.cfi_offset 5, -32
 1261              		.cfi_offset 6, -28
 1262              		.cfi_offset 7, -24
 1263              		.cfi_offset 8, -20
 1264              		.cfi_offset 9, -16
 1265              		.cfi_offset 10, -12
 1266              		.cfi_offset 11, -8
 1267              		.cfi_offset 14, -4
 1268 0004 D3B0     		sub	sp, sp, #332
 1269              	.LCFI15:
 1270              		.cfi_def_cfa_offset 368
 1271 0006 0690     		str	r0, [sp, #24]
 1272 0008 0C46     		mov	r4, r1
 906:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1273              		.loc 1 906 0
 1274 000a D0F8D021 		ldr	r2, [r0, #464]
 1275 000e 0592     		str	r2, [sp, #20]
 1276              	.LVL211:
 907:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   register int s, k, r;
 908:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   unsigned int EOBRUN;
 909:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int Se, p1, m1;
 910:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   const int * natural_order;
 911:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   JBLOCKROW block;
 912:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   JCOEFPTR thiscoef;
 913:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   BITREAD_STATE_VARS;
 914:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   d_derived_tbl * tbl;
 915:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int num_newnz;
 916:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int newnz_pos[DCTSIZE2];
 917:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 918:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 919:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->restart_interval) {
 1277              		.loc 1 919 0
 1278 0010 D0F81831 		ldr	r3, [r0, #280]
 1279 0014 13B1     		cbz	r3, .L105
 920:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 1280              		.loc 1 920 0
 1281 0016 936A     		ldr	r3, [r2, #40]
ARM GAS  /tmp/ccDN7JHH.s 			page 41


 1282 0018 002B     		cmp	r3, #0
 1283 001a 44D0     		beq	.L149
 1284              	.LVL212:
 1285              	.L105:
 921:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (! process_restart(cinfo))
 922:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
 923:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 924:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 925:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* If we've run out of data, don't modify the MCU.
 926:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
 927:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (! entropy->insufficient_data) {
 1286              		.loc 1 927 0
 1287 001c 0599     		ldr	r1, [sp, #20]
 1288 001e 4B6A     		ldr	r3, [r1, #36]
 1289 0020 0793     		str	r3, [sp, #28]
 1290 0022 002B     		cmp	r3, #0
 1291 0024 35D1     		bne	.L107
 928:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 929:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     Se = cinfo->Se;
 1292              		.loc 1 929 0
 1293 0026 0698     		ldr	r0, [sp, #24]
 1294 0028 D0F89C91 		ldr	r9, [r0, #412]
 1295              	.LVL213:
 930:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 1296              		.loc 1 930 0
 1297 002c D0F8A431 		ldr	r3, [r0, #420]
 1298 0030 0122     		movs	r2, #1
 1299 0032 9A40     		lsls	r2, r2, r3
 1300 0034 0892     		str	r2, [sp, #32]
 1301              	.LVL214:
 931:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 1302              		.loc 1 931 0
 1303 0036 4FF0FF32 		mov	r2, #-1
 1304              	.LVL215:
 1305 003a 02FA03F3 		lsl	r3, r2, r3
 1306 003e 0A93     		str	r3, [sp, #40]
 1307              	.LVL216:
 932:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     natural_order = cinfo->natural_order;
 1308              		.loc 1 932 0
 1309 0040 D0F8ACA1 		ldr	r10, [r0, #428]
 1310              	.LVL217:
 933:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 934:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Load up working state */
 935:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 1311              		.loc 1 935 0
 1312 0044 5190     		str	r0, [sp, #324]
 1313 0046 8369     		ldr	r3, [r0, #24]
 1314              	.LVL218:
 1315 0048 1A68     		ldr	r2, [r3]
 1316 004a 4D92     		str	r2, [sp, #308]
 1317 004c 5B68     		ldr	r3, [r3, #4]
 1318 004e 4E93     		str	r3, [sp, #312]
 1319 0050 D1F808B0 		ldr	fp, [r1, #8]
 1320              	.LVL219:
 1321 0054 CD68     		ldr	r5, [r1, #12]
 1322              	.LVL220:
 936:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
ARM GAS  /tmp/ccDN7JHH.s 			page 42


 1323              		.loc 1 936 0
 1324 0056 0B69     		ldr	r3, [r1, #16]
 1325 0058 0B93     		str	r3, [sp, #44]
 1326              	.LVL221:
 937:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 938:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* There is always only one block per MCU */
 939:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     block = MCU_data[0];
 1327              		.loc 1 939 0
 1328 005a D4F80080 		ldr	r8, [r4]
 1329              	.LVL222:
 940:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     tbl = entropy->ac_derived_tbl;
 1330              		.loc 1 940 0
 1331 005e CA6B     		ldr	r2, [r1, #60]
 1332 0060 0492     		str	r2, [sp, #16]
 1333              	.LVL223:
 941:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 942:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* If we are forced to suspend, we must undo the assignments to any newly
 943:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * nonzero coefficients in the block, because otherwise we'd get confused
 944:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * next time about which coefficients were already nonzero.
 945:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * But we need not undo addition of bits to already-nonzero coefficients;
 946:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * instead, we can test the current bit to see if we already did it.
 947:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      */
 948:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     num_newnz = 0;
 949:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 950:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* initialize coefficient loop counter to start of band */
 951:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     k = cinfo->Ss;
 1334              		.loc 1 951 0
 1335 0062 D0F89841 		ldr	r4, [r0, #408]
 1336              	.LVL224:
 952:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 953:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (EOBRUN == 0) {
 1337              		.loc 1 953 0
 1338 0066 002B     		cmp	r3, #0
 1339 0068 00F0EB80 		beq	.L137
 948:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 1340              		.loc 1 948 0
 1341 006c 0023     		movs	r3, #0
 1342              	.LVL225:
 1343 006e 0993     		str	r3, [sp, #36]
 1344              	.LVL226:
 1345              	.L109:
 954:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (; k <= Se; k++) {
 955:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 956:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 957:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	s &= 15;
 958:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
 959:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (s != 1)		/* size of new coef should always be 1 */
 960:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 961:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 962:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (GET_BITS(1))
 963:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    s = p1;		/* newly nonzero coef is positive */
 964:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  else
 965:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    s = m1;		/* newly nonzero coef is negative */
 966:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} else {
 967:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (r != 15) {
 968:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 969:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (r) {
ARM GAS  /tmp/ccDN7JHH.s 			page 43


 970:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 971:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      r = GET_BITS(r);
 972:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      EOBRUN += r;
 973:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    }
 974:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    break;		/* rest of block is handled by EOB logic */
 975:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  }
 976:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* note s = 0 for processing ZRL */
 977:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
 978:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Advance over already-nonzero coefs and r still-zero coefs,
 979:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 * appending correction bits to the nonzeroes.  A correction bit is 1
 980:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 * if the absolute value of the coefficient must be increased.
 981:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	 */
 982:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	do {
 983:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  thiscoef = *block + natural_order[k];
 984:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (*thiscoef != 0) {
 985:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 986:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (GET_BITS(1)) {
 987:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 988:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		if (*thiscoef >= 0)
 989:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		  *thiscoef += p1;
 990:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		else
 991:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		  *thiscoef += m1;
 992:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      }
 993:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    }
 994:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  } else {
 995:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (--r < 0)
 996:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      break;		/* reached target zero coefficient */
 997:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  }
 998:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  k++;
 999:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} while (k <= Se);
1000:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
1001:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  int pos = natural_order[k];
1002:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Output newly nonzero coefficient */
1003:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  (*block)[pos] = (JCOEF) s;
1004:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Remember its position in case we have to suspend */
1005:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  newnz_pos[num_newnz++] = pos;
1006:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1007:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1008:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1009:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1010:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (EOBRUN > 0) {
 1346              		.loc 1 1010 0
 1347 0070 0B9B     		ldr	r3, [sp, #44]
 1348 0072 002B     		cmp	r3, #0
 1349 0074 40F01081 		bne	.L146
 1350              	.LVL227:
 1351              	.L131:
1011:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Scan any remaining coefficient positions after the end-of-band
1012:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * (the last newly nonzero coefficient, if any).  Append a correction
1013:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * bit to each already-nonzero coefficient.  A correction bit is 1
1014:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * if the absolute value of the coefficient must be increased.
1015:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        */
1016:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (; k <= Se; k++) {
1017:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	thiscoef = *block + natural_order[k];
1018:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (*thiscoef != 0) {
1019:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
1020:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (GET_BITS(1)) {
ARM GAS  /tmp/ccDN7JHH.s 			page 44


1021:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
1022:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      if (*thiscoef >= 0)
1023:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		*thiscoef += p1;
1024:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      else
1025:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		*thiscoef += m1;
1026:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    }
1027:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  }
1028:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1029:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1030:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Count one block completed in EOB run */
1031:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       EOBRUN--;
1032:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1033:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1034:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Completed MCU, so update state */
1035:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 1352              		.loc 1 1035 0
 1353 0078 0699     		ldr	r1, [sp, #24]
 1354 007a 8B69     		ldr	r3, [r1, #24]
 1355 007c 4D9A     		ldr	r2, [sp, #308]
 1356 007e 1A60     		str	r2, [r3]
 1357 0080 8B69     		ldr	r3, [r1, #24]
 1358 0082 4E9A     		ldr	r2, [sp, #312]
 1359 0084 5A60     		str	r2, [r3, #4]
 1360 0086 059B     		ldr	r3, [sp, #20]
 1361 0088 C3F808B0 		str	fp, [r3, #8]
 1362 008c DD60     		str	r5, [r3, #12]
1036:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 1363              		.loc 1 1036 0
 1364 008e 0B9A     		ldr	r2, [sp, #44]
 1365 0090 1A61     		str	r2, [r3, #16]
 1366              	.LVL228:
 1367              	.L107:
1037:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
1038:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1039:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
1040:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->restarts_to_go--;
 1368              		.loc 1 1040 0
 1369 0092 059A     		ldr	r2, [sp, #20]
 1370 0094 936A     		ldr	r3, [r2, #40]
 1371 0096 013B     		subs	r3, r3, #1
 1372 0098 9362     		str	r3, [r2, #40]
1041:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1042:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return TRUE;
 1373              		.loc 1 1042 0
 1374 009a 0123     		movs	r3, #1
 1375 009c 0793     		str	r3, [sp, #28]
 1376              	.L104:
1043:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1044:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** undoit:
1045:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Re-zero any output coefficients that we made newly nonzero */
1046:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   while (num_newnz > 0)
1047:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     (*block)[newnz_pos[--num_newnz]] = 0;
1048:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1049:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return FALSE;
1050:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 1377              		.loc 1 1050 0
 1378 009e 0798     		ldr	r0, [sp, #28]
ARM GAS  /tmp/ccDN7JHH.s 			page 45


 1379 00a0 53B0     		add	sp, sp, #332
 1380              	.LCFI16:
 1381              		.cfi_remember_state
 1382              		.cfi_def_cfa_offset 36
 1383              		@ sp needed
 1384 00a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1385              	.LVL229:
 1386              	.L149:
 1387              	.LCFI17:
 1388              		.cfi_restore_state
 921:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
 1389              		.loc 1 921 0
 1390 00a6 FFF7FEFF 		bl	process_restart
 1391              	.LVL230:
 1392 00aa 0790     		str	r0, [sp, #28]
 1393 00ac 0028     		cmp	r0, #0
 1394 00ae B5D1     		bne	.L105
 1395 00b0 F5E7     		b	.L104
 1396              	.LVL231:
 1397              	.L154:
 1398              	.LBB10:
 955:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 1399              		.loc 1 955 0 discriminator 1
 1400 00b2 0023     		movs	r3, #0
 1401 00b4 2A46     		mov	r2, r5
 1402 00b6 5946     		mov	r1, fp
 1403 00b8 4DA8     		add	r0, sp, #308
 1404 00ba FFF7FEFF 		bl	jpeg_fill_bit_buffer
 1405              	.LVL232:
 1406 00be 0028     		cmp	r0, #0
 1407 00c0 00F0FE80 		beq	.L140
 955:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 1408              		.loc 1 955 0 is_stmt 0 discriminator 3
 1409 00c4 DDF83CB1 		ldr	fp, [sp, #316]
 1410              	.LVL233:
 1411 00c8 509D     		ldr	r5, [sp, #320]
 1412              	.LVL234:
 1413 00ca 072D     		cmp	r5, #7
 1414 00cc 00F3A780 		bgt	.L110
 955:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 1415              		.loc 1 955 0
 1416 00d0 0123     		movs	r3, #1
 1417 00d2 00E0     		b	.L112
 1418              	.LVL235:
 1419              	.L139:
 1420 00d4 0923     		movs	r3, #9
 1421              	.LVL236:
 1422              	.L112:
 955:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 1423              		.loc 1 955 0 discriminator 9
 1424 00d6 0093     		str	r3, [sp]
 1425 00d8 049B     		ldr	r3, [sp, #16]
 1426              	.LVL237:
 1427 00da 2A46     		mov	r2, r5
 1428 00dc 5946     		mov	r1, fp
 1429 00de 4DA8     		add	r0, sp, #308
 1430 00e0 FFF7FEFF 		bl	jpeg_huff_decode
ARM GAS  /tmp/ccDN7JHH.s 			page 46


 1431              	.LVL238:
 1432 00e4 0028     		cmp	r0, #0
 1433 00e6 C0F2ED80 		blt	.L141
 955:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 1434              		.loc 1 955 0 discriminator 10
 1435 00ea DDF83CB1 		ldr	fp, [sp, #316]
 1436              	.LVL239:
 1437 00ee 509D     		ldr	r5, [sp, #320]
 1438              	.LVL240:
 1439              	.L113:
 1440              	.LBE10:
 956:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	s &= 15;
 1441              		.loc 1 956 0 is_stmt 1
 1442 00f0 0711     		asrs	r7, r0, #4
 1443              	.LVL241:
 958:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (s != 1)		/* size of new coef should always be 1 */
 1444              		.loc 1 958 0
 1445 00f2 10F00F03 		ands	r3, r0, #15
 1446              	.LVL242:
 1447 00f6 0393     		str	r3, [sp, #12]
 1448 00f8 25D0     		beq	.L114
 959:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 1449              		.loc 1 959 0
 1450 00fa 012B     		cmp	r3, #1
 1451 00fc 08D0     		beq	.L115
 960:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 1452              		.loc 1 960 0
 1453 00fe 0698     		ldr	r0, [sp, #24]
 1454 0100 0368     		ldr	r3, [r0]
 1455              	.LVL243:
 1456 0102 7922     		movs	r2, #121
 1457 0104 5A61     		str	r2, [r3, #20]
 1458 0106 0368     		ldr	r3, [r0]
 1459 0108 5B68     		ldr	r3, [r3, #4]
 1460 010a 4FF0FF31 		mov	r1, #-1
 1461 010e 9847     		blx	r3
 1462              	.LVL244:
 1463              	.L115:
 961:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (GET_BITS(1))
 1464              		.loc 1 961 0
 1465 0110 002D     		cmp	r5, #0
 1466 0112 0BDD     		ble	.L150
 1467              	.L116:
 962:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    s = p1;		/* newly nonzero coef is positive */
 1468              		.loc 1 962 0
 1469 0114 013D     		subs	r5, r5, #1
 1470              	.LVL245:
 1471 0116 4BFA05F3 		asr	r3, fp, r5
 1472 011a 13F0010F 		tst	r3, #1
 1473 011e 37D1     		bne	.L119
 965:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} else {
 1474              		.loc 1 965 0
 1475 0120 0A9B     		ldr	r3, [sp, #40]
 1476 0122 0393     		str	r3, [sp, #12]
 1477              	.LVL246:
 1478 0124 5946     		mov	r1, fp
 1479 0126 2A46     		mov	r2, r5
ARM GAS  /tmp/ccDN7JHH.s 			page 47


 1480 0128 089D     		ldr	r5, [sp, #32]
 1481              	.LVL247:
 1482 012a 4BE0     		b	.L127
 1483              	.LVL248:
 1484              	.L150:
 961:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (GET_BITS(1))
 1485              		.loc 1 961 0 discriminator 1
 1486 012c 0123     		movs	r3, #1
 1487 012e 2A46     		mov	r2, r5
 1488 0130 5946     		mov	r1, fp
 1489 0132 4DA8     		add	r0, sp, #308
 1490 0134 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 1491              	.LVL249:
 1492 0138 0028     		cmp	r0, #0
 1493 013a 00F0C580 		beq	.L142
 961:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (GET_BITS(1))
 1494              		.loc 1 961 0 is_stmt 0 discriminator 2
 1495 013e DDF83CB1 		ldr	fp, [sp, #316]
 1496              	.LVL250:
 1497 0142 509D     		ldr	r5, [sp, #320]
 1498              	.LVL251:
 1499 0144 E6E7     		b	.L116
 1500              	.LVL252:
 1501              	.L114:
 967:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 1502              		.loc 1 967 0 is_stmt 1
 1503 0146 0F2F     		cmp	r7, #15
 1504 0148 03D1     		bne	.L151
 1505 014a 5946     		mov	r1, fp
 1506 014c 2A46     		mov	r2, r5
 1507 014e 089D     		ldr	r5, [sp, #32]
 1508              	.LVL253:
 1509 0150 38E0     		b	.L127
 1510              	.LVL254:
 1511              	.L151:
 968:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (r) {
 1512              		.loc 1 968 0
 1513 0152 0123     		movs	r3, #1
 1514              	.LVL255:
 1515 0154 BB40     		lsls	r3, r3, r7
 1516 0156 0B93     		str	r3, [sp, #44]
 1517              	.LVL256:
 969:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 1518              		.loc 1 969 0
 1519 0158 002F     		cmp	r7, #0
 1520 015a 89D0     		beq	.L109
 970:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      r = GET_BITS(r);
 1521              		.loc 1 970 0
 1522 015c BD42     		cmp	r5, r7
 1523 015e 0ADB     		blt	.L152
 1524              	.LVL257:
 1525              	.L121:
 971:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      EOBRUN += r;
 1526              		.loc 1 971 0
 1527 0160 ED1B     		subs	r5, r5, r7
 1528              	.LVL258:
 1529 0162 4BFA05F3 		asr	r3, fp, r5
ARM GAS  /tmp/ccDN7JHH.s 			page 48


 1530 0166 5C4A     		ldr	r2, .L157
 1531 0168 52F82720 		ldr	r2, [r2, r7, lsl #2]
 1532 016c 1340     		ands	r3, r3, r2
 1533              	.LVL259:
 972:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    }
 1534              		.loc 1 972 0
 1535 016e 0B9A     		ldr	r2, [sp, #44]
 1536 0170 1A44     		add	r2, r2, r3
 1537 0172 0B92     		str	r2, [sp, #44]
 1538              	.LVL260:
 1539 0174 7CE7     		b	.L109
 1540              	.LVL261:
 1541              	.L152:
 970:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      r = GET_BITS(r);
 1542              		.loc 1 970 0 discriminator 1
 1543 0176 3B46     		mov	r3, r7
 1544              	.LVL262:
 1545 0178 2A46     		mov	r2, r5
 1546 017a 5946     		mov	r1, fp
 1547 017c 4DA8     		add	r0, sp, #308
 1548 017e FFF7FEFF 		bl	jpeg_fill_bit_buffer
 1549              	.LVL263:
 1550 0182 0028     		cmp	r0, #0
 1551 0184 00F0A280 		beq	.L144
 970:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      r = GET_BITS(r);
 1552              		.loc 1 970 0 is_stmt 0 discriminator 2
 1553 0188 DDF83CB1 		ldr	fp, [sp, #316]
 1554              	.LVL264:
 1555 018c 509D     		ldr	r5, [sp, #320]
 1556              	.LVL265:
 1557 018e E7E7     		b	.L121
 1558              	.L119:
 963:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  else
 1559              		.loc 1 963 0 is_stmt 1
 1560 0190 089B     		ldr	r3, [sp, #32]
 1561 0192 0393     		str	r3, [sp, #12]
 1562              	.LVL266:
 1563 0194 5946     		mov	r1, fp
 1564 0196 2A46     		mov	r2, r5
 1565 0198 1D46     		mov	r5, r3
 1566              	.LVL267:
 1567 019a 13E0     		b	.L127
 1568              	.LVL268:
 1569              	.L153:
 985:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (GET_BITS(1)) {
 1570              		.loc 1 985 0 discriminator 1
 1571 019c 0123     		movs	r3, #1
 1572 019e 4DA8     		add	r0, sp, #308
 1573 01a0 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 1574              	.LVL269:
 1575 01a4 0028     		cmp	r0, #0
 1576 01a6 00F09380 		beq	.L145
 985:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (GET_BITS(1)) {
 1577              		.loc 1 985 0 is_stmt 0 discriminator 2
 1578 01aa 4F99     		ldr	r1, [sp, #316]
 1579              	.LVL270:
 1580 01ac 509A     		ldr	r2, [sp, #320]
ARM GAS  /tmp/ccDN7JHH.s 			page 49


 1581              	.LVL271:
 1582 01ae 11E0     		b	.L123
 1583              	.L125:
 991:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      }
 1584              		.loc 1 991 0 is_stmt 1
 1585 01b0 0A98     		ldr	r0, [sp, #40]
 1586 01b2 0344     		add	r3, r3, r0
 1587 01b4 28F81630 		strh	r3, [r8, r6, lsl #1]	@ movhi
 1588 01b8 01E0     		b	.L124
 1589              	.L122:
 1590              	.LVL272:
 995:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      break;		/* reached target zero coefficient */
 1591              		.loc 1 995 0
 1592 01ba 013F     		subs	r7, r7, #1
 1593              	.LVL273:
 1594 01bc 1AD4     		bmi	.L126
 1595              	.L124:
 998:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} while (k <= Se);
 1596              		.loc 1 998 0
 1597 01be 0134     		adds	r4, r4, #1
 1598              	.LVL274:
 999:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
 1599              		.loc 1 999 0
 1600 01c0 A145     		cmp	r9, r4
 1601 01c2 17DB     		blt	.L126
 1602              	.LVL275:
 1603              	.L127:
 983:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (*thiscoef != 0) {
 1604              		.loc 1 983 0
 1605 01c4 5AF82460 		ldr	r6, [r10, r4, lsl #2]
 1606              	.LVL276:
 984:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 1607              		.loc 1 984 0
 1608 01c8 38F91630 		ldrsh	r3, [r8, r6, lsl #1]
 1609 01cc 002B     		cmp	r3, #0
 1610 01ce F4D0     		beq	.L122
 985:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (GET_BITS(1)) {
 1611              		.loc 1 985 0
 1612 01d0 002A     		cmp	r2, #0
 1613 01d2 E3DD     		ble	.L153
 1614              	.L123:
 986:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 1615              		.loc 1 986 0
 1616 01d4 013A     		subs	r2, r2, #1
 1617              	.LVL277:
 1618 01d6 41FA02F3 		asr	r3, r1, r2
 1619 01da 13F0010F 		tst	r3, #1
 1620 01de EED0     		beq	.L124
 987:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		if (*thiscoef >= 0)
 1621              		.loc 1 987 0
 1622 01e0 38F91630 		ldrsh	r3, [r8, r6, lsl #1]
 1623 01e4 2B42     		tst	r3, r5
 1624 01e6 EAD1     		bne	.L124
 988:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		  *thiscoef += p1;
 1625              		.loc 1 988 0
 1626 01e8 002B     		cmp	r3, #0
 1627 01ea E1DB     		blt	.L125
ARM GAS  /tmp/ccDN7JHH.s 			page 50


 989:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		else
 1628              		.loc 1 989 0
 1629 01ec 2B44     		add	r3, r3, r5
 1630 01ee 28F81630 		strh	r3, [r8, r6, lsl #1]	@ movhi
 1631 01f2 E4E7     		b	.L124
 1632              	.L126:
 1633 01f4 8B46     		mov	fp, r1
 1634 01f6 1546     		mov	r5, r2
 1635              	.LVL278:
1000:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  int pos = natural_order[k];
 1636              		.loc 1 1000 0
 1637 01f8 039A     		ldr	r2, [sp, #12]
 1638 01fa 4AB1     		cbz	r2, .L128
 1639              	.LVL279:
 1640              	.LBB11:
1001:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Output newly nonzero coefficient */
 1641              		.loc 1 1001 0
 1642 01fc 5AF82430 		ldr	r3, [r10, r4, lsl #2]
 1643              	.LVL280:
1003:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  /* Remember its position in case we have to suspend */
 1644              		.loc 1 1003 0
 1645 0200 28F81320 		strh	r2, [r8, r3, lsl #1]	@ movhi
 1646              	.LVL281:
1005:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
 1647              		.loc 1 1005 0
 1648 0204 0DAA     		add	r2, sp, #52
 1649 0206 0999     		ldr	r1, [sp, #36]
 1650              	.LVL282:
 1651 0208 42F82130 		str	r3, [r2, r1, lsl #2]
 1652 020c 4B1C     		adds	r3, r1, #1
 1653              	.LVL283:
 1654 020e 0993     		str	r3, [sp, #36]
 1655              	.LVL284:
 1656              	.L128:
 1657              	.LBE11:
 954:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 1658              		.loc 1 954 0
 1659 0210 0134     		adds	r4, r4, #1
 1660              	.LVL285:
 1661              	.L108:
 954:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 1662              		.loc 1 954 0 is_stmt 0 discriminator 1
 1663 0212 4C45     		cmp	r4, r9
 1664 0214 3FF72CAF 		bgt	.L109
 1665              	.LBB12:
 955:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 1666              		.loc 1 955 0 is_stmt 1
 1667 0218 072D     		cmp	r5, #7
 1668 021a 7FF74AAF 		ble	.L154
 1669              	.L110:
 955:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 1670              		.loc 1 955 0 is_stmt 0 discriminator 5
 1671 021e A5F10803 		sub	r3, r5, #8
 1672 0222 4BFA03F3 		asr	r3, fp, r3
 1673 0226 DBB2     		uxtb	r3, r3
 1674              	.LVL286:
 1675 0228 03F12402 		add	r2, r3, #36
ARM GAS  /tmp/ccDN7JHH.s 			page 51


 1676 022c 0499     		ldr	r1, [sp, #16]
 1677 022e 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1678              	.LVL287:
 1679 0232 002A     		cmp	r2, #0
 1680 0234 3FF44EAF 		beq	.L139
 955:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 1681              		.loc 1 955 0 discriminator 7
 1682 0238 AD1A     		subs	r5, r5, r2
 1683              	.LVL288:
 1684 023a 0B44     		add	r3, r3, r1
 1685              	.LVL289:
 1686 023c 93F89004 		ldrb	r0, [r3, #1168]	@ zero_extendqisi2
 1687              	.LVL290:
 1688 0240 56E7     		b	.L113
 1689              	.LVL291:
 1690              	.L137:
 1691              	.LBE12:
 948:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 1692              		.loc 1 948 0 is_stmt 1
 1693 0242 0023     		movs	r3, #0
 1694              	.LVL292:
 1695 0244 0993     		str	r3, [sp, #36]
 1696 0246 E4E7     		b	.L108
 1697              	.LVL293:
 1698              	.L156:
1019:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (GET_BITS(1)) {
 1699              		.loc 1 1019 0 discriminator 1
 1700 0248 0123     		movs	r3, #1
 1701 024a 4DA8     		add	r0, sp, #308
 1702 024c FFF7FEFF 		bl	jpeg_fill_bit_buffer
 1703              	.LVL294:
 1704 0250 0028     		cmp	r0, #0
 1705 0252 3FD0     		beq	.L147
1019:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (GET_BITS(1)) {
 1706              		.loc 1 1019 0 is_stmt 0 discriminator 2
 1707 0254 4F99     		ldr	r1, [sp, #316]
 1708              	.LVL295:
 1709 0256 509A     		ldr	r2, [sp, #320]
 1710              	.LVL296:
 1711 0258 0EE0     		b	.L133
 1712              	.L134:
1025:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    }
 1713              		.loc 1 1025 0 is_stmt 1
 1714 025a 0A98     		ldr	r0, [sp, #40]
 1715 025c 0344     		add	r3, r3, r0
 1716 025e 28F81630 		strh	r3, [r8, r6, lsl #1]	@ movhi
 1717              	.L132:
1016:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	thiscoef = *block + natural_order[k];
 1718              		.loc 1 1016 0
 1719 0262 0134     		adds	r4, r4, #1
 1720              	.LVL297:
 1721              	.L130:
1016:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	thiscoef = *block + natural_order[k];
 1722              		.loc 1 1016 0 is_stmt 0 discriminator 1
 1723 0264 4C45     		cmp	r4, r9
 1724 0266 1BDC     		bgt	.L155
1017:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (*thiscoef != 0) {
ARM GAS  /tmp/ccDN7JHH.s 			page 52


 1725              		.loc 1 1017 0 is_stmt 1
 1726 0268 5AF82460 		ldr	r6, [r10, r4, lsl #2]
 1727              	.LVL298:
1018:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 1728              		.loc 1 1018 0
 1729 026c 38F91630 		ldrsh	r3, [r8, r6, lsl #1]
 1730 0270 002B     		cmp	r3, #0
 1731 0272 F6D0     		beq	.L132
1019:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (GET_BITS(1)) {
 1732              		.loc 1 1019 0
 1733 0274 002A     		cmp	r2, #0
 1734 0276 E7DD     		ble	.L156
 1735              	.L133:
1020:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 1736              		.loc 1 1020 0
 1737 0278 013A     		subs	r2, r2, #1
 1738              	.LVL299:
 1739 027a 41FA02F3 		asr	r3, r1, r2
 1740 027e 13F0010F 		tst	r3, #1
 1741 0282 EED0     		beq	.L132
1021:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      if (*thiscoef >= 0)
 1742              		.loc 1 1021 0
 1743 0284 38F91630 		ldrsh	r3, [r8, r6, lsl #1]
 1744 0288 2B42     		tst	r3, r5
 1745 028a EAD1     		bne	.L132
1022:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 		*thiscoef += p1;
 1746              		.loc 1 1022 0
 1747 028c 002B     		cmp	r3, #0
 1748 028e E4DB     		blt	.L134
1023:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      else
 1749              		.loc 1 1023 0
 1750 0290 2B44     		add	r3, r3, r5
 1751 0292 28F81630 		strh	r3, [r8, r6, lsl #1]	@ movhi
 1752 0296 E4E7     		b	.L132
 1753              	.LVL300:
 1754              	.L146:
 1755 0298 5946     		mov	r1, fp
 1756 029a 2A46     		mov	r2, r5
 1757 029c 089D     		ldr	r5, [sp, #32]
 1758              	.LVL301:
 1759 029e E1E7     		b	.L130
 1760              	.LVL302:
 1761              	.L155:
 1762 02a0 8B46     		mov	fp, r1
 1763 02a2 1546     		mov	r5, r2
1031:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 1764              		.loc 1 1031 0
 1765 02a4 0B9B     		ldr	r3, [sp, #44]
 1766 02a6 013B     		subs	r3, r3, #1
 1767 02a8 0B93     		str	r3, [sp, #44]
 1768              	.LVL303:
 1769 02aa E5E6     		b	.L131
 1770              	.LVL304:
 1771              	.L136:
1047:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 1772              		.loc 1 1047 0
 1773 02ac 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccDN7JHH.s 			page 53


 1774              	.LVL305:
 1775 02ae 0DAA     		add	r2, sp, #52
 1776 02b0 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1777 02b4 0021     		movs	r1, #0
 1778 02b6 28F81210 		strh	r1, [r8, r2, lsl #1]	@ movhi
 1779              	.LVL306:
 1780              	.L118:
1046:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     (*block)[newnz_pos[--num_newnz]] = 0;
 1781              		.loc 1 1046 0
 1782 02ba 002B     		cmp	r3, #0
 1783 02bc F6DC     		bgt	.L136
 1784 02be EEE6     		b	.L104
 1785              	.LVL307:
 1786              	.L140:
 1787 02c0 099B     		ldr	r3, [sp, #36]
 1788 02c2 FAE7     		b	.L118
 1789              	.LVL308:
 1790              	.L141:
 1791 02c4 099B     		ldr	r3, [sp, #36]
 1792 02c6 F8E7     		b	.L118
 1793              	.LVL309:
 1794              	.L142:
 1795 02c8 099B     		ldr	r3, [sp, #36]
 1796 02ca F6E7     		b	.L118
 1797              	.L144:
 1798 02cc 099B     		ldr	r3, [sp, #36]
 1799 02ce F4E7     		b	.L118
 1800              	.LVL310:
 1801              	.L145:
 1802 02d0 099B     		ldr	r3, [sp, #36]
 1803 02d2 F2E7     		b	.L118
 1804              	.LVL311:
 1805              	.L147:
 1806 02d4 099B     		ldr	r3, [sp, #36]
 1807 02d6 F0E7     		b	.L118
 1808              	.L158:
 1809              		.align	2
 1810              	.L157:
 1811 02d8 00000000 		.word	.LANCHOR0
 1812              		.cfi_endproc
 1813              	.LFE10:
 1815              		.section	.text.decode_mcu_sub,"ax",%progbits
 1816              		.align	1
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
 1820              		.fpu fpv5-sp-d16
 1822              	decode_mcu_sub:
 1823              	.LFB11:
1051:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1052:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1053:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
1054:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Decode one MCU's worth of Huffman-compressed coefficients,
1055:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * partial blocks.
1056:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
1057:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1058:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** METHODDEF(boolean)
ARM GAS  /tmp/ccDN7JHH.s 			page 54


1059:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
1060:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {
 1824              		.loc 1 1060 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 56
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828              	.LVL312:
 1829 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1830              	.LCFI18:
 1831              		.cfi_def_cfa_offset 36
 1832              		.cfi_offset 4, -36
 1833              		.cfi_offset 5, -32
 1834              		.cfi_offset 6, -28
 1835              		.cfi_offset 7, -24
 1836              		.cfi_offset 8, -20
 1837              		.cfi_offset 9, -16
 1838              		.cfi_offset 10, -12
 1839              		.cfi_offset 11, -8
 1840              		.cfi_offset 14, -4
 1841 0004 91B0     		sub	sp, sp, #68
 1842              	.LCFI19:
 1843              		.cfi_def_cfa_offset 104
 1844 0006 8246     		mov	r10, r0
 1845 0008 0491     		str	r1, [sp, #16]
1061:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1846              		.loc 1 1061 0
 1847 000a D0F8D091 		ldr	r9, [r0, #464]
 1848              	.LVL313:
1062:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   const int * natural_order;
1063:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int Se, blkn;
1064:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   BITREAD_STATE_VARS;
1065:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   savable_state state;
1066:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1067:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
1068:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->restart_interval) {
 1849              		.loc 1 1068 0
 1850 000e D0F81831 		ldr	r3, [r0, #280]
 1851 0012 1BB1     		cbz	r3, .L160
1069:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 1852              		.loc 1 1069 0
 1853 0014 D9F82830 		ldr	r3, [r9, #40]
 1854 0018 002B     		cmp	r3, #0
 1855 001a 44D0     		beq	.L209
 1856              	.LVL314:
 1857              	.L160:
1070:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (! process_restart(cinfo))
1071:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
1072:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
1073:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1074:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
1075:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
1076:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
1077:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (! entropy->insufficient_data) {
 1858              		.loc 1 1077 0
 1859 001c D9F82430 		ldr	r3, [r9, #36]
 1860 0020 0293     		str	r3, [sp, #8]
 1861 0022 002B     		cmp	r3, #0
ARM GAS  /tmp/ccDN7JHH.s 			page 55


 1862 0024 40F05981 		bne	.L162
1078:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1079:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     natural_order = cinfo->natural_order;
 1863              		.loc 1 1079 0
 1864 0028 DAF8AC61 		ldr	r6, [r10, #428]
 1865              	.LVL315:
1080:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     Se = cinfo->lim_Se;
 1866              		.loc 1 1080 0
 1867 002c DAF8B071 		ldr	r7, [r10, #432]
 1868              	.LVL316:
1081:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1082:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Load up working state */
1083:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 1869              		.loc 1 1083 0
 1870 0030 CDF83CA0 		str	r10, [sp, #60]
 1871 0034 DAF81830 		ldr	r3, [r10, #24]
 1872 0038 1A68     		ldr	r2, [r3]
 1873 003a 0B92     		str	r2, [sp, #44]
 1874 003c 5B68     		ldr	r3, [r3, #4]
 1875 003e 0C93     		str	r3, [sp, #48]
 1876 0040 D9F808E0 		ldr	lr, [r9, #8]
 1877              	.LVL317:
 1878 0044 D9F80CC0 		ldr	ip, [r9, #12]
 1879              	.LVL318:
1084:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 1880              		.loc 1 1084 0
 1881 0048 06AC     		add	r4, sp, #24
 1882 004a 09F11005 		add	r5, r9, #16
 1883 004e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1884 0050 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1885 0052 2B68     		ldr	r3, [r5]
 1886 0054 2360     		str	r3, [r4]
 1887              	.LVL319:
1085:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1086:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Outer loop handles each block in the MCU */
1087:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1088:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 1888              		.loc 1 1088 0
 1889 0056 4FF0000B 		mov	fp, #0
 1890 005a 7146     		mov	r1, lr
 1891 005c 6246     		mov	r2, ip
 1892 005e CDF80C90 		str	r9, [sp, #12]
 1893 0062 CDF814A0 		str	r10, [sp, #20]
 1894 0066 B246     		mov	r10, r6
 1895              	.LVL320:
 1896              	.L163:
 1897              		.loc 1 1088 0 is_stmt 0 discriminator 1
 1898 0068 059B     		ldr	r3, [sp, #20]
 1899 006a D3F86C31 		ldr	r3, [r3, #364]
 1900 006e 5B45     		cmp	r3, fp
 1901 0070 40F31A81 		ble	.L210
 1902              	.LBB13:
1089:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 1903              		.loc 1 1089 0 is_stmt 1
 1904 0074 049B     		ldr	r3, [sp, #16]
 1905 0076 53F82B90 		ldr	r9, [r3, fp, lsl #2]
 1906              	.LVL321:
ARM GAS  /tmp/ccDN7JHH.s 			page 56


1090:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       d_derived_tbl * htbl;
1091:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       register int s, k, r;
1092:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int coef_limit, ci;
1093:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1094:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Decode a single block's worth of coefficients */
1095:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1096:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Section F.2.2.1: decode the DC coefficient difference */
1097:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       htbl = entropy->dc_cur_tbls[blkn];
 1907              		.loc 1 1097 0
 1908 007a 0BF11803 		add	r3, fp, #24
 1909 007e 0398     		ldr	r0, [sp, #12]
 1910 0080 50F82340 		ldr	r4, [r0, r3, lsl #2]
 1911              	.LVL322:
 1912              	.LBB14:
1098:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 1913              		.loc 1 1098 0
 1914 0084 072A     		cmp	r2, #7
 1915 0086 14DD     		ble	.L211
 1916              	.L164:
 1917              		.loc 1 1098 0 is_stmt 0 discriminator 6
 1918 0088 A2F10803 		sub	r3, r2, #8
 1919 008c 41FA03F3 		asr	r3, r1, r3
 1920 0090 DBB2     		uxtb	r3, r3
 1921              	.LVL323:
 1922 0092 03F12400 		add	r0, r3, #36
 1923 0096 54F82000 		ldr	r0, [r4, r0, lsl #2]
 1924              	.LVL324:
 1925 009a B8B1     		cbz	r0, .L193
 1926              		.loc 1 1098 0 discriminator 8
 1927 009c 121A     		subs	r2, r2, r0
 1928              	.LVL325:
 1929 009e 1C44     		add	r4, r4, r3
 1930              	.LVL326:
 1931 00a0 94F89044 		ldrb	r4, [r4, #1168]	@ zero_extendqisi2
 1932              	.LVL327:
 1933 00a4 1DE0     		b	.L166
 1934              	.LVL328:
 1935              	.L209:
 1936              	.LBE14:
 1937              	.LBE13:
1070:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
 1938              		.loc 1 1070 0 is_stmt 1
 1939 00a6 FFF7FEFF 		bl	process_restart
 1940              	.LVL329:
 1941 00aa 0290     		str	r0, [sp, #8]
 1942 00ac 0028     		cmp	r0, #0
 1943 00ae B5D1     		bne	.L160
 1944 00b0 1AE1     		b	.L159
 1945              	.LVL330:
 1946              	.L211:
 1947              	.LBB23:
 1948              	.LBB15:
 1949              		.loc 1 1098 0 discriminator 1
 1950 00b2 0023     		movs	r3, #0
 1951 00b4 0BA8     		add	r0, sp, #44
 1952 00b6 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 1953              	.LVL331:
ARM GAS  /tmp/ccDN7JHH.s 			page 57


 1954 00ba 0028     		cmp	r0, #0
 1955 00bc 00F01881 		beq	.L191
 1956              		.loc 1 1098 0 is_stmt 0 discriminator 4
 1957 00c0 0D99     		ldr	r1, [sp, #52]
 1958              	.LVL332:
 1959 00c2 0E9A     		ldr	r2, [sp, #56]
 1960              	.LVL333:
 1961 00c4 072A     		cmp	r2, #7
 1962 00c6 DFDC     		bgt	.L164
 1963              		.loc 1 1098 0
 1964 00c8 0123     		movs	r3, #1
 1965 00ca 00E0     		b	.L165
 1966              	.LVL334:
 1967              	.L193:
 1968 00cc 0923     		movs	r3, #9
 1969              	.LVL335:
 1970              	.L165:
 1971              		.loc 1 1098 0 discriminator 10
 1972 00ce 0093     		str	r3, [sp]
 1973 00d0 2346     		mov	r3, r4
 1974              	.LVL336:
 1975 00d2 0BA8     		add	r0, sp, #44
 1976 00d4 FFF7FEFF 		bl	jpeg_huff_decode
 1977              	.LVL337:
 1978 00d8 041E     		subs	r4, r0, #0
 1979              	.LVL338:
 1980 00da C0F20581 		blt	.L159
 1981              		.loc 1 1098 0 discriminator 12
 1982 00de 0D99     		ldr	r1, [sp, #52]
 1983              	.LVL339:
 1984 00e0 0E9A     		ldr	r2, [sp, #56]
 1985              	.LVL340:
 1986              	.L166:
 1987              	.LBE15:
1099:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1100:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       htbl = entropy->ac_cur_tbls[blkn];
 1988              		.loc 1 1100 0 is_stmt 1
 1989 00e2 0BF12203 		add	r3, fp, #34
 1990 00e6 0398     		ldr	r0, [sp, #12]
 1991 00e8 50F82360 		ldr	r6, [r0, r3, lsl #2]
 1992              	.LVL341:
1101:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       k = 1;
1102:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 1993              		.loc 1 1102 0
 1994 00ec 0BF12C03 		add	r3, fp, #44
 1995 00f0 50F82380 		ldr	r8, [r0, r3, lsl #2]
 1996              	.LVL342:
1103:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (coef_limit) {
 1997              		.loc 1 1103 0
 1998 00f4 B8F1000F 		cmp	r8, #0
 1999 00f8 00F08280 		beq	.L167
1104:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Convert DC difference to actual value, update last_dc_val */
1105:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
 2000              		.loc 1 1105 0
 2001 00fc 74B1     		cbz	r4, .L168
1106:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2002              		.loc 1 1106 0
ARM GAS  /tmp/ccDN7JHH.s 			page 58


 2003 00fe A242     		cmp	r2, r4
 2004 0100 1DDB     		blt	.L212
 2005              	.L169:
1107:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 2006              		.loc 1 1107 0
 2007 0102 121B     		subs	r2, r2, r4
 2008              	.LVL343:
 2009 0104 41FA02F3 		asr	r3, r1, r2
 2010 0108 8048     		ldr	r0, .L218
 2011 010a 50F82450 		ldr	r5, [r0, r4, lsl #2]
 2012 010e 2B40     		ands	r3, r3, r5
 2013              	.LVL344:
1108:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 2014              		.loc 1 1108 0
 2015 0110 013C     		subs	r4, r4, #1
 2016              	.LVL345:
 2017 0112 50F82400 		ldr	r0, [r0, r4, lsl #2]
 2018 0116 9842     		cmp	r0, r3
 2019 0118 1BDB     		blt	.L195
 2020              		.loc 1 1108 0 is_stmt 0 discriminator 1
 2021 011a 5C1B     		subs	r4, r3, r5
 2022              	.LVL346:
 2023              	.L168:
1109:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1110:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	ci = cinfo->MCU_membership[blkn];
 2024              		.loc 1 1110 0 is_stmt 1
 2025 011c 0BF15C03 		add	r3, fp, #92
 2026 0120 0598     		ldr	r0, [sp, #20]
 2027 0122 50F82300 		ldr	r0, [r0, r3, lsl #2]
 2028              	.LVL347:
1111:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	s += state.last_dc_val[ci];
 2029              		.loc 1 1111 0
 2030 0126 10AB     		add	r3, sp, #64
 2031 0128 03EB8000 		add	r0, r3, r0, lsl #2
 2032              	.LVL348:
 2033 012c 50F8243C 		ldr	r3, [r0, #-36]
 2034 0130 1C44     		add	r4, r4, r3
 2035              	.LVL349:
1112:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	state.last_dc_val[ci] = s;
 2036              		.loc 1 1112 0
 2037 0132 40F8244C 		str	r4, [r0, #-36]
1113:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Output the DC coefficient */
1114:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	(*block)[0] = (JCOEF) s;
 2038              		.loc 1 1114 0
 2039 0136 A9F80040 		strh	r4, [r9]	@ movhi
 2040              	.LVL350:
1101:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2041              		.loc 1 1101 0
 2042 013a 0124     		movs	r4, #1
 2043              	.LVL351:
1115:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1116:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Section F.2.2.2: decode the AC coefficients */
1117:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Since zeroes are skipped, output area must be cleared beforehand */
1118:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	for (; k < coef_limit; k++) {
 2044              		.loc 1 1118 0
 2045 013c 3EE0     		b	.L170
 2046              	.LVL352:
ARM GAS  /tmp/ccDN7JHH.s 			page 59


 2047              	.L212:
1106:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 2048              		.loc 1 1106 0 discriminator 1
 2049 013e 2346     		mov	r3, r4
 2050 0140 0BA8     		add	r0, sp, #44
 2051 0142 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2052              	.LVL353:
 2053 0146 0028     		cmp	r0, #0
 2054 0148 00F0D480 		beq	.L194
1106:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 2055              		.loc 1 1106 0 is_stmt 0 discriminator 3
 2056 014c 0D99     		ldr	r1, [sp, #52]
 2057              	.LVL354:
 2058 014e 0E9A     		ldr	r2, [sp, #56]
 2059              	.LVL355:
 2060 0150 D7E7     		b	.L169
 2061              	.LVL356:
 2062              	.L195:
1108:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
 2063              		.loc 1 1108 0 is_stmt 1
 2064 0152 1C46     		mov	r4, r3
 2065              	.LVL357:
 2066 0154 E2E7     		b	.L168
 2067              	.LVL358:
 2068              	.L214:
 2069              	.LBB16:
1119:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2070              		.loc 1 1119 0 discriminator 1
 2071 0156 0023     		movs	r3, #0
 2072 0158 0BA8     		add	r0, sp, #44
 2073 015a FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2074              	.LVL359:
 2075 015e 0028     		cmp	r0, #0
 2076 0160 00F0CA80 		beq	.L196
 2077              		.loc 1 1119 0 is_stmt 0 discriminator 4
 2078 0164 0D99     		ldr	r1, [sp, #52]
 2079              	.LVL360:
 2080 0166 0E9A     		ldr	r2, [sp, #56]
 2081              	.LVL361:
 2082 0168 072A     		cmp	r2, #7
 2083 016a 2BDC     		bgt	.L171
 2084              		.loc 1 1119 0
 2085 016c 0123     		movs	r3, #1
 2086 016e 00E0     		b	.L172
 2087              	.LVL362:
 2088              	.L198:
 2089 0170 0923     		movs	r3, #9
 2090              	.LVL363:
 2091              	.L172:
 2092              		.loc 1 1119 0 discriminator 10
 2093 0172 0093     		str	r3, [sp]
 2094 0174 3346     		mov	r3, r6
 2095              	.LVL364:
 2096 0176 0BA8     		add	r0, sp, #44
 2097 0178 FFF7FEFF 		bl	jpeg_huff_decode
 2098              	.LVL365:
 2099 017c 051E     		subs	r5, r0, #0
ARM GAS  /tmp/ccDN7JHH.s 			page 60


 2100 017e C0F2B380 		blt	.L159
 2101              		.loc 1 1119 0 discriminator 12
 2102 0182 0D99     		ldr	r1, [sp, #52]
 2103              	.LVL366:
 2104 0184 0E9A     		ldr	r2, [sp, #56]
 2105              	.LVL367:
 2106              	.L173:
 2107              	.LBE16:
1120:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1121:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = s >> 4;
 2108              		.loc 1 1121 0 is_stmt 1
 2109 0186 2B11     		asrs	r3, r5, #4
 2110              	.LVL368:
1122:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  s &= 15;
1123:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1124:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (s) {
 2111              		.loc 1 1124 0
 2112 0188 15F00F05 		ands	r5, r5, #15
 2113              	.LVL369:
 2114 018c 34D0     		beq	.L174
1125:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    k += r;
 2115              		.loc 1 1125 0
 2116 018e 1C44     		add	r4, r4, r3
 2117              	.LVL370:
1126:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2118              		.loc 1 1126 0
 2119 0190 AA42     		cmp	r2, r5
 2120 0192 27DB     		blt	.L213
 2121              	.LVL371:
 2122              	.L175:
1127:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    r = GET_BITS(s);
 2123              		.loc 1 1127 0
 2124 0194 521B     		subs	r2, r2, r5
 2125              	.LVL372:
 2126 0196 41FA02F3 		asr	r3, r1, r2
 2127 019a 5C48     		ldr	r0, .L218
 2128 019c 50F825C0 		ldr	ip, [r0, r5, lsl #2]
 2129 01a0 03EA0C03 		and	r3, r3, ip
 2130              	.LVL373:
1128:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 2131              		.loc 1 1128 0
 2132 01a4 013D     		subs	r5, r5, #1
 2133              	.LVL374:
 2134 01a6 50F82500 		ldr	r0, [r0, r5, lsl #2]
 2135 01aa 9842     		cmp	r0, r3
 2136 01ac 01DB     		blt	.L176
 2137              		.loc 1 1128 0 is_stmt 0 discriminator 1
 2138 01ae A3EB0C03 		sub	r3, r3, ip
 2139              	.LVL375:
 2140              	.L176:
1129:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
1130:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	     * Note: the extra entries in natural_order[] will save us
1131:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	     * if k > Se, which could happen if the data is corrupted.
1132:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	     */
1133:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    (*block)[natural_order[k]] = (JCOEF) s;
 2141              		.loc 1 1133 0 is_stmt 1 discriminator 4
 2142 01b2 5AF82400 		ldr	r0, [r10, r4, lsl #2]
ARM GAS  /tmp/ccDN7JHH.s 			page 61


 2143 01b6 29F81030 		strh	r3, [r9, r0, lsl #1]	@ movhi
 2144              	.LVL376:
 2145              	.L177:
1118:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2146              		.loc 1 1118 0
 2147 01ba 0134     		adds	r4, r4, #1
 2148              	.LVL377:
 2149              	.L170:
1118:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2150              		.loc 1 1118 0 is_stmt 0 discriminator 1
 2151 01bc 4445     		cmp	r4, r8
 2152 01be 4FDA     		bge	.L182
 2153              	.LBB17:
1119:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2154              		.loc 1 1119 0 is_stmt 1
 2155 01c0 072A     		cmp	r2, #7
 2156 01c2 C8DD     		ble	.L214
 2157              	.L171:
1119:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2158              		.loc 1 1119 0 is_stmt 0 discriminator 6
 2159 01c4 A2F10803 		sub	r3, r2, #8
 2160 01c8 41FA03F3 		asr	r3, r1, r3
 2161 01cc DBB2     		uxtb	r3, r3
 2162              	.LVL378:
 2163 01ce 03F12400 		add	r0, r3, #36
 2164 01d2 56F82000 		ldr	r0, [r6, r0, lsl #2]
 2165              	.LVL379:
 2166 01d6 0028     		cmp	r0, #0
 2167 01d8 CAD0     		beq	.L198
1119:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2168              		.loc 1 1119 0 discriminator 8
 2169 01da 121A     		subs	r2, r2, r0
 2170              	.LVL380:
 2171 01dc 3344     		add	r3, r3, r6
 2172              	.LVL381:
 2173 01de 93F89054 		ldrb	r5, [r3, #1168]	@ zero_extendqisi2
 2174              	.LVL382:
 2175 01e2 D0E7     		b	.L173
 2176              	.LVL383:
 2177              	.L213:
 2178              	.LBE17:
1126:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    r = GET_BITS(s);
 2179              		.loc 1 1126 0 is_stmt 1 discriminator 1
 2180 01e4 2B46     		mov	r3, r5
 2181              	.LVL384:
 2182 01e6 0BA8     		add	r0, sp, #44
 2183 01e8 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2184              	.LVL385:
 2185 01ec 0028     		cmp	r0, #0
 2186 01ee 00F08580 		beq	.L199
1126:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    r = GET_BITS(s);
 2187              		.loc 1 1126 0 is_stmt 0 discriminator 3
 2188 01f2 0D99     		ldr	r1, [sp, #52]
 2189              	.LVL386:
 2190 01f4 0E9A     		ldr	r2, [sp, #56]
 2191              	.LVL387:
 2192 01f6 CDE7     		b	.L175
ARM GAS  /tmp/ccDN7JHH.s 			page 62


 2193              	.LVL388:
 2194              	.L174:
1134:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  } else {
1135:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (r != 15)
 2195              		.loc 1 1135 0 is_stmt 1
 2196 01f8 0F2B     		cmp	r3, #15
 2197 01fa 52D1     		bne	.L178
1136:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      goto EndOfBlock;
1137:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    k += 15;
 2198              		.loc 1 1137 0
 2199 01fc 0F34     		adds	r4, r4, #15
 2200              	.LVL389:
 2201 01fe DCE7     		b	.L177
 2202              	.LVL390:
 2203              	.L167:
1138:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  }
1139:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1140:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       } else {
1141:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
 2204              		.loc 1 1141 0
 2205 0200 6CB1     		cbz	r4, .L200
1142:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2206              		.loc 1 1142 0
 2207 0202 A242     		cmp	r2, r4
 2208 0204 02DB     		blt	.L215
 2209              	.L181:
1143:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2210              		.loc 1 1143 0
 2211 0206 121B     		subs	r2, r2, r4
 2212              	.LVL391:
1101:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2213              		.loc 1 1101 0
 2214 0208 0124     		movs	r4, #1
 2215              	.LVL392:
 2216 020a 29E0     		b	.L182
 2217              	.LVL393:
 2218              	.L215:
1142:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2219              		.loc 1 1142 0 discriminator 1
 2220 020c 2346     		mov	r3, r4
 2221 020e 0BA8     		add	r0, sp, #44
 2222 0210 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2223              	.LVL394:
 2224 0214 0028     		cmp	r0, #0
 2225 0216 73D0     		beq	.L201
1142:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2226              		.loc 1 1142 0 is_stmt 0 discriminator 3
 2227 0218 0D99     		ldr	r1, [sp, #52]
 2228              	.LVL395:
 2229 021a 0E9A     		ldr	r2, [sp, #56]
 2230              	.LVL396:
 2231 021c F3E7     		b	.L181
 2232              	.L200:
1101:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2233              		.loc 1 1101 0 is_stmt 1
 2234 021e 0124     		movs	r4, #1
 2235              	.LVL397:
ARM GAS  /tmp/ccDN7JHH.s 			page 63


 2236 0220 1EE0     		b	.L182
 2237              	.LVL398:
 2238              	.L217:
 2239              	.LBB18:
1144:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1145:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1146:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1147:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Section F.2.2.2: decode the AC coefficients */
1148:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* In this path we just discard the values */
1149:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (; k <= Se; k++) {
1150:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 2240              		.loc 1 1150 0 discriminator 1
 2241 0222 0023     		movs	r3, #0
 2242 0224 0BA8     		add	r0, sp, #44
 2243 0226 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2244              	.LVL399:
 2245 022a 0028     		cmp	r0, #0
 2246 022c 6AD0     		beq	.L202
 2247              		.loc 1 1150 0 is_stmt 0 discriminator 4
 2248 022e 0D99     		ldr	r1, [sp, #52]
 2249              	.LVL400:
 2250 0230 0E9A     		ldr	r2, [sp, #56]
 2251              	.LVL401:
 2252 0232 072A     		cmp	r2, #7
 2253 0234 18DC     		bgt	.L183
 2254              		.loc 1 1150 0
 2255 0236 0123     		movs	r3, #1
 2256 0238 00E0     		b	.L184
 2257              	.LVL402:
 2258              	.L204:
 2259 023a 0923     		movs	r3, #9
 2260              	.LVL403:
 2261              	.L184:
 2262              		.loc 1 1150 0 discriminator 10
 2263 023c 0093     		str	r3, [sp]
 2264 023e 3346     		mov	r3, r6
 2265              	.LVL404:
 2266 0240 0BA8     		add	r0, sp, #44
 2267 0242 FFF7FEFF 		bl	jpeg_huff_decode
 2268              	.LVL405:
 2269 0246 051E     		subs	r5, r0, #0
 2270 0248 4EDB     		blt	.L159
 2271              		.loc 1 1150 0 discriminator 12
 2272 024a 0D99     		ldr	r1, [sp, #52]
 2273              	.LVL406:
 2274 024c 0E9A     		ldr	r2, [sp, #56]
 2275              	.LVL407:
 2276              	.L185:
 2277              	.LBE18:
1151:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1152:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 2278              		.loc 1 1152 0 is_stmt 1
 2279 024e 2B11     		asrs	r3, r5, #4
 2280              	.LVL408:
1153:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	s &= 15;
1154:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1155:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
ARM GAS  /tmp/ccDN7JHH.s 			page 64


 2281              		.loc 1 1155 0
 2282 0250 15F00F05 		ands	r5, r5, #15
 2283              	.LVL409:
 2284 0254 21D0     		beq	.L186
1156:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  k += r;
 2285              		.loc 1 1156 0
 2286 0256 1C44     		add	r4, r4, r3
 2287              	.LVL410:
1157:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2288              		.loc 1 1157 0
 2289 0258 AA42     		cmp	r2, r5
 2290 025a 15DB     		blt	.L216
 2291              	.LVL411:
 2292              	.L187:
1158:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2293              		.loc 1 1158 0
 2294 025c 521B     		subs	r2, r2, r5
 2295              	.LVL412:
 2296              	.L188:
1149:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 2297              		.loc 1 1149 0
 2298 025e 0134     		adds	r4, r4, #1
 2299              	.LVL413:
 2300              	.L182:
1149:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 2301              		.loc 1 1149 0 is_stmt 0 discriminator 1
 2302 0260 BC42     		cmp	r4, r7
 2303 0262 1EDC     		bgt	.L178
 2304              	.LBB19:
1150:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2305              		.loc 1 1150 0 is_stmt 1
 2306 0264 072A     		cmp	r2, #7
 2307 0266 DCDD     		ble	.L217
 2308              	.L183:
1150:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2309              		.loc 1 1150 0 is_stmt 0 discriminator 6
 2310 0268 A2F10803 		sub	r3, r2, #8
 2311 026c 41FA03F3 		asr	r3, r1, r3
 2312 0270 DBB2     		uxtb	r3, r3
 2313              	.LVL414:
 2314 0272 03F12400 		add	r0, r3, #36
 2315 0276 56F82000 		ldr	r0, [r6, r0, lsl #2]
 2316              	.LVL415:
 2317 027a 0028     		cmp	r0, #0
 2318 027c DDD0     		beq	.L204
1150:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2319              		.loc 1 1150 0 discriminator 8
 2320 027e 121A     		subs	r2, r2, r0
 2321              	.LVL416:
 2322 0280 3344     		add	r3, r3, r6
 2323              	.LVL417:
 2324 0282 93F89054 		ldrb	r5, [r3, #1168]	@ zero_extendqisi2
 2325              	.LVL418:
 2326 0286 E2E7     		b	.L185
 2327              	.LVL419:
 2328              	.L216:
 2329              	.LBE19:
ARM GAS  /tmp/ccDN7JHH.s 			page 65


1157:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2330              		.loc 1 1157 0 is_stmt 1 discriminator 1
 2331 0288 2B46     		mov	r3, r5
 2332              	.LVL420:
 2333 028a 0BA8     		add	r0, sp, #44
 2334 028c FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2335              	.LVL421:
 2336 0290 0028     		cmp	r0, #0
 2337 0292 39D0     		beq	.L205
1157:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2338              		.loc 1 1157 0 is_stmt 0 discriminator 3
 2339 0294 0D99     		ldr	r1, [sp, #52]
 2340              	.LVL422:
 2341 0296 0E9A     		ldr	r2, [sp, #56]
 2342              	.LVL423:
 2343 0298 E0E7     		b	.L187
 2344              	.LVL424:
 2345              	.L186:
1159:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} else {
1160:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (r != 15)
 2346              		.loc 1 1160 0 is_stmt 1
 2347 029a 0F2B     		cmp	r3, #15
 2348 029c 01D1     		bne	.L178
1161:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    break;
1162:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  k += 15;
 2349              		.loc 1 1162 0
 2350 029e 0F34     		adds	r4, r4, #15
 2351              	.LVL425:
 2352 02a0 DDE7     		b	.L188
 2353              	.LVL426:
 2354              	.L178:
 2355              	.LBE23:
1088:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 2356              		.loc 1 1088 0 discriminator 2
 2357 02a2 0BF1010B 		add	fp, fp, #1
 2358              	.LVL427:
 2359 02a6 DFE6     		b	.L163
 2360              	.LVL428:
 2361              	.L210:
 2362 02a8 8E46     		mov	lr, r1
 2363 02aa 9446     		mov	ip, r2
 2364 02ac DDF80C90 		ldr	r9, [sp, #12]
 2365 02b0 DDF814A0 		ldr	r10, [sp, #20]
 2366              	.LVL429:
1163:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1164:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1165:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1166:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       EndOfBlock: ;
1167:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1168:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1169:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Completed MCU, so update state */
1170:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 2367              		.loc 1 1170 0
 2368 02b4 DAF81830 		ldr	r3, [r10, #24]
 2369 02b8 0B9A     		ldr	r2, [sp, #44]
 2370              	.LVL430:
 2371 02ba 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccDN7JHH.s 			page 66


 2372 02bc DAF81830 		ldr	r3, [r10, #24]
 2373 02c0 0C9A     		ldr	r2, [sp, #48]
 2374 02c2 5A60     		str	r2, [r3, #4]
 2375 02c4 C9F80810 		str	r1, [r9, #8]
 2376 02c8 C9F80CC0 		str	ip, [r9, #12]
1171:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 2377              		.loc 1 1171 0
 2378 02cc 09F11004 		add	r4, r9, #16
 2379 02d0 06AD     		add	r5, sp, #24
 2380 02d2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2381              	.LVL431:
 2382 02d4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2383 02d6 2B68     		ldr	r3, [r5]
 2384 02d8 2360     		str	r3, [r4]
 2385              	.LVL432:
 2386              	.L162:
1172:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
1173:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1174:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
1175:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->restarts_to_go--;
 2387              		.loc 1 1175 0
 2388 02da D9F82830 		ldr	r3, [r9, #40]
 2389 02de 013B     		subs	r3, r3, #1
 2390 02e0 C9F82830 		str	r3, [r9, #40]
1176:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1177:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return TRUE;
 2391              		.loc 1 1177 0
 2392 02e4 0123     		movs	r3, #1
 2393 02e6 0293     		str	r3, [sp, #8]
 2394              	.L159:
1178:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 2395              		.loc 1 1178 0
 2396 02e8 0298     		ldr	r0, [sp, #8]
 2397 02ea 11B0     		add	sp, sp, #68
 2398              	.LCFI20:
 2399              		.cfi_remember_state
 2400              		.cfi_def_cfa_offset 36
 2401              		@ sp needed
 2402 02ec BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2403              	.LVL433:
 2404              	.L191:
 2405              	.LCFI21:
 2406              		.cfi_restore_state
 2407              	.LBB24:
 2408              	.LBB20:
1098:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2409              		.loc 1 1098 0
 2410 02f0 0290     		str	r0, [sp, #8]
 2411 02f2 F9E7     		b	.L159
 2412              	.LVL434:
 2413              	.L194:
 2414              	.LBE20:
1106:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 2415              		.loc 1 1106 0
 2416 02f4 0290     		str	r0, [sp, #8]
 2417 02f6 F7E7     		b	.L159
 2418              	.LVL435:
ARM GAS  /tmp/ccDN7JHH.s 			page 67


 2419              	.L196:
 2420              	.LBB21:
1119:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2421              		.loc 1 1119 0
 2422 02f8 0290     		str	r0, [sp, #8]
 2423 02fa F5E7     		b	.L159
 2424              	.LVL436:
 2425              	.L199:
 2426              	.LBE21:
1126:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    r = GET_BITS(s);
 2427              		.loc 1 1126 0
 2428 02fc 0290     		str	r0, [sp, #8]
 2429 02fe F3E7     		b	.L159
 2430              	.LVL437:
 2431              	.L201:
1142:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2432              		.loc 1 1142 0
 2433 0300 0290     		str	r0, [sp, #8]
 2434 0302 F1E7     		b	.L159
 2435              	.LVL438:
 2436              	.L202:
 2437              	.LBB22:
1150:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2438              		.loc 1 1150 0
 2439 0304 0290     		str	r0, [sp, #8]
 2440 0306 EFE7     		b	.L159
 2441              	.LVL439:
 2442              	.L205:
 2443              	.LBE22:
1157:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2444              		.loc 1 1157 0
 2445 0308 0290     		str	r0, [sp, #8]
 2446 030a EDE7     		b	.L159
 2447              	.L219:
 2448              		.align	2
 2449              	.L218:
 2450 030c 00000000 		.word	.LANCHOR0
 2451              	.LBE24:
 2452              		.cfi_endproc
 2453              	.LFE11:
 2455              		.section	.text.decode_mcu,"ax",%progbits
 2456              		.align	1
 2457              		.syntax unified
 2458              		.thumb
 2459              		.thumb_func
 2460              		.fpu fpv5-sp-d16
 2462              	decode_mcu:
 2463              	.LFB12:
1179:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1180:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1181:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
1182:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Decode one MCU's worth of Huffman-compressed coefficients,
1183:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * full-size blocks.
1184:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
1185:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1186:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** METHODDEF(boolean)
1187:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
ARM GAS  /tmp/ccDN7JHH.s 			page 68


1188:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {
 2464              		.loc 1 1188 0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 48
 2467              		@ frame_needed = 0, uses_anonymous_args = 0
 2468              	.LVL440:
 2469 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2470              	.LCFI22:
 2471              		.cfi_def_cfa_offset 36
 2472              		.cfi_offset 4, -36
 2473              		.cfi_offset 5, -32
 2474              		.cfi_offset 6, -28
 2475              		.cfi_offset 7, -24
 2476              		.cfi_offset 8, -20
 2477              		.cfi_offset 9, -16
 2478              		.cfi_offset 10, -12
 2479              		.cfi_offset 11, -8
 2480              		.cfi_offset 14, -4
 2481 0004 8FB0     		sub	sp, sp, #60
 2482              	.LCFI23:
 2483              		.cfi_def_cfa_offset 96
 2484 0006 8246     		mov	r10, r0
 2485 0008 0391     		str	r1, [sp, #12]
1189:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 2486              		.loc 1 1189 0
 2487 000a D0F8D081 		ldr	r8, [r0, #464]
 2488              	.LVL441:
1190:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int blkn;
1191:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   BITREAD_STATE_VARS;
1192:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   savable_state state;
1193:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1194:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
1195:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->restart_interval) {
 2489              		.loc 1 1195 0
 2490 000e D0F81831 		ldr	r3, [r0, #280]
 2491 0012 1BB1     		cbz	r3, .L221
1196:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 2492              		.loc 1 1196 0
 2493 0014 D8F82830 		ldr	r3, [r8, #40]
 2494 0018 002B     		cmp	r3, #0
 2495 001a 39D0     		beq	.L270
 2496              	.LVL442:
 2497              	.L221:
1197:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (! process_restart(cinfo))
1198:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
1199:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
1200:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1201:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
1202:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
1203:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****    */
1204:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (! entropy->insufficient_data) {
 2498              		.loc 1 1204 0
 2499 001c D8F82430 		ldr	r3, [r8, #36]
 2500 0020 0293     		str	r3, [sp, #8]
 2501 0022 002B     		cmp	r3, #0
 2502 0024 40F04881 		bne	.L223
1205:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
ARM GAS  /tmp/ccDN7JHH.s 			page 69


1206:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Load up working state */
1207:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 2503              		.loc 1 1207 0
 2504 0028 CDF834A0 		str	r10, [sp, #52]
 2505 002c DAF81830 		ldr	r3, [r10, #24]
 2506 0030 1A68     		ldr	r2, [r3]
 2507 0032 0992     		str	r2, [sp, #36]
 2508 0034 5B68     		ldr	r3, [r3, #4]
 2509 0036 0A93     		str	r3, [sp, #40]
 2510 0038 D8F808E0 		ldr	lr, [r8, #8]
 2511              	.LVL443:
 2512 003c D8F80CC0 		ldr	ip, [r8, #12]
 2513              	.LVL444:
1208:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2514              		.loc 1 1208 0
 2515 0040 04AC     		add	r4, sp, #16
 2516 0042 08F11005 		add	r5, r8, #16
 2517 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2518 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2519 004a 2B68     		ldr	r3, [r5]
 2520 004c 2360     		str	r3, [r4]
 2521              	.LVL445:
1209:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1210:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Outer loop handles each block in the MCU */
1211:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1212:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 2522              		.loc 1 1212 0
 2523 004e 4FF00009 		mov	r9, #0
 2524 0052 7146     		mov	r1, lr
 2525 0054 6246     		mov	r2, ip
 2526              	.LVL446:
 2527              	.L224:
 2528              		.loc 1 1212 0 is_stmt 0 discriminator 1
 2529 0056 DAF86C31 		ldr	r3, [r10, #364]
 2530 005a 4B45     		cmp	r3, r9
 2531 005c 40F31781 		ble	.L271
 2532              	.LBB25:
1213:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 2533              		.loc 1 1213 0 is_stmt 1
 2534 0060 039B     		ldr	r3, [sp, #12]
 2535 0062 53F829B0 		ldr	fp, [r3, r9, lsl #2]
 2536              	.LVL447:
1214:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       d_derived_tbl * htbl;
1215:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       register int s, k, r;
1216:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int coef_limit, ci;
1217:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1218:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Decode a single block's worth of coefficients */
1219:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1220:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Section F.2.2.1: decode the DC coefficient difference */
1221:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       htbl = entropy->dc_cur_tbls[blkn];
 2537              		.loc 1 1221 0
 2538 0066 09F11803 		add	r3, r9, #24
 2539 006a 58F82340 		ldr	r4, [r8, r3, lsl #2]
 2540              	.LVL448:
 2541              	.LBB26:
1222:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 2542              		.loc 1 1222 0
ARM GAS  /tmp/ccDN7JHH.s 			page 70


 2543 006e 072A     		cmp	r2, #7
 2544 0070 14DD     		ble	.L272
 2545              	.L225:
 2546              		.loc 1 1222 0 is_stmt 0 discriminator 6
 2547 0072 A2F10803 		sub	r3, r2, #8
 2548 0076 41FA03F3 		asr	r3, r1, r3
 2549 007a DBB2     		uxtb	r3, r3
 2550              	.LVL449:
 2551 007c 03F12400 		add	r0, r3, #36
 2552 0080 54F82000 		ldr	r0, [r4, r0, lsl #2]
 2553              	.LVL450:
 2554 0084 B8B1     		cbz	r0, .L254
 2555              		.loc 1 1222 0 discriminator 8
 2556 0086 121A     		subs	r2, r2, r0
 2557              	.LVL451:
 2558 0088 1C44     		add	r4, r4, r3
 2559              	.LVL452:
 2560 008a 94F89044 		ldrb	r4, [r4, #1168]	@ zero_extendqisi2
 2561              	.LVL453:
 2562 008e 1DE0     		b	.L227
 2563              	.LVL454:
 2564              	.L270:
 2565              	.LBE26:
 2566              	.LBE25:
1197:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	return FALSE;
 2567              		.loc 1 1197 0 is_stmt 1
 2568 0090 FFF7FEFF 		bl	process_restart
 2569              	.LVL455:
 2570 0094 0290     		str	r0, [sp, #8]
 2571 0096 0028     		cmp	r0, #0
 2572 0098 C0D1     		bne	.L221
 2573 009a 14E1     		b	.L220
 2574              	.LVL456:
 2575              	.L272:
 2576              	.LBB35:
 2577              	.LBB27:
 2578              		.loc 1 1222 0 discriminator 1
 2579 009c 0023     		movs	r3, #0
 2580 009e 09A8     		add	r0, sp, #36
 2581 00a0 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2582              	.LVL457:
 2583 00a4 0028     		cmp	r0, #0
 2584 00a6 00F01281 		beq	.L252
 2585              		.loc 1 1222 0 is_stmt 0 discriminator 4
 2586 00aa 0B99     		ldr	r1, [sp, #44]
 2587              	.LVL458:
 2588 00ac 0C9A     		ldr	r2, [sp, #48]
 2589              	.LVL459:
 2590 00ae 072A     		cmp	r2, #7
 2591 00b0 DFDC     		bgt	.L225
 2592              		.loc 1 1222 0
 2593 00b2 0123     		movs	r3, #1
 2594 00b4 00E0     		b	.L226
 2595              	.LVL460:
 2596              	.L254:
 2597 00b6 0923     		movs	r3, #9
 2598              	.LVL461:
ARM GAS  /tmp/ccDN7JHH.s 			page 71


 2599              	.L226:
 2600              		.loc 1 1222 0 discriminator 10
 2601 00b8 0093     		str	r3, [sp]
 2602 00ba 2346     		mov	r3, r4
 2603              	.LVL462:
 2604 00bc 09A8     		add	r0, sp, #36
 2605 00be FFF7FEFF 		bl	jpeg_huff_decode
 2606              	.LVL463:
 2607 00c2 041E     		subs	r4, r0, #0
 2608              	.LVL464:
 2609 00c4 C0F2FF80 		blt	.L220
 2610              		.loc 1 1222 0 discriminator 12
 2611 00c8 0B99     		ldr	r1, [sp, #44]
 2612              	.LVL465:
 2613 00ca 0C9A     		ldr	r2, [sp, #48]
 2614              	.LVL466:
 2615              	.L227:
 2616              	.LBE27:
1223:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1224:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       htbl = entropy->ac_cur_tbls[blkn];
 2617              		.loc 1 1224 0 is_stmt 1
 2618 00cc 09F12203 		add	r3, r9, #34
 2619 00d0 58F82360 		ldr	r6, [r8, r3, lsl #2]
 2620              	.LVL467:
1225:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       k = 1;
1226:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2621              		.loc 1 1226 0
 2622 00d4 09F12C03 		add	r3, r9, #44
 2623 00d8 58F82370 		ldr	r7, [r8, r3, lsl #2]
 2624              	.LVL468:
1227:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (coef_limit) {
 2625              		.loc 1 1227 0
 2626 00dc 002F     		cmp	r7, #0
 2627 00de 00F08280 		beq	.L228
1228:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Convert DC difference to actual value, update last_dc_val */
1229:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
 2628              		.loc 1 1229 0
 2629 00e2 74B1     		cbz	r4, .L229
1230:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2630              		.loc 1 1230 0
 2631 00e4 A242     		cmp	r2, r4
 2632 00e6 1CDB     		blt	.L273
 2633              	.L230:
1231:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 2634              		.loc 1 1231 0
 2635 00e8 121B     		subs	r2, r2, r4
 2636              	.LVL469:
 2637 00ea 41FA02F3 		asr	r3, r1, r2
 2638 00ee 7F48     		ldr	r0, .L279
 2639 00f0 50F82450 		ldr	r5, [r0, r4, lsl #2]
 2640 00f4 2B40     		ands	r3, r3, r5
 2641              	.LVL470:
1232:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 2642              		.loc 1 1232 0
 2643 00f6 013C     		subs	r4, r4, #1
 2644              	.LVL471:
 2645 00f8 50F82400 		ldr	r0, [r0, r4, lsl #2]
ARM GAS  /tmp/ccDN7JHH.s 			page 72


 2646 00fc 9842     		cmp	r0, r3
 2647 00fe 1ADB     		blt	.L256
 2648              		.loc 1 1232 0 is_stmt 0 discriminator 1
 2649 0100 5C1B     		subs	r4, r3, r5
 2650              	.LVL472:
 2651              	.L229:
1233:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1234:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	ci = cinfo->MCU_membership[blkn];
 2652              		.loc 1 1234 0 is_stmt 1
 2653 0102 09F15C03 		add	r3, r9, #92
 2654 0106 5AF82300 		ldr	r0, [r10, r3, lsl #2]
 2655              	.LVL473:
1235:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	s += state.last_dc_val[ci];
 2656              		.loc 1 1235 0
 2657 010a 0EAB     		add	r3, sp, #56
 2658 010c 03EB8000 		add	r0, r3, r0, lsl #2
 2659              	.LVL474:
 2660 0110 50F8243C 		ldr	r3, [r0, #-36]
 2661 0114 1C44     		add	r4, r4, r3
 2662              	.LVL475:
1236:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	state.last_dc_val[ci] = s;
 2663              		.loc 1 1236 0
 2664 0116 40F8244C 		str	r4, [r0, #-36]
1237:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Output the DC coefficient */
1238:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	(*block)[0] = (JCOEF) s;
 2665              		.loc 1 1238 0
 2666 011a ABF80040 		strh	r4, [fp]	@ movhi
 2667              	.LVL476:
1225:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2668              		.loc 1 1225 0
 2669 011e 0124     		movs	r4, #1
 2670              	.LVL477:
1239:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1240:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Section F.2.2.2: decode the AC coefficients */
1241:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* Since zeroes are skipped, output area must be cleared beforehand */
1242:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	for (; k < coef_limit; k++) {
 2671              		.loc 1 1242 0
 2672 0120 3FE0     		b	.L231
 2673              	.LVL478:
 2674              	.L273:
1230:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 2675              		.loc 1 1230 0 discriminator 1
 2676 0122 2346     		mov	r3, r4
 2677 0124 09A8     		add	r0, sp, #36
 2678 0126 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2679              	.LVL479:
 2680 012a 0028     		cmp	r0, #0
 2681 012c 00F0D180 		beq	.L255
1230:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 2682              		.loc 1 1230 0 is_stmt 0 discriminator 3
 2683 0130 0B99     		ldr	r1, [sp, #44]
 2684              	.LVL480:
 2685 0132 0C9A     		ldr	r2, [sp, #48]
 2686              	.LVL481:
 2687 0134 D8E7     		b	.L230
 2688              	.LVL482:
 2689              	.L256:
ARM GAS  /tmp/ccDN7JHH.s 			page 73


1232:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
 2690              		.loc 1 1232 0 is_stmt 1
 2691 0136 1C46     		mov	r4, r3
 2692              	.LVL483:
 2693 0138 E3E7     		b	.L229
 2694              	.LVL484:
 2695              	.L275:
 2696              	.LBB28:
1243:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2697              		.loc 1 1243 0 discriminator 1
 2698 013a 0023     		movs	r3, #0
 2699 013c 09A8     		add	r0, sp, #36
 2700 013e FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2701              	.LVL485:
 2702 0142 0028     		cmp	r0, #0
 2703 0144 00F0C780 		beq	.L257
 2704              		.loc 1 1243 0 is_stmt 0 discriminator 4
 2705 0148 0B99     		ldr	r1, [sp, #44]
 2706              	.LVL486:
 2707 014a 0C9A     		ldr	r2, [sp, #48]
 2708              	.LVL487:
 2709 014c 072A     		cmp	r2, #7
 2710 014e 2CDC     		bgt	.L232
 2711              		.loc 1 1243 0
 2712 0150 0123     		movs	r3, #1
 2713 0152 00E0     		b	.L233
 2714              	.LVL488:
 2715              	.L259:
 2716 0154 0923     		movs	r3, #9
 2717              	.LVL489:
 2718              	.L233:
 2719              		.loc 1 1243 0 discriminator 10
 2720 0156 0093     		str	r3, [sp]
 2721 0158 3346     		mov	r3, r6
 2722              	.LVL490:
 2723 015a 09A8     		add	r0, sp, #36
 2724 015c FFF7FEFF 		bl	jpeg_huff_decode
 2725              	.LVL491:
 2726 0160 051E     		subs	r5, r0, #0
 2727 0162 C0F2B080 		blt	.L220
 2728              		.loc 1 1243 0 discriminator 12
 2729 0166 0B99     		ldr	r1, [sp, #44]
 2730              	.LVL492:
 2731 0168 0C9A     		ldr	r2, [sp, #48]
 2732              	.LVL493:
 2733              	.L234:
 2734              	.LBE28:
1244:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1245:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = s >> 4;
 2735              		.loc 1 1245 0 is_stmt 1
 2736 016a 2B11     		asrs	r3, r5, #4
 2737              	.LVL494:
1246:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  s &= 15;
1247:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1248:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (s) {
 2738              		.loc 1 1248 0
 2739 016c 15F00F05 		ands	r5, r5, #15
ARM GAS  /tmp/ccDN7JHH.s 			page 74


 2740              	.LVL495:
 2741 0170 35D0     		beq	.L235
1249:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    k += r;
 2742              		.loc 1 1249 0
 2743 0172 1C44     		add	r4, r4, r3
 2744              	.LVL496:
1250:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2745              		.loc 1 1250 0
 2746 0174 AA42     		cmp	r2, r5
 2747 0176 28DB     		blt	.L274
 2748              	.LVL497:
 2749              	.L236:
1251:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    r = GET_BITS(s);
 2750              		.loc 1 1251 0
 2751 0178 521B     		subs	r2, r2, r5
 2752              	.LVL498:
 2753 017a 41FA02F3 		asr	r3, r1, r2
 2754 017e 5B48     		ldr	r0, .L279
 2755 0180 50F825C0 		ldr	ip, [r0, r5, lsl #2]
 2756 0184 03EA0C03 		and	r3, r3, ip
 2757              	.LVL499:
1252:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 2758              		.loc 1 1252 0
 2759 0188 013D     		subs	r5, r5, #1
 2760              	.LVL500:
 2761 018a 50F82500 		ldr	r0, [r0, r5, lsl #2]
 2762 018e 9842     		cmp	r0, r3
 2763 0190 01DB     		blt	.L237
 2764              		.loc 1 1252 0 is_stmt 0 discriminator 1
 2765 0192 A3EB0C03 		sub	r3, r3, ip
 2766              	.LVL501:
 2767              	.L237:
1253:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
1254:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	     * Note: the extra entries in jpeg_natural_order[] will save us
1255:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	     * if k >= DCTSIZE2, which could happen if the data is corrupted.
1256:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	     */
1257:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 2768              		.loc 1 1257 0 is_stmt 1 discriminator 4
 2769 0196 5648     		ldr	r0, .L279+4
 2770 0198 50F82400 		ldr	r0, [r0, r4, lsl #2]
 2771 019c 2BF81030 		strh	r3, [fp, r0, lsl #1]	@ movhi
 2772              	.LVL502:
 2773              	.L238:
1242:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2774              		.loc 1 1242 0
 2775 01a0 0134     		adds	r4, r4, #1
 2776              	.LVL503:
 2777              	.L231:
1242:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2778              		.loc 1 1242 0 is_stmt 0 discriminator 1
 2779 01a2 BC42     		cmp	r4, r7
 2780 01a4 4FDA     		bge	.L243
 2781              	.LBB29:
1243:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2782              		.loc 1 1243 0 is_stmt 1
 2783 01a6 072A     		cmp	r2, #7
 2784 01a8 C7DD     		ble	.L275
ARM GAS  /tmp/ccDN7JHH.s 			page 75


 2785              	.L232:
1243:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2786              		.loc 1 1243 0 is_stmt 0 discriminator 6
 2787 01aa A2F10803 		sub	r3, r2, #8
 2788 01ae 41FA03F3 		asr	r3, r1, r3
 2789 01b2 DBB2     		uxtb	r3, r3
 2790              	.LVL504:
 2791 01b4 03F12400 		add	r0, r3, #36
 2792 01b8 56F82000 		ldr	r0, [r6, r0, lsl #2]
 2793              	.LVL505:
 2794 01bc 0028     		cmp	r0, #0
 2795 01be C9D0     		beq	.L259
1243:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2796              		.loc 1 1243 0 discriminator 8
 2797 01c0 121A     		subs	r2, r2, r0
 2798              	.LVL506:
 2799 01c2 3344     		add	r3, r3, r6
 2800              	.LVL507:
 2801 01c4 93F89054 		ldrb	r5, [r3, #1168]	@ zero_extendqisi2
 2802              	.LVL508:
 2803 01c8 CFE7     		b	.L234
 2804              	.LVL509:
 2805              	.L274:
 2806              	.LBE29:
1250:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    r = GET_BITS(s);
 2807              		.loc 1 1250 0 is_stmt 1 discriminator 1
 2808 01ca 2B46     		mov	r3, r5
 2809              	.LVL510:
 2810 01cc 09A8     		add	r0, sp, #36
 2811 01ce FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2812              	.LVL511:
 2813 01d2 0028     		cmp	r0, #0
 2814 01d4 00F08180 		beq	.L260
1250:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    r = GET_BITS(s);
 2815              		.loc 1 1250 0 is_stmt 0 discriminator 3
 2816 01d8 0B99     		ldr	r1, [sp, #44]
 2817              	.LVL512:
 2818 01da 0C9A     		ldr	r2, [sp, #48]
 2819              	.LVL513:
 2820 01dc CCE7     		b	.L236
 2821              	.LVL514:
 2822              	.L235:
1258:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  } else {
1259:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    if (r != 15)
 2823              		.loc 1 1259 0 is_stmt 1
 2824 01de 0F2B     		cmp	r3, #15
 2825 01e0 52D1     		bne	.L239
1260:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	      goto EndOfBlock;
1261:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    k += 15;
 2826              		.loc 1 1261 0
 2827 01e2 0F34     		adds	r4, r4, #15
 2828              	.LVL515:
 2829 01e4 DCE7     		b	.L238
 2830              	.LVL516:
 2831              	.L228:
1262:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  }
1263:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
ARM GAS  /tmp/ccDN7JHH.s 			page 76


1264:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       } else {
1265:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
 2832              		.loc 1 1265 0
 2833 01e6 6CB1     		cbz	r4, .L261
1266:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2834              		.loc 1 1266 0
 2835 01e8 A242     		cmp	r2, r4
 2836 01ea 02DB     		blt	.L276
 2837              	.L242:
1267:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2838              		.loc 1 1267 0
 2839 01ec 121B     		subs	r2, r2, r4
 2840              	.LVL517:
1225:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2841              		.loc 1 1225 0
 2842 01ee 0124     		movs	r4, #1
 2843              	.LVL518:
 2844 01f0 29E0     		b	.L243
 2845              	.LVL519:
 2846              	.L276:
1266:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2847              		.loc 1 1266 0 discriminator 1
 2848 01f2 2346     		mov	r3, r4
 2849 01f4 09A8     		add	r0, sp, #36
 2850 01f6 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2851              	.LVL520:
 2852 01fa 0028     		cmp	r0, #0
 2853 01fc 6FD0     		beq	.L262
1266:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2854              		.loc 1 1266 0 is_stmt 0 discriminator 3
 2855 01fe 0B99     		ldr	r1, [sp, #44]
 2856              	.LVL521:
 2857 0200 0C9A     		ldr	r2, [sp, #48]
 2858              	.LVL522:
 2859 0202 F3E7     		b	.L242
 2860              	.L261:
1225:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2861              		.loc 1 1225 0 is_stmt 1
 2862 0204 0124     		movs	r4, #1
 2863              	.LVL523:
 2864 0206 1EE0     		b	.L243
 2865              	.LVL524:
 2866              	.L278:
 2867              	.LBB30:
1268:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1269:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1270:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1271:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Section F.2.2.2: decode the AC coefficients */
1272:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* In this path we just discard the values */
1273:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (; k < DCTSIZE2; k++) {
1274:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 2868              		.loc 1 1274 0 discriminator 1
 2869 0208 0023     		movs	r3, #0
 2870 020a 09A8     		add	r0, sp, #36
 2871 020c FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2872              	.LVL525:
 2873 0210 0028     		cmp	r0, #0
ARM GAS  /tmp/ccDN7JHH.s 			page 77


 2874 0212 66D0     		beq	.L263
 2875              		.loc 1 1274 0 is_stmt 0 discriminator 4
 2876 0214 0B99     		ldr	r1, [sp, #44]
 2877              	.LVL526:
 2878 0216 0C9A     		ldr	r2, [sp, #48]
 2879              	.LVL527:
 2880 0218 072A     		cmp	r2, #7
 2881 021a 18DC     		bgt	.L244
 2882              		.loc 1 1274 0
 2883 021c 0123     		movs	r3, #1
 2884 021e 00E0     		b	.L245
 2885              	.LVL528:
 2886              	.L265:
 2887 0220 0923     		movs	r3, #9
 2888              	.LVL529:
 2889              	.L245:
 2890              		.loc 1 1274 0 discriminator 10
 2891 0222 0093     		str	r3, [sp]
 2892 0224 3346     		mov	r3, r6
 2893              	.LVL530:
 2894 0226 09A8     		add	r0, sp, #36
 2895 0228 FFF7FEFF 		bl	jpeg_huff_decode
 2896              	.LVL531:
 2897 022c 051E     		subs	r5, r0, #0
 2898 022e 4ADB     		blt	.L220
 2899              		.loc 1 1274 0 discriminator 12
 2900 0230 0B99     		ldr	r1, [sp, #44]
 2901              	.LVL532:
 2902 0232 0C9A     		ldr	r2, [sp, #48]
 2903              	.LVL533:
 2904              	.L246:
 2905              	.LBE30:
1275:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1276:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	r = s >> 4;
 2906              		.loc 1 1276 0 is_stmt 1
 2907 0234 2B11     		asrs	r3, r5, #4
 2908              	.LVL534:
1277:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	s &= 15;
1278:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1279:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (s) {
 2909              		.loc 1 1279 0
 2910 0236 15F00F05 		ands	r5, r5, #15
 2911              	.LVL535:
 2912 023a 21D0     		beq	.L247
1280:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  k += r;
 2913              		.loc 1 1280 0
 2914 023c 1C44     		add	r4, r4, r3
 2915              	.LVL536:
1281:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2916              		.loc 1 1281 0
 2917 023e AA42     		cmp	r2, r5
 2918 0240 15DB     		blt	.L277
 2919              	.LVL537:
 2920              	.L248:
1282:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2921              		.loc 1 1282 0
 2922 0242 521B     		subs	r2, r2, r5
ARM GAS  /tmp/ccDN7JHH.s 			page 78


 2923              	.LVL538:
 2924              	.L249:
1273:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 2925              		.loc 1 1273 0
 2926 0244 0134     		adds	r4, r4, #1
 2927              	.LVL539:
 2928              	.L243:
1273:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 2929              		.loc 1 1273 0 is_stmt 0 discriminator 1
 2930 0246 3F2C     		cmp	r4, #63
 2931 0248 1EDC     		bgt	.L239
 2932              	.LBB31:
1274:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2933              		.loc 1 1274 0 is_stmt 1
 2934 024a 072A     		cmp	r2, #7
 2935 024c DCDD     		ble	.L278
 2936              	.L244:
1274:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2937              		.loc 1 1274 0 is_stmt 0 discriminator 6
 2938 024e A2F10803 		sub	r3, r2, #8
 2939 0252 41FA03F3 		asr	r3, r1, r3
 2940 0256 DBB2     		uxtb	r3, r3
 2941              	.LVL540:
 2942 0258 03F12400 		add	r0, r3, #36
 2943 025c 56F82000 		ldr	r0, [r6, r0, lsl #2]
 2944              	.LVL541:
 2945 0260 0028     		cmp	r0, #0
 2946 0262 DDD0     		beq	.L265
1274:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 2947              		.loc 1 1274 0 discriminator 8
 2948 0264 121A     		subs	r2, r2, r0
 2949              	.LVL542:
 2950 0266 3344     		add	r3, r3, r6
 2951              	.LVL543:
 2952 0268 93F89054 		ldrb	r5, [r3, #1168]	@ zero_extendqisi2
 2953              	.LVL544:
 2954 026c E2E7     		b	.L246
 2955              	.LVL545:
 2956              	.L277:
 2957              	.LBE31:
1281:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2958              		.loc 1 1281 0 is_stmt 1 discriminator 1
 2959 026e 2B46     		mov	r3, r5
 2960              	.LVL546:
 2961 0270 09A8     		add	r0, sp, #36
 2962 0272 FFF7FEFF 		bl	jpeg_fill_bit_buffer
 2963              	.LVL547:
 2964 0276 0028     		cmp	r0, #0
 2965 0278 35D0     		beq	.L266
1281:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 2966              		.loc 1 1281 0 is_stmt 0 discriminator 3
 2967 027a 0B99     		ldr	r1, [sp, #44]
 2968              	.LVL548:
 2969 027c 0C9A     		ldr	r2, [sp, #48]
 2970              	.LVL549:
 2971 027e E0E7     		b	.L248
 2972              	.LVL550:
ARM GAS  /tmp/ccDN7JHH.s 			page 79


 2973              	.L247:
1283:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	} else {
1284:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (r != 15)
 2974              		.loc 1 1284 0 is_stmt 1
 2975 0280 0F2B     		cmp	r3, #15
 2976 0282 01D1     		bne	.L239
1285:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    break;
1286:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  k += 15;
 2977              		.loc 1 1286 0
 2978 0284 0F34     		adds	r4, r4, #15
 2979              	.LVL551:
 2980 0286 DDE7     		b	.L249
 2981              	.LVL552:
 2982              	.L239:
 2983              	.LBE35:
1212:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 2984              		.loc 1 1212 0 discriminator 2
 2985 0288 09F10109 		add	r9, r9, #1
 2986              	.LVL553:
 2987 028c E3E6     		b	.L224
 2988              	.LVL554:
 2989              	.L271:
 2990 028e 8E46     		mov	lr, r1
 2991 0290 9446     		mov	ip, r2
1287:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1288:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1289:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1290:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       EndOfBlock: ;
1291:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1292:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1293:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Completed MCU, so update state */
1294:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 2992              		.loc 1 1294 0
 2993 0292 DAF81830 		ldr	r3, [r10, #24]
 2994 0296 099A     		ldr	r2, [sp, #36]
 2995              	.LVL555:
 2996 0298 1A60     		str	r2, [r3]
 2997 029a DAF81830 		ldr	r3, [r10, #24]
 2998 029e 0A9A     		ldr	r2, [sp, #40]
 2999 02a0 5A60     		str	r2, [r3, #4]
 3000 02a2 C8F80810 		str	r1, [r8, #8]
 3001 02a6 C8F80CC0 		str	ip, [r8, #12]
1295:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 3002              		.loc 1 1295 0
 3003 02aa 08F11004 		add	r4, r8, #16
 3004 02ae 04AD     		add	r5, sp, #16
 3005 02b0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3006              	.LVL556:
 3007 02b2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 3008 02b4 2B68     		ldr	r3, [r5]
 3009 02b6 2360     		str	r3, [r4]
 3010              	.LVL557:
 3011              	.L223:
1296:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
1297:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1298:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
1299:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->restarts_to_go--;
ARM GAS  /tmp/ccDN7JHH.s 			page 80


 3012              		.loc 1 1299 0
 3013 02b8 D8F82830 		ldr	r3, [r8, #40]
 3014 02bc 013B     		subs	r3, r3, #1
 3015 02be C8F82830 		str	r3, [r8, #40]
1300:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1301:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   return TRUE;
 3016              		.loc 1 1301 0
 3017 02c2 0123     		movs	r3, #1
 3018 02c4 0293     		str	r3, [sp, #8]
 3019              	.L220:
1302:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 3020              		.loc 1 1302 0
 3021 02c6 0298     		ldr	r0, [sp, #8]
 3022 02c8 0FB0     		add	sp, sp, #60
 3023              	.LCFI24:
 3024              		.cfi_remember_state
 3025              		.cfi_def_cfa_offset 36
 3026              		@ sp needed
 3027 02ca BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3028              	.LVL558:
 3029              	.L252:
 3030              	.LCFI25:
 3031              		.cfi_restore_state
 3032              	.LBB36:
 3033              	.LBB32:
1222:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 3034              		.loc 1 1222 0
 3035 02ce 0290     		str	r0, [sp, #8]
 3036 02d0 F9E7     		b	.L220
 3037              	.LVL559:
 3038              	.L255:
 3039              	.LBE32:
1230:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  r = GET_BITS(s);
 3040              		.loc 1 1230 0
 3041 02d2 0290     		str	r0, [sp, #8]
 3042 02d4 F7E7     		b	.L220
 3043              	.LVL560:
 3044              	.L257:
 3045              	.LBB33:
1243:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 3046              		.loc 1 1243 0
 3047 02d6 0290     		str	r0, [sp, #8]
 3048 02d8 F5E7     		b	.L220
 3049              	.LVL561:
 3050              	.L260:
 3051              	.LBE33:
1250:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	    r = GET_BITS(s);
 3052              		.loc 1 1250 0
 3053 02da 0290     		str	r0, [sp, #8]
 3054 02dc F3E7     		b	.L220
 3055              	.LVL562:
 3056              	.L262:
1266:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 3057              		.loc 1 1266 0
 3058 02de 0290     		str	r0, [sp, #8]
 3059 02e0 F1E7     		b	.L220
 3060              	.LVL563:
ARM GAS  /tmp/ccDN7JHH.s 			page 81


 3061              	.L263:
 3062              	.LBB34:
1274:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 3063              		.loc 1 1274 0
 3064 02e2 0290     		str	r0, [sp, #8]
 3065 02e4 EFE7     		b	.L220
 3066              	.LVL564:
 3067              	.L266:
 3068              	.LBE34:
1281:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  DROP_BITS(s);
 3069              		.loc 1 1281 0
 3070 02e6 0290     		str	r0, [sp, #8]
 3071 02e8 EDE7     		b	.L220
 3072              	.L280:
 3073 02ea 00BF     		.align	2
 3074              	.L279:
 3075 02ec 00000000 		.word	.LANCHOR0
 3076 02f0 00000000 		.word	jpeg_natural_order
 3077              	.LBE36:
 3078              		.cfi_endproc
 3079              	.LFE12:
 3081              		.section	.text.jpeg_make_d_derived_tbl,"ax",%progbits
 3082              		.align	1
 3083              		.syntax unified
 3084              		.thumb
 3085              		.thumb_func
 3086              		.fpu fpv5-sp-d16
 3088              	jpeg_make_d_derived_tbl:
 3089              	.LFB3:
 325:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   JHUFF_TBL *htbl;
 3090              		.loc 1 325 0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 1288
 3093              		@ frame_needed = 0, uses_anonymous_args = 0
 3094              	.LVL565:
 3095 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3096              	.LCFI26:
 3097              		.cfi_def_cfa_offset 36
 3098              		.cfi_offset 4, -36
 3099              		.cfi_offset 5, -32
 3100              		.cfi_offset 6, -28
 3101              		.cfi_offset 7, -24
 3102              		.cfi_offset 8, -20
 3103              		.cfi_offset 9, -16
 3104              		.cfi_offset 10, -12
 3105              		.cfi_offset 11, -8
 3106              		.cfi_offset 14, -4
 3107 0004 ADF20C5D 		subw	sp, sp, #1292
 3108              	.LCFI27:
 3109              		.cfi_def_cfa_offset 1328
 3110 0008 0746     		mov	r7, r0
 3111 000a 8846     		mov	r8, r1
 3112 000c 1446     		mov	r4, r2
 3113 000e 1E46     		mov	r6, r3
 339:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 3114              		.loc 1 339 0
 3115 0010 032A     		cmp	r2, #3
ARM GAS  /tmp/ccDN7JHH.s 			page 82


 3116 0012 07D9     		bls	.L282
 340:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   htbl =
 3117              		.loc 1 340 0
 3118 0014 0368     		ldr	r3, [r0]
 3119              	.LVL566:
 3120 0016 3422     		movs	r2, #52
 3121              	.LVL567:
 3122 0018 5A61     		str	r2, [r3, #20]
 3123 001a 0368     		ldr	r3, [r0]
 3124 001c 9C61     		str	r4, [r3, #24]
 3125 001e 0368     		ldr	r3, [r0]
 3126 0020 1B68     		ldr	r3, [r3]
 3127 0022 9847     		blx	r3
 3128              	.LVL568:
 3129              	.L282:
 342:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (htbl == NULL)
 3130              		.loc 1 342 0
 3131 0024 B8F1000F 		cmp	r8, #0
 3132 0028 1FD0     		beq	.L283
 342:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (htbl == NULL)
 3133              		.loc 1 342 0 is_stmt 0 discriminator 1
 3134 002a 04F12C03 		add	r3, r4, #44
 3135 002e 07EB8303 		add	r3, r7, r3, lsl #2
 3136 0032 5D68     		ldr	r5, [r3, #4]
 3137              	.L284:
 3138              	.LVL569:
 343:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 3139              		.loc 1 343 0 is_stmt 1
 3140 0034 45B9     		cbnz	r5, .L285
 344:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 3141              		.loc 1 344 0
 3142 0036 3B68     		ldr	r3, [r7]
 3143 0038 3422     		movs	r2, #52
 3144 003a 5A61     		str	r2, [r3, #20]
 3145 003c 3B68     		ldr	r3, [r7]
 3146 003e 9C61     		str	r4, [r3, #24]
 3147 0040 3B68     		ldr	r3, [r7]
 3148 0042 1B68     		ldr	r3, [r3]
 3149 0044 3846     		mov	r0, r7
 3150 0046 9847     		blx	r3
 3151              	.LVL570:
 3152              	.L285:
 347:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 3153              		.loc 1 347 0
 3154 0048 3368     		ldr	r3, [r6]
 3155 004a 3BB9     		cbnz	r3, .L286
 349:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				  SIZEOF(d_derived_tbl));
 3156              		.loc 1 349 0
 3157 004c 7B68     		ldr	r3, [r7, #4]
 3158 004e 1B68     		ldr	r3, [r3]
 3159 0050 4FF4B262 		mov	r2, #1424
 3160 0054 0121     		movs	r1, #1
 3161 0056 3846     		mov	r0, r7
 3162 0058 9847     		blx	r3
 3163              	.LVL571:
 348:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3164              		.loc 1 348 0
ARM GAS  /tmp/ccDN7JHH.s 			page 83


 3165 005a 3060     		str	r0, [r6]
 3166              	.L286:
 351:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   dtbl->pub = htbl;		/* fill in back link */
 3167              		.loc 1 351 0
 3168 005c 3468     		ldr	r4, [r6]
 3169              	.LVL572:
 352:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   
 3170              		.loc 1 352 0
 3171 005e C4F88C50 		str	r5, [r4, #140]
 3172              	.LVL573:
 357:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     i = (int) htbl->bits[l];
 3173              		.loc 1 357 0
 3174 0062 4FF0010A 		mov	r10, #1
 356:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 3175              		.loc 1 356 0
 3176 0066 0026     		movs	r6, #0
 3177              	.LVL574:
 357:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     i = (int) htbl->bits[l];
 3178              		.loc 1 357 0
 3179 0068 12E0     		b	.L287
 3180              	.LVL575:
 3181              	.L283:
 342:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (htbl == NULL)
 3182              		.loc 1 342 0 discriminator 2
 3183 006a 04F13003 		add	r3, r4, #48
 3184 006e 07EB8303 		add	r3, r7, r3, lsl #2
 3185 0072 5D68     		ldr	r5, [r3, #4]
 3186 0074 DEE7     		b	.L284
 3187              	.LVL576:
 3188              	.L290:
 362:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 3189              		.loc 1 362 0
 3190 0076 0DF20442 		addw	r2, sp, #1028
 3191 007a 02F806A0 		strb	r10, [r2, r6]
 361:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       huffsize[p++] = (char) l;
 3192              		.loc 1 361 0
 3193 007e 9946     		mov	r9, r3
 362:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 3194              		.loc 1 362 0
 3195 0080 0136     		adds	r6, r6, #1
 3196              	.LVL577:
 3197              	.L289:
 361:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       huffsize[p++] = (char) l;
 3198              		.loc 1 361 0
 3199 0082 09F1FF33 		add	r3, r9, #-1
 3200              	.LVL578:
 3201 0086 B9F1000F 		cmp	r9, #0
 3202 008a F4D1     		bne	.L290
 357:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     i = (int) htbl->bits[l];
 3203              		.loc 1 357 0 discriminator 2
 3204 008c 0AF1010A 		add	r10, r10, #1
 3205              	.LVL579:
 3206              	.L287:
 357:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     i = (int) htbl->bits[l];
 3207              		.loc 1 357 0 is_stmt 0 discriminator 1
 3208 0090 BAF1100F 		cmp	r10, #16
 3209 0094 0EDC     		bgt	.L312
ARM GAS  /tmp/ccDN7JHH.s 			page 84


 358:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 3210              		.loc 1 358 0 is_stmt 1
 3211 0096 15F80A90 		ldrb	r9, [r5, r10]	@ zero_extendqisi2
 3212              	.LVL580:
 359:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 3213              		.loc 1 359 0
 3214 009a 06EB0903 		add	r3, r6, r9
 3215 009e B3F5807F 		cmp	r3, #256
 3216 00a2 EEDD     		ble	.L289
 360:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     while (i--)
 3217              		.loc 1 360 0
 3218 00a4 3B68     		ldr	r3, [r7]
 3219 00a6 0922     		movs	r2, #9
 3220 00a8 5A61     		str	r2, [r3, #20]
 3221 00aa 3B68     		ldr	r3, [r7]
 3222 00ac 1B68     		ldr	r3, [r3]
 3223 00ae 3846     		mov	r0, r7
 3224 00b0 9847     		blx	r3
 3225              	.LVL581:
 3226 00b2 E6E7     		b	.L289
 3227              	.LVL582:
 3228              	.L312:
 364:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   numsymbols = p;
 3229              		.loc 1 364 0
 3230 00b4 0DF20443 		addw	r3, sp, #1028
 3231 00b8 4FF00009 		mov	r9, #0
 3232 00bc 03F80690 		strb	r9, [r3, r6]
 3233              	.LVL583:
 371:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   p = 0;
 3234              		.loc 1 371 0
 3235 00c0 9DF804B4 		ldrb	fp, [sp, #1028]	@ zero_extendqisi2
 3236              	.LVL584:
 370:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   si = huffsize[0];
 3237              		.loc 1 370 0
 3238 00c4 CA46     		mov	r10, r9
 3239              	.LVL585:
 373:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 3240              		.loc 1 373 0
 3241 00c6 0FE0     		b	.L292
 3242              	.LVL586:
 3243              	.L314:
 381:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 3244              		.loc 1 381 0
 3245 00c8 0123     		movs	r3, #1
 3246 00ca 03FA0BF3 		lsl	r3, r3, fp
 3247 00ce 5345     		cmp	r3, r10
 3248 00d0 06DC     		bgt	.L294
 382:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     code <<= 1;
 3249              		.loc 1 382 0
 3250 00d2 3B68     		ldr	r3, [r7]
 3251 00d4 0922     		movs	r2, #9
 3252 00d6 5A61     		str	r2, [r3, #20]
 3253 00d8 3B68     		ldr	r3, [r7]
 3254 00da 1B68     		ldr	r3, [r3]
 3255 00dc 3846     		mov	r0, r7
 3256 00de 9847     		blx	r3
 3257              	.LVL587:
ARM GAS  /tmp/ccDN7JHH.s 			page 85


 3258              	.L294:
 383:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     si++;
 3259              		.loc 1 383 0
 3260 00e0 4FEA4A0A 		lsl	r10, r10, #1
 3261              	.LVL588:
 384:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
 3262              		.loc 1 384 0
 3263 00e4 0BF1010B 		add	fp, fp, #1
 3264              	.LVL589:
 3265              	.L292:
 373:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 3266              		.loc 1 373 0
 3267 00e8 0DF20443 		addw	r3, sp, #1028
 3268 00ec 13F80930 		ldrb	r3, [r3, r9]	@ zero_extendqisi2
 3269 00f0 63B1     		cbz	r3, .L313
 3270              	.L295:
 374:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       huffcode[p++] = code;
 3271              		.loc 1 374 0
 3272 00f2 0DF20443 		addw	r3, sp, #1028
 3273 00f6 13F80930 		ldrb	r3, [r3, r9]	@ zero_extendqisi2
 3274 00fa 5B45     		cmp	r3, fp
 3275 00fc E4D1     		bne	.L314
 3276              	.LVL590:
 375:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       code++;
 3277              		.loc 1 375 0
 3278 00fe 4DF829A0 		str	r10, [sp, r9, lsl #2]
 376:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 3279              		.loc 1 376 0
 3280 0102 0AF1010A 		add	r10, r10, #1
 3281              	.LVL591:
 375:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       code++;
 3282              		.loc 1 375 0
 3283 0106 09F10109 		add	r9, r9, #1
 3284              	.LVL592:
 3285 010a F2E7     		b	.L295
 3286              	.L313:
 390:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (htbl->bits[l]) {
 3287              		.loc 1 390 0
 3288 010c 0123     		movs	r3, #1
 389:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 3289              		.loc 1 389 0
 3290 010e 0022     		movs	r2, #0
 3291 0110 04E0     		b	.L296
 3292              	.LVL593:
 3293              	.L297:
 399:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 3294              		.loc 1 399 0
 3295 0112 4FF0FF31 		mov	r1, #-1
 3296 0116 44F82310 		str	r1, [r4, r3, lsl #2]
 3297              	.L298:
 390:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (htbl->bits[l]) {
 3298              		.loc 1 390 0 discriminator 2
 3299 011a 0133     		adds	r3, r3, #1
 3300              	.LVL594:
 3301              	.L296:
 390:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (htbl->bits[l]) {
 3302              		.loc 1 390 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccDN7JHH.s 			page 86


 3303 011c 102B     		cmp	r3, #16
 3304 011e 11DC     		bgt	.L315
 391:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* valoffset[l] = huffval[] index of 1st symbol of code length l,
 3305              		.loc 1 391 0 is_stmt 1
 3306 0120 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 3307 0122 0029     		cmp	r1, #0
 3308 0124 F5D0     		beq	.L297
 395:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       p += htbl->bits[l];
 3309              		.loc 1 395 0
 3310 0126 5DF82210 		ldr	r1, [sp, r2, lsl #2]
 3311 012a 511A     		subs	r1, r2, r1
 3312 012c 03F11200 		add	r0, r3, #18
 3313 0130 44F82010 		str	r1, [r4, r0, lsl #2]
 396:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 3314              		.loc 1 396 0
 3315 0134 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 3316 0136 0A44     		add	r2, r2, r1
 3317              	.LVL595:
 397:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     } else {
 3318              		.loc 1 397 0
 3319 0138 511E     		subs	r1, r2, #1
 3320 013a 5DF82110 		ldr	r1, [sp, r1, lsl #2]
 3321 013e 44F82310 		str	r1, [r4, r3, lsl #2]
 3322 0142 EAE7     		b	.L298
 3323              	.L315:
 402:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 3324              		.loc 1 402 0
 3325 0144 254B     		ldr	r3, .L318
 3326              	.LVL596:
 3327 0146 6364     		str	r3, [r4, #68]
 411:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 3328              		.loc 1 411 0
 3329 0148 4FF48062 		mov	r2, #1024
 3330              	.LVL597:
 3331 014c 0021     		movs	r1, #0
 3332 014e 04F19000 		add	r0, r4, #144
 3333 0152 FFF7FEFF 		bl	memset
 3334              	.LVL598:
 414:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 3335              		.loc 1 414 0
 3336 0156 4FF0010E 		mov	lr, #1
 413:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 3337              		.loc 1 413 0
 3338 015a 4FF0000C 		mov	ip, #0
 414:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 3339              		.loc 1 414 0
 3340 015e 1FE0     		b	.L300
 3341              	.LVL599:
 3342              	.L302:
 420:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	dtbl->look_sym[lookbits] = htbl->huffval[p];
 3343              		.loc 1 420 0 discriminator 3
 3344 0160 03F12401 		add	r1, r3, #36
 3345 0164 44F821E0 		str	lr, [r4, r1, lsl #2]
 421:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	lookbits++;
 3346              		.loc 1 421 0 discriminator 3
 3347 0168 05EB0C01 		add	r1, r5, ip
 3348 016c 487C     		ldrb	r0, [r1, #17]	@ zero_extendqisi2
ARM GAS  /tmp/ccDN7JHH.s 			page 87


 3349 016e E118     		adds	r1, r4, r3
 3350 0170 81F89004 		strb	r0, [r1, #1168]
 422:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 3351              		.loc 1 422 0 discriminator 3
 3352 0174 0133     		adds	r3, r3, #1
 3353              	.LVL600:
 419:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 3354              		.loc 1 419 0 discriminator 3
 3355 0176 013A     		subs	r2, r2, #1
 3356              	.LVL601:
 3357              	.L301:
 419:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 3358              		.loc 1 419 0 is_stmt 0 discriminator 1
 3359 0178 002A     		cmp	r2, #0
 3360 017a F1DC     		bgt	.L302
 415:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 3361              		.loc 1 415 0 is_stmt 1 discriminator 2
 3362 017c 09F10109 		add	r9, r9, #1
 3363              	.LVL602:
 3364 0180 0CF1010C 		add	ip, ip, #1
 3365              	.LVL603:
 3366              	.L304:
 415:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 3367              		.loc 1 415 0 is_stmt 0 discriminator 1
 3368 0184 15F80E30 		ldrb	r3, [r5, lr]	@ zero_extendqisi2
 3369 0188 4B45     		cmp	r3, r9
 3370 018a 07DB     		blt	.L316
 418:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 3371              		.loc 1 418 0 is_stmt 1
 3372 018c 5DF82C30 		ldr	r3, [sp, ip, lsl #2]
 3373 0190 CEF10801 		rsb	r1, lr, #8
 3374 0194 8B40     		lsls	r3, r3, r1
 3375              	.LVL604:
 419:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 3376              		.loc 1 419 0
 3377 0196 0122     		movs	r2, #1
 3378 0198 8A40     		lsls	r2, r2, r1
 3379              	.LVL605:
 3380 019a EDE7     		b	.L301
 3381              	.LVL606:
 3382              	.L316:
 414:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 3383              		.loc 1 414 0 discriminator 2
 3384 019c 0EF1010E 		add	lr, lr, #1
 3385              	.LVL607:
 3386              	.L300:
 414:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 3387              		.loc 1 414 0 is_stmt 0 discriminator 1
 3388 01a0 BEF1080F 		cmp	lr, #8
 3389 01a4 02DC     		bgt	.L317
 415:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 3390              		.loc 1 415 0 is_stmt 1
 3391 01a6 4FF00109 		mov	r9, #1
 3392 01aa EBE7     		b	.L304
 3393              	.L317:
 433:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (i = 0; i < numsymbols; i++) {
 3394              		.loc 1 433 0
ARM GAS  /tmp/ccDN7JHH.s 			page 88


 3395 01ac B8F1000F 		cmp	r8, #0
 3396 01b0 10D0     		beq	.L281
 434:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int sym = htbl->huffval[i];
 3397              		.loc 1 434 0
 3398 01b2 0024     		movs	r4, #0
 3399              	.LVL608:
 3400 01b4 00E0     		b	.L305
 3401              	.LVL609:
 3402              	.L307:
 434:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int sym = htbl->huffval[i];
 3403              		.loc 1 434 0 is_stmt 0 discriminator 2
 3404 01b6 0134     		adds	r4, r4, #1
 3405              	.LVL610:
 3406              	.L305:
 434:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int sym = htbl->huffval[i];
 3407              		.loc 1 434 0 discriminator 1
 3408 01b8 A642     		cmp	r6, r4
 3409 01ba 0BDD     		ble	.L281
 3410              	.LBB37:
 435:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (sym < 0 || sym > 15)
 3411              		.loc 1 435 0 is_stmt 1
 3412 01bc 2B19     		adds	r3, r5, r4
 3413 01be 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3414              	.LVL611:
 436:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 3415              		.loc 1 436 0
 3416 01c0 0F2B     		cmp	r3, #15
 3417 01c2 F8D9     		bls	.L307
 437:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 3418              		.loc 1 437 0
 3419 01c4 3B68     		ldr	r3, [r7]
 3420              	.LVL612:
 3421 01c6 0922     		movs	r2, #9
 3422 01c8 5A61     		str	r2, [r3, #20]
 3423              	.LVL613:
 3424 01ca 3B68     		ldr	r3, [r7]
 3425 01cc 1B68     		ldr	r3, [r3]
 3426 01ce 3846     		mov	r0, r7
 3427 01d0 9847     		blx	r3
 3428              	.LVL614:
 3429 01d2 F0E7     		b	.L307
 3430              	.LVL615:
 3431              	.L281:
 3432              	.LBE37:
 440:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 3433              		.loc 1 440 0
 3434 01d4 0DF20C5D 		addw	sp, sp, #1292
 3435              	.LCFI28:
 3436              		.cfi_def_cfa_offset 36
 3437              		@ sp needed
 3438 01d8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3439              	.LVL616:
 3440              	.L319:
 3441              		.align	2
 3442              	.L318:
 3443 01dc FFFF0F00 		.word	1048575
 3444              		.cfi_endproc
ARM GAS  /tmp/ccDN7JHH.s 			page 89


 3445              	.LFE3:
 3447              		.section	.text.start_pass_huff_decoder,"ax",%progbits
 3448              		.align	1
 3449              		.syntax unified
 3450              		.thumb
 3451              		.thumb_func
 3452              		.fpu fpv5-sp-d16
 3454              	start_pass_huff_decoder:
 3455              	.LFB13:
1303:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1304:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1305:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
1306:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Initialize for a Huffman-compressed scan.
1307:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
1308:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1309:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** METHODDEF(void)
1310:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** start_pass_huff_decoder (j_decompress_ptr cinfo)
1311:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {
 3456              		.loc 1 1311 0
 3457              		.cfi_startproc
 3458              		@ args = 0, pretend = 0, frame = 0
 3459              		@ frame_needed = 0, uses_anonymous_args = 0
 3460              	.LVL617:
 3461 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3462              	.LCFI29:
 3463              		.cfi_def_cfa_offset 32
 3464              		.cfi_offset 4, -32
 3465              		.cfi_offset 5, -28
 3466              		.cfi_offset 6, -24
 3467              		.cfi_offset 7, -20
 3468              		.cfi_offset 8, -16
 3469              		.cfi_offset 9, -12
 3470              		.cfi_offset 10, -8
 3471              		.cfi_offset 14, -4
 3472 0004 0446     		mov	r4, r0
1312:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3473              		.loc 1 1312 0
 3474 0006 D0F8D061 		ldr	r6, [r0, #464]
 3475              	.LVL618:
1313:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int ci, blkn, tbl, i;
1314:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   jpeg_component_info * compptr;
1315:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1316:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->progressive_mode) {
 3476              		.loc 1 1316 0
 3477 000a D0F8E030 		ldr	r3, [r0, #224]
 3478 000e 002B     		cmp	r3, #0
 3479 0010 00F0D480 		beq	.L321
1317:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Validate progressive scan parameters */
1318:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (cinfo->Ss == 0) {
 3480              		.loc 1 1318 0
 3481 0014 D0F89831 		ldr	r3, [r0, #408]
 3482 0018 43BB     		cbnz	r3, .L322
1319:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->Se != 0)
 3483              		.loc 1 1319 0
 3484 001a D0F89C31 		ldr	r3, [r0, #412]
 3485 001e 5BB9     		cbnz	r3, .L323
 3486              	.L324:
ARM GAS  /tmp/ccDN7JHH.s 			page 90


1320:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	goto bad;
1321:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     } else {
1322:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* need not check Ss/Se < 0 since they came from unsigned bytes */
1323:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
1324:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	goto bad;
1325:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* AC scans may have only one component */
1326:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->comps_in_scan != 1)
1327:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	goto bad;
1328:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1329:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (cinfo->Ah != 0) {
 3487              		.loc 1 1329 0
 3488 0020 D4F8A031 		ldr	r3, [r4, #416]
 3489 0024 23B1     		cbz	r3, .L325
1330:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Successive approximation refinement scan: must have Al = Ah-1. */
1331:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->Ah-1 != cinfo->Al)
 3490              		.loc 1 1331 0
 3491 0026 013B     		subs	r3, r3, #1
 3492 0028 D4F8A421 		ldr	r2, [r4, #420]
 3493 002c 9342     		cmp	r3, r2
 3494 002e 03D1     		bne	.L323
 3495              	.L325:
1332:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	goto bad;
1333:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1334:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (cinfo->Al > 13) {	/* need not check for < 0 */
 3496              		.loc 1 1334 0
 3497 0030 D4F8A431 		ldr	r3, [r4, #420]
 3498 0034 0D2B     		cmp	r3, #13
 3499 0036 16DD     		ble	.L326
 3500              	.L323:
1335:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
1336:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * but the spec doesn't say so, and we try to be liberal about what we
1337:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * accept.  Note: large Al values could result in out-of-range DC
1338:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * coefficients during early scans, leading to bizarre displays due to
1339:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * overflows in the IDCT math.  But we won't crash.
1340:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        */
1341:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       bad:
1342:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 3501              		.loc 1 1342 0
 3502 0038 2368     		ldr	r3, [r4]
 3503 003a 1122     		movs	r2, #17
 3504 003c 5A61     		str	r2, [r3, #20]
 3505 003e 2368     		ldr	r3, [r4]
 3506 0040 D4F89821 		ldr	r2, [r4, #408]
 3507 0044 9A61     		str	r2, [r3, #24]
 3508 0046 2368     		ldr	r3, [r4]
 3509 0048 D4F89C21 		ldr	r2, [r4, #412]
 3510 004c DA61     		str	r2, [r3, #28]
 3511 004e 2368     		ldr	r3, [r4]
 3512 0050 D4F8A021 		ldr	r2, [r4, #416]
 3513 0054 1A62     		str	r2, [r3, #32]
 3514 0056 2368     		ldr	r3, [r4]
 3515 0058 D4F8A421 		ldr	r2, [r4, #420]
 3516 005c 5A62     		str	r2, [r3, #36]
 3517 005e 2368     		ldr	r3, [r4]
 3518 0060 1B68     		ldr	r3, [r3]
 3519 0062 2046     		mov	r0, r4
 3520              	.LVL619:
ARM GAS  /tmp/ccDN7JHH.s 			page 91


 3521 0064 9847     		blx	r3
 3522              	.LVL620:
 3523              	.L326:
1311:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3524              		.loc 1 1311 0 discriminator 1
 3525 0066 4FF0000A 		mov	r10, #0
 3526 006a 30E0     		b	.L327
 3527              	.LVL621:
 3528              	.L322:
1323:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	goto bad;
 3529              		.loc 1 1323 0
 3530 006c D0F89C21 		ldr	r2, [r0, #412]
 3531 0070 9342     		cmp	r3, r2
 3532 0072 E1DC     		bgt	.L323
1323:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	goto bad;
 3533              		.loc 1 1323 0 is_stmt 0 discriminator 1
 3534 0074 D0F8B031 		ldr	r3, [r0, #432]
 3535 0078 9A42     		cmp	r2, r3
 3536 007a DDDC     		bgt	.L323
1326:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	goto bad;
 3537              		.loc 1 1326 0 is_stmt 1
 3538 007c D0F85031 		ldr	r3, [r0, #336]
 3539 0080 012B     		cmp	r3, #1
 3540 0082 D9D1     		bne	.L323
 3541 0084 CCE7     		b	.L324
 3542              	.LVL622:
 3543              	.L330:
 3544              	.LBB38:
 3545              	.LBB39:
1343:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	       cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
1344:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1345:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Update progression status, and verify that scan order is legal.
1346:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * Note that inter-scan inconsistencies are treated as warnings
1347:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * not fatal errors ... not clear if this is right way to behave.
1348:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      */
1349:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
1350:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
1351:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
1352:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
1353:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
1354:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
1355:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
1356:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (cinfo->Ah != expected)
1357:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
1358:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	coef_bit_ptr[coefi] = cinfo->Al;
 3546              		.loc 1 1358 0 discriminator 2
 3547 0086 D4F8A431 		ldr	r3, [r4, #420]
 3548 008a 47F80830 		str	r3, [r7, r8]
 3549              	.LBE39:
1354:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 3550              		.loc 1 1354 0 discriminator 2
 3551 008e 0135     		adds	r5, r5, #1
 3552              	.LVL623:
 3553              	.L329:
1354:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 3554              		.loc 1 1354 0 is_stmt 0 discriminator 1
 3555 0090 D4F89C31 		ldr	r3, [r4, #412]
ARM GAS  /tmp/ccDN7JHH.s 			page 92


 3556 0094 AB42     		cmp	r3, r5
 3557 0096 18DB     		blt	.L392
 3558              	.LBB40:
1355:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (cinfo->Ah != expected)
 3559              		.loc 1 1355 0 is_stmt 1
 3560 0098 4FEA8508 		lsl	r8, r5, #2
 3561 009c 57F82530 		ldr	r3, [r7, r5, lsl #2]
 3562 00a0 23EAE373 		bic	r3, r3, r3, asr #31
 3563              	.LVL624:
1356:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 3564              		.loc 1 1356 0
 3565 00a4 D4F8A021 		ldr	r2, [r4, #416]
 3566 00a8 9A42     		cmp	r2, r3
 3567 00aa ECD0     		beq	.L330
1357:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	coef_bit_ptr[coefi] = cinfo->Al;
 3568              		.loc 1 1357 0
 3569 00ac 2368     		ldr	r3, [r4]
 3570              	.LVL625:
 3571 00ae 7622     		movs	r2, #118
 3572 00b0 5A61     		str	r2, [r3, #20]
 3573              	.LVL626:
 3574 00b2 2368     		ldr	r3, [r4]
 3575 00b4 C3F81890 		str	r9, [r3, #24]
 3576 00b8 2368     		ldr	r3, [r4]
 3577 00ba DD61     		str	r5, [r3, #28]
 3578 00bc 2368     		ldr	r3, [r4]
 3579 00be 5B68     		ldr	r3, [r3, #4]
 3580 00c0 4FF0FF31 		mov	r1, #-1
 3581 00c4 2046     		mov	r0, r4
 3582 00c6 9847     		blx	r3
 3583              	.LVL627:
 3584 00c8 DDE7     		b	.L330
 3585              	.L392:
 3586              	.LBE40:
 3587              	.LBE38:
1349:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 3588              		.loc 1 1349 0 discriminator 2
 3589 00ca 0AF1010A 		add	r10, r10, #1
 3590              	.LVL628:
 3591              	.L327:
1349:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 3592              		.loc 1 1349 0 is_stmt 0 discriminator 1
 3593 00ce D4F85031 		ldr	r3, [r4, #336]
 3594 00d2 5345     		cmp	r3, r10
 3595 00d4 23DD     		ble	.L393
 3596              	.LBB41:
1350:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 3597              		.loc 1 1350 0 is_stmt 1
 3598 00d6 0AF15403 		add	r3, r10, #84
 3599 00da 04EB8303 		add	r3, r4, r3, lsl #2
 3600 00de 5B68     		ldr	r3, [r3, #4]
 3601 00e0 D3F80490 		ldr	r9, [r3, #4]
 3602              	.LVL629:
1351:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 3603              		.loc 1 1351 0
 3604 00e4 D4F8A020 		ldr	r2, [r4, #160]
 3605 00e8 4FEA0923 		lsl	r3, r9, #8
ARM GAS  /tmp/ccDN7JHH.s 			page 93


 3606 00ec D718     		adds	r7, r2, r3
 3607              	.LVL630:
1352:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 3608              		.loc 1 1352 0
 3609 00ee D4F89811 		ldr	r1, [r4, #408]
 3610 00f2 89B1     		cbz	r1, .L328
1352:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 3611              		.loc 1 1352 0 is_stmt 0 discriminator 1
 3612 00f4 D358     		ldr	r3, [r2, r3]
 3613 00f6 002B     		cmp	r3, #0
 3614 00f8 0EDA     		bge	.L328
1353:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 3615              		.loc 1 1353 0 is_stmt 1
 3616 00fa 2368     		ldr	r3, [r4]
 3617 00fc 7622     		movs	r2, #118
 3618 00fe 5A61     		str	r2, [r3, #20]
 3619 0100 2368     		ldr	r3, [r4]
 3620 0102 C3F81890 		str	r9, [r3, #24]
 3621 0106 2368     		ldr	r3, [r4]
 3622 0108 0022     		movs	r2, #0
 3623 010a DA61     		str	r2, [r3, #28]
 3624 010c 2368     		ldr	r3, [r4]
 3625 010e 5B68     		ldr	r3, [r3, #4]
 3626 0110 4FF0FF31 		mov	r1, #-1
 3627 0114 2046     		mov	r0, r4
 3628 0116 9847     		blx	r3
 3629              	.LVL631:
 3630              	.L328:
1354:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 3631              		.loc 1 1354 0
 3632 0118 D4F89851 		ldr	r5, [r4, #408]
 3633              	.LVL632:
 3634 011c B8E7     		b	.L329
 3635              	.LVL633:
 3636              	.L393:
 3637              	.LBE41:
1359:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1360:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1361:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1362:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Select MCU decoding routine */
1363:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (cinfo->Ah == 0) {
 3638              		.loc 1 1363 0
 3639 011e D4F8A031 		ldr	r3, [r4, #416]
 3640 0122 4BB9     		cbnz	r3, .L333
1364:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->Ss == 0)
 3641              		.loc 1 1364 0
 3642 0124 D4F89831 		ldr	r3, [r4, #408]
 3643 0128 1BB9     		cbnz	r3, .L334
1365:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_DC_first;
 3644              		.loc 1 1365 0
 3645 012a 9E4B     		ldr	r3, .L397
 3646 012c 7360     		str	r3, [r6, #4]
 3647              	.L335:
1311:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3648              		.loc 1 1311 0 discriminator 1
 3649 012e 0025     		movs	r5, #0
 3650 0130 1DE0     		b	.L337
ARM GAS  /tmp/ccDN7JHH.s 			page 94


 3651              	.L334:
1366:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       else
1367:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_AC_first;
 3652              		.loc 1 1367 0
 3653 0132 9D4B     		ldr	r3, .L397+4
 3654 0134 7360     		str	r3, [r6, #4]
 3655 0136 FAE7     		b	.L335
 3656              	.L333:
1368:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     } else {
1369:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->Ss == 0)
 3657              		.loc 1 1369 0
 3658 0138 D4F89831 		ldr	r3, [r4, #408]
 3659 013c 13B9     		cbnz	r3, .L336
1370:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 3660              		.loc 1 1370 0
 3661 013e 9B4B     		ldr	r3, .L397+8
 3662 0140 7360     		str	r3, [r6, #4]
 3663 0142 F4E7     		b	.L335
 3664              	.L336:
1371:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       else
1372:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 3665              		.loc 1 1372 0
 3666 0144 9A4B     		ldr	r3, .L397+12
 3667 0146 7360     		str	r3, [r6, #4]
 3668 0148 F1E7     		b	.L335
 3669              	.LVL634:
 3670              	.L338:
1373:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1374:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1375:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
1376:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
1377:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Make sure requested tables are present, and compute derived tables.
1378:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        * We may build same derived table more than once, but it's not expensive.
1379:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****        */
1380:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->Ss == 0) {
1381:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
1382:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  tbl = compptr->dc_tbl_no;
1383:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
1384:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				  & entropy->derived_tbls[tbl]);
1385:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1386:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       } else {
1387:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	tbl = compptr->ac_tbl_no;
 3671              		.loc 1 1387 0
 3672 014a 9269     		ldr	r2, [r2, #24]
 3673              	.LVL635:
1388:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 3674              		.loc 1 1388 0
 3675 014c 02F10A07 		add	r7, r2, #10
 3676 0150 06EB8707 		add	r7, r6, r7, lsl #2
 3677 0154 3B1D     		adds	r3, r7, #4
 3678 0156 0021     		movs	r1, #0
 3679 0158 2046     		mov	r0, r4
 3680 015a FFF7FEFF 		bl	jpeg_make_d_derived_tbl
 3681              	.LVL636:
1389:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				& entropy->derived_tbls[tbl]);
1390:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	/* remember the single active table */
1391:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
ARM GAS  /tmp/ccDN7JHH.s 			page 95


 3682              		.loc 1 1391 0
 3683 015e 7B68     		ldr	r3, [r7, #4]
 3684 0160 F363     		str	r3, [r6, #60]
 3685              	.L339:
1392:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1393:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Initialize DC predictions to 0 */
1394:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 3686              		.loc 1 1394 0 discriminator 2
 3687 0162 2B1D     		adds	r3, r5, #4
 3688 0164 06EB8303 		add	r3, r6, r3, lsl #2
 3689 0168 0022     		movs	r2, #0
 3690 016a 5A60     		str	r2, [r3, #4]
1375:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 3691              		.loc 1 1375 0 discriminator 2
 3692 016c 0135     		adds	r5, r5, #1
 3693              	.LVL637:
 3694              	.L337:
1375:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 3695              		.loc 1 1375 0 is_stmt 0 discriminator 1
 3696 016e D4F85031 		ldr	r3, [r4, #336]
 3697 0172 AB42     		cmp	r3, r5
 3698 0174 17DD     		ble	.L394
1376:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Make sure requested tables are present, and compute derived tables.
 3699              		.loc 1 1376 0 is_stmt 1
 3700 0176 05F15403 		add	r3, r5, #84
 3701 017a 04EB8303 		add	r3, r4, r3, lsl #2
 3702 017e 5A68     		ldr	r2, [r3, #4]
 3703              	.LVL638:
1380:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 3704              		.loc 1 1380 0
 3705 0180 D4F89831 		ldr	r3, [r4, #408]
 3706 0184 002B     		cmp	r3, #0
 3707 0186 E0D1     		bne	.L338
1381:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  tbl = compptr->dc_tbl_no;
 3708              		.loc 1 1381 0
 3709 0188 D4F8A031 		ldr	r3, [r4, #416]
 3710 018c 002B     		cmp	r3, #0
 3711 018e E8D1     		bne	.L339
1382:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 3712              		.loc 1 1382 0
 3713 0190 5269     		ldr	r2, [r2, #20]
 3714              	.LVL639:
1383:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				  & entropy->derived_tbls[tbl]);
 3715              		.loc 1 1383 0
 3716 0192 02F10A03 		add	r3, r2, #10
 3717 0196 06EB8303 		add	r3, r6, r3, lsl #2
 3718 019a 0433     		adds	r3, r3, #4
 3719 019c 0121     		movs	r1, #1
 3720 019e 2046     		mov	r0, r4
 3721 01a0 FFF7FEFF 		bl	jpeg_make_d_derived_tbl
 3722              	.LVL640:
 3723 01a4 DDE7     		b	.L339
 3724              	.L394:
1395:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1396:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1397:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Initialize private state variables */
1398:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     entropy->saved.EOBRUN = 0;
ARM GAS  /tmp/ccDN7JHH.s 			page 96


 3725              		.loc 1 1398 0
 3726 01a6 0023     		movs	r3, #0
 3727 01a8 3361     		str	r3, [r6, #16]
 3728              	.LVL641:
 3729              	.L341:
1399:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   } else {
1400:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
1401:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * This ought to be an error condition, but we make it a warning because
1402:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * there are some baseline files out there with all zeroes in these bytes.
1403:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      */
1404:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
1405:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
1406:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
1407:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
1408:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1409:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Select MCU decoding routine */
1410:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* We retain the hard-coded case for full-size blocks.
1411:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * This is not necessary, but it appears that this version is slightly
1412:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * more performant in the given implementation.
1413:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * With an improved implementation we would prefer a single optimized
1414:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      * function.
1415:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****      */
1416:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     if (cinfo->lim_Se != DCTSIZE2-1)
1417:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->pub.decode_mcu = decode_mcu_sub;
1418:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     else
1419:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->pub.decode_mcu = decode_mcu;
1420:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1421:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
1422:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
1423:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Compute derived values for Huffman tables */
1424:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* We may do this more than once for a table, but it's not expensive */
1425:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       tbl = compptr->dc_tbl_no;
1426:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
1427:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 			      & entropy->dc_derived_tbls[tbl]);
1428:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (cinfo->lim_Se) {	/* AC needs no table when not present */
1429:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	tbl = compptr->ac_tbl_no;
1430:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
1431:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				& entropy->ac_derived_tbls[tbl]);
1432:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1433:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Initialize DC predictions to 0 */
1434:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->saved.last_dc_val[ci] = 0;
1435:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1436:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1437:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Precalculate decoding info for each block in an MCU of this scan */
1438:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
1439:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
1440:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
1441:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Precalculate which table to use for each block */
1442:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
1443:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
1444:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Decide whether we really care about the coefficient values */
1445:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       if (compptr->component_needed) {
1446:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	ci = compptr->DCT_v_scaled_size;
1447:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	i = compptr->DCT_h_scaled_size;
1448:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	switch (cinfo->lim_Se) {
1449:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (1*1-1):
1450:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1;
ARM GAS  /tmp/ccDN7JHH.s 			page 97


1451:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
1452:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (2*2-1):
1453:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (ci <= 0 || ci > 2) ci = 2;
1454:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 2) i = 2;
1455:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
1456:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
1457:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (3*3-1):
1458:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (ci <= 0 || ci > 3) ci = 3;
1459:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 3) i = 3;
1460:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
1461:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
1462:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (4*4-1):
1463:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (ci <= 0 || ci > 4) ci = 4;
1464:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 4) i = 4;
1465:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
1466:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
1467:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (5*5-1):
1468:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (ci <= 0 || ci > 5) ci = 5;
1469:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 5) i = 5;
1470:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
1471:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
1472:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (6*6-1):
1473:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (ci <= 0 || ci > 6) ci = 6;
1474:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 6) i = 6;
1475:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
1476:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
1477:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (7*7-1):
1478:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (ci <= 0 || ci > 7) ci = 7;
1479:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 7) i = 7;
1480:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
1481:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
1482:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	default:
1483:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (ci <= 0 || ci > 8) ci = 8;
1484:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 8) i = 8;
1485:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
1486:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
1487:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
1488:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       } else {
1489:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	entropy->coef_limit[blkn] = 0;
1490:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
1491:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1492:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
1493:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1494:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Initialize bitread state variables */
1495:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 3730              		.loc 1 1495 0
 3731 01aa 0023     		movs	r3, #0
 3732 01ac F360     		str	r3, [r6, #12]
1496:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 3733              		.loc 1 1496 0
 3734 01ae B360     		str	r3, [r6, #8]
1497:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->insufficient_data = FALSE;
 3735              		.loc 1 1497 0
 3736 01b0 7362     		str	r3, [r6, #36]
1498:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1499:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   /* Initialize restart counter */
1500:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->restarts_to_go = cinfo->restart_interval;
ARM GAS  /tmp/ccDN7JHH.s 			page 98


 3737              		.loc 1 1500 0
 3738 01b2 D4F81831 		ldr	r3, [r4, #280]
 3739 01b6 B362     		str	r3, [r6, #40]
1501:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 3740              		.loc 1 1501 0
 3741 01b8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3742              	.LVL642:
 3743              	.L321:
1404:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 3744              		.loc 1 1404 0
 3745 01bc D0F89831 		ldr	r3, [r0, #408]
 3746 01c0 83B1     		cbz	r3, .L395
 3747              	.L342:
1407:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 3748              		.loc 1 1407 0
 3749 01c2 2368     		ldr	r3, [r4]
 3750 01c4 7D22     		movs	r2, #125
 3751 01c6 5A61     		str	r2, [r3, #20]
 3752 01c8 2368     		ldr	r3, [r4]
 3753 01ca 5B68     		ldr	r3, [r3, #4]
 3754 01cc 4FF0FF31 		mov	r1, #-1
 3755 01d0 2046     		mov	r0, r4
 3756              	.LVL643:
 3757 01d2 9847     		blx	r3
 3758              	.LVL644:
 3759              	.L344:
1416:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->pub.decode_mcu = decode_mcu_sub;
 3760              		.loc 1 1416 0
 3761 01d4 D4F8B031 		ldr	r3, [r4, #432]
 3762 01d8 3F2B     		cmp	r3, #63
 3763 01da 19D0     		beq	.L345
1417:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     else
 3764              		.loc 1 1417 0
 3765 01dc 754B     		ldr	r3, .L397+16
 3766 01de 7360     		str	r3, [r6, #4]
 3767              	.L347:
1311:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3768              		.loc 1 1311 0 discriminator 1
 3769 01e0 0025     		movs	r5, #0
 3770 01e2 1EE0     		b	.L346
 3771              	.LVL645:
 3772              	.L395:
1404:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 3773              		.loc 1 1404 0 discriminator 1
 3774 01e4 D0F8A031 		ldr	r3, [r0, #416]
 3775 01e8 002B     		cmp	r3, #0
 3776 01ea EAD1     		bne	.L342
1404:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 3777              		.loc 1 1404 0 is_stmt 0 discriminator 2
 3778 01ec D0F8A431 		ldr	r3, [r0, #420]
 3779 01f0 002B     		cmp	r3, #0
 3780 01f2 E6D1     		bne	.L342
1405:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
 3781              		.loc 1 1405 0 is_stmt 1 discriminator 3
 3782 01f4 D0F8DC30 		ldr	r3, [r0, #220]
1404:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 3783              		.loc 1 1404 0 discriminator 3
ARM GAS  /tmp/ccDN7JHH.s 			page 99


 3784 01f8 1BB9     		cbnz	r3, .L343
1405:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
 3785              		.loc 1 1405 0
 3786 01fa D0F89C31 		ldr	r3, [r0, #412]
 3787 01fe 3F2B     		cmp	r3, #63
 3788 0200 E8DC     		bgt	.L344
 3789              	.L343:
1406:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 3790              		.loc 1 1406 0 discriminator 1
 3791 0202 D4F89C21 		ldr	r2, [r4, #412]
 3792 0206 D4F8B031 		ldr	r3, [r4, #432]
1405:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
 3793              		.loc 1 1405 0 discriminator 1
 3794 020a 9A42     		cmp	r2, r3
 3795 020c D9D1     		bne	.L342
 3796 020e E1E7     		b	.L344
 3797              	.LVL646:
 3798              	.L345:
1419:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
 3799              		.loc 1 1419 0
 3800 0210 694B     		ldr	r3, .L397+20
 3801 0212 7360     		str	r3, [r6, #4]
 3802 0214 E4E7     		b	.L347
 3803              	.LVL647:
 3804              	.L348:
1434:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 3805              		.loc 1 1434 0 discriminator 2
 3806 0216 2B1D     		adds	r3, r5, #4
 3807 0218 06EB8303 		add	r3, r6, r3, lsl #2
 3808 021c 0022     		movs	r2, #0
 3809 021e 5A60     		str	r2, [r3, #4]
1421:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 3810              		.loc 1 1421 0 discriminator 2
 3811 0220 0135     		adds	r5, r5, #1
 3812              	.LVL648:
 3813              	.L346:
1421:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 3814              		.loc 1 1421 0 is_stmt 0 discriminator 1
 3815 0222 D4F85031 		ldr	r3, [r4, #336]
 3816 0226 AB42     		cmp	r3, r5
 3817 0228 1BDD     		ble	.L396
1422:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Compute derived values for Huffman tables */
 3818              		.loc 1 1422 0 is_stmt 1
 3819 022a 05F15403 		add	r3, r5, #84
 3820 022e 04EB8303 		add	r3, r4, r3, lsl #2
 3821 0232 5F68     		ldr	r7, [r3, #4]
 3822              	.LVL649:
1425:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 3823              		.loc 1 1425 0
 3824 0234 7A69     		ldr	r2, [r7, #20]
 3825              	.LVL650:
1426:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 			      & entropy->dc_derived_tbls[tbl]);
 3826              		.loc 1 1426 0
 3827 0236 02F11003 		add	r3, r2, #16
 3828 023a 06EB8303 		add	r3, r6, r3, lsl #2
 3829 023e 0121     		movs	r1, #1
 3830 0240 2046     		mov	r0, r4
ARM GAS  /tmp/ccDN7JHH.s 			page 100


 3831 0242 FFF7FEFF 		bl	jpeg_make_d_derived_tbl
 3832              	.LVL651:
1428:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	tbl = compptr->ac_tbl_no;
 3833              		.loc 1 1428 0
 3834 0246 D4F8B031 		ldr	r3, [r4, #432]
 3835 024a 002B     		cmp	r3, #0
 3836 024c E3D0     		beq	.L348
1429:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 3837              		.loc 1 1429 0
 3838 024e BA69     		ldr	r2, [r7, #24]
 3839              	.LVL652:
1430:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				& entropy->ac_derived_tbls[tbl]);
 3840              		.loc 1 1430 0
 3841 0250 02F11403 		add	r3, r2, #20
 3842 0254 06EB8303 		add	r3, r6, r3, lsl #2
 3843 0258 0021     		movs	r1, #0
 3844 025a 2046     		mov	r0, r4
 3845 025c FFF7FEFF 		bl	jpeg_make_d_derived_tbl
 3846              	.LVL653:
 3847 0260 D9E7     		b	.L348
 3848              	.LVL654:
 3849              	.L396:
1438:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 3850              		.loc 1 1438 0
 3851 0262 0023     		movs	r3, #0
 3852 0264 BEE0     		b	.L350
 3853              	.LVL655:
 3854              	.L353:
1450:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
 3855              		.loc 1 1450 0
 3856 0266 03F12C02 		add	r2, r3, #44
 3857              	.LVL656:
 3858 026a 0121     		movs	r1, #1
 3859              	.LVL657:
 3860 026c 46F82210 		str	r1, [r6, r2, lsl #2]
1451:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (2*2-1):
 3861              		.loc 1 1451 0
 3862 0270 B7E0     		b	.L361
 3863              	.LVL658:
 3864              	.L355:
1453:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 2) i = 2;
 3865              		.loc 1 1453 0
 3866 0272 481E     		subs	r0, r1, #1
 3867 0274 0128     		cmp	r0, #1
 3868 0276 00D9     		bls	.L362
 3869 0278 0221     		movs	r1, #2
 3870              	.LVL659:
 3871              	.L362:
1454:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 3872              		.loc 1 1454 0
 3873 027a 501E     		subs	r0, r2, #1
 3874 027c 0128     		cmp	r0, #1
 3875 027e 00D9     		bls	.L363
 3876 0280 0222     		movs	r2, #2
 3877              	.LVL660:
 3878              	.L363:
1455:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
ARM GAS  /tmp/ccDN7JHH.s 			page 101


 3879              		.loc 1 1455 0
 3880 0282 0139     		subs	r1, r1, #1
 3881              	.LVL661:
 3882 0284 013A     		subs	r2, r2, #1
 3883              	.LVL662:
 3884 0286 02EB4102 		add	r2, r2, r1, lsl #1
 3885              	.LVL663:
 3886 028a 4C49     		ldr	r1, .L397+24
 3887              	.LVL664:
 3888 028c 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3889 0290 0132     		adds	r2, r2, #1
 3890 0292 03F12C01 		add	r1, r3, #44
 3891 0296 46F82120 		str	r2, [r6, r1, lsl #2]
1456:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (3*3-1):
 3892              		.loc 1 1456 0
 3893 029a A2E0     		b	.L361
 3894              	.LVL665:
 3895              	.L356:
1458:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 3) i = 3;
 3896              		.loc 1 1458 0
 3897 029c 481E     		subs	r0, r1, #1
 3898 029e 0228     		cmp	r0, #2
 3899 02a0 00D9     		bls	.L364
 3900 02a2 0321     		movs	r1, #3
 3901              	.LVL666:
 3902              	.L364:
1459:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 3903              		.loc 1 1459 0
 3904 02a4 501E     		subs	r0, r2, #1
 3905 02a6 0228     		cmp	r0, #2
 3906 02a8 00D9     		bls	.L365
 3907 02aa 0322     		movs	r2, #3
 3908              	.LVL667:
 3909              	.L365:
1460:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
 3910              		.loc 1 1460 0
 3911 02ac 0139     		subs	r1, r1, #1
 3912              	.LVL668:
 3913 02ae 013A     		subs	r2, r2, #1
 3914              	.LVL669:
 3915 02b0 01EB4101 		add	r1, r1, r1, lsl #1
 3916              	.LVL670:
 3917 02b4 0A44     		add	r2, r2, r1
 3918              	.LVL671:
 3919 02b6 4249     		ldr	r1, .L397+28
 3920 02b8 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3921 02bc 0132     		adds	r2, r2, #1
 3922 02be 03F12C01 		add	r1, r3, #44
 3923 02c2 46F82120 		str	r2, [r6, r1, lsl #2]
1461:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (4*4-1):
 3924              		.loc 1 1461 0
 3925 02c6 8CE0     		b	.L361
 3926              	.LVL672:
 3927              	.L357:
1463:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 4) i = 4;
 3928              		.loc 1 1463 0
 3929 02c8 481E     		subs	r0, r1, #1
ARM GAS  /tmp/ccDN7JHH.s 			page 102


 3930 02ca 0328     		cmp	r0, #3
 3931 02cc 00D9     		bls	.L366
 3932 02ce 0421     		movs	r1, #4
 3933              	.LVL673:
 3934              	.L366:
1464:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 3935              		.loc 1 1464 0
 3936 02d0 501E     		subs	r0, r2, #1
 3937 02d2 0328     		cmp	r0, #3
 3938 02d4 00D9     		bls	.L367
 3939 02d6 0422     		movs	r2, #4
 3940              	.LVL674:
 3941              	.L367:
1465:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
 3942              		.loc 1 1465 0
 3943 02d8 0139     		subs	r1, r1, #1
 3944              	.LVL675:
 3945 02da 013A     		subs	r2, r2, #1
 3946              	.LVL676:
 3947 02dc 02EB8102 		add	r2, r2, r1, lsl #2
 3948              	.LVL677:
 3949 02e0 3849     		ldr	r1, .L397+32
 3950              	.LVL678:
 3951 02e2 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3952 02e6 0132     		adds	r2, r2, #1
 3953 02e8 03F12C01 		add	r1, r3, #44
 3954 02ec 46F82120 		str	r2, [r6, r1, lsl #2]
1466:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (5*5-1):
 3955              		.loc 1 1466 0
 3956 02f0 77E0     		b	.L361
 3957              	.LVL679:
 3958              	.L358:
1468:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 5) i = 5;
 3959              		.loc 1 1468 0
 3960 02f2 481E     		subs	r0, r1, #1
 3961 02f4 0428     		cmp	r0, #4
 3962 02f6 00D9     		bls	.L368
 3963 02f8 0521     		movs	r1, #5
 3964              	.LVL680:
 3965              	.L368:
1469:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 3966              		.loc 1 1469 0
 3967 02fa 501E     		subs	r0, r2, #1
 3968 02fc 0428     		cmp	r0, #4
 3969 02fe 00D9     		bls	.L369
 3970 0300 0522     		movs	r2, #5
 3971              	.LVL681:
 3972              	.L369:
1470:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
 3973              		.loc 1 1470 0
 3974 0302 0139     		subs	r1, r1, #1
 3975              	.LVL682:
 3976 0304 013A     		subs	r2, r2, #1
 3977              	.LVL683:
 3978 0306 01EB8101 		add	r1, r1, r1, lsl #2
 3979              	.LVL684:
 3980 030a 0A44     		add	r2, r2, r1
ARM GAS  /tmp/ccDN7JHH.s 			page 103


 3981              	.LVL685:
 3982 030c 2E49     		ldr	r1, .L397+36
 3983 030e 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3984 0312 0132     		adds	r2, r2, #1
 3985 0314 03F12C01 		add	r1, r3, #44
 3986 0318 46F82120 		str	r2, [r6, r1, lsl #2]
1471:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (6*6-1):
 3987              		.loc 1 1471 0
 3988 031c 61E0     		b	.L361
 3989              	.LVL686:
 3990              	.L359:
1473:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 6) i = 6;
 3991              		.loc 1 1473 0
 3992 031e 481E     		subs	r0, r1, #1
 3993 0320 0528     		cmp	r0, #5
 3994 0322 00D9     		bls	.L370
 3995 0324 0621     		movs	r1, #6
 3996              	.LVL687:
 3997              	.L370:
1474:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 3998              		.loc 1 1474 0
 3999 0326 501E     		subs	r0, r2, #1
 4000 0328 0528     		cmp	r0, #5
 4001 032a 00D9     		bls	.L371
 4002 032c 0622     		movs	r2, #6
 4003              	.LVL688:
 4004              	.L371:
1475:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
 4005              		.loc 1 1475 0
 4006 032e 0139     		subs	r1, r1, #1
 4007              	.LVL689:
 4008 0330 013A     		subs	r2, r2, #1
 4009              	.LVL690:
 4010 0332 01EB4101 		add	r1, r1, r1, lsl #1
 4011              	.LVL691:
 4012 0336 4800     		lsls	r0, r1, #1
 4013 0338 1044     		add	r0, r0, r2
 4014 033a 244A     		ldr	r2, .L397+40
 4015              	.LVL692:
 4016 033c 52F82020 		ldr	r2, [r2, r0, lsl #2]
 4017 0340 0132     		adds	r2, r2, #1
 4018 0342 03F12C01 		add	r1, r3, #44
 4019 0346 46F82120 		str	r2, [r6, r1, lsl #2]
1476:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (7*7-1):
 4020              		.loc 1 1476 0
 4021 034a 4AE0     		b	.L361
 4022              	.LVL693:
 4023              	.L360:
1478:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 7) i = 7;
 4024              		.loc 1 1478 0
 4025 034c 481E     		subs	r0, r1, #1
 4026 034e 0628     		cmp	r0, #6
 4027 0350 00D9     		bls	.L372
 4028 0352 0721     		movs	r1, #7
 4029              	.LVL694:
 4030              	.L372:
1479:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
ARM GAS  /tmp/ccDN7JHH.s 			page 104


 4031              		.loc 1 1479 0
 4032 0354 501E     		subs	r0, r2, #1
 4033 0356 0628     		cmp	r0, #6
 4034 0358 00D9     		bls	.L373
 4035 035a 0722     		movs	r2, #7
 4036              	.LVL695:
 4037              	.L373:
1480:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
 4038              		.loc 1 1480 0
 4039 035c 0139     		subs	r1, r1, #1
 4040              	.LVL696:
 4041 035e 013A     		subs	r2, r2, #1
 4042              	.LVL697:
 4043 0360 C1EBC101 		rsb	r1, r1, r1, lsl #3
 4044              	.LVL698:
 4045 0364 0A44     		add	r2, r2, r1
 4046              	.LVL699:
 4047 0366 1A49     		ldr	r1, .L397+44
 4048 0368 51F82220 		ldr	r2, [r1, r2, lsl #2]
 4049 036c 0132     		adds	r2, r2, #1
 4050 036e 03F12C01 		add	r1, r3, #44
 4051 0372 46F82120 		str	r2, [r6, r1, lsl #2]
1481:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	default:
 4052              		.loc 1 1481 0
 4053 0376 34E0     		b	.L361
 4054              	.LVL700:
 4055              	.L352:
1483:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  if (i <= 0 || i > 8) i = 8;
 4056              		.loc 1 1483 0
 4057 0378 481E     		subs	r0, r1, #1
 4058 037a 0728     		cmp	r0, #7
 4059 037c 00D9     		bls	.L374
 4060 037e 0821     		movs	r1, #8
 4061              	.LVL701:
 4062              	.L374:
1484:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 4063              		.loc 1 1484 0
 4064 0380 501E     		subs	r0, r2, #1
 4065 0382 0728     		cmp	r0, #7
 4066 0384 00D9     		bls	.L375
 4067 0386 0822     		movs	r2, #8
 4068              	.LVL702:
 4069              	.L375:
1485:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	  break;
 4070              		.loc 1 1485 0
 4071 0388 0139     		subs	r1, r1, #1
 4072              	.LVL703:
 4073 038a 013A     		subs	r2, r2, #1
 4074              	.LVL704:
 4075 038c 02EBC102 		add	r2, r2, r1, lsl #3
 4076              	.LVL705:
 4077 0390 1049     		ldr	r1, .L397+48
 4078              	.LVL706:
 4079 0392 51F82220 		ldr	r2, [r1, r2, lsl #2]
 4080 0396 0132     		adds	r2, r2, #1
 4081 0398 03F12C01 		add	r1, r3, #44
 4082 039c 46F82120 		str	r2, [r6, r1, lsl #2]
ARM GAS  /tmp/ccDN7JHH.s 			page 105


1486:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	}
 4083              		.loc 1 1486 0
 4084 03a0 1FE0     		b	.L361
 4085              	.L398:
 4086 03a2 00BF     		.align	2
 4087              	.L397:
 4088 03a4 00000000 		.word	decode_mcu_DC_first
 4089 03a8 00000000 		.word	decode_mcu_AC_first
 4090 03ac 00000000 		.word	decode_mcu_DC_refine
 4091 03b0 00000000 		.word	decode_mcu_AC_refine
 4092 03b4 00000000 		.word	decode_mcu_sub
 4093 03b8 00000000 		.word	decode_mcu
 4094 03bc 00000000 		.word	.LANCHOR1
 4095 03c0 00000000 		.word	.LANCHOR2
 4096 03c4 00000000 		.word	.LANCHOR3
 4097 03c8 00000000 		.word	.LANCHOR4
 4098 03cc 00000000 		.word	.LANCHOR5
 4099 03d0 00000000 		.word	.LANCHOR6
 4100 03d4 00000000 		.word	.LANCHOR7
 4101              	.LVL707:
 4102              	.L351:
1489:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       }
 4103              		.loc 1 1489 0
 4104 03d8 03F12C02 		add	r2, r3, #44
 4105              	.LVL708:
 4106 03dc 0021     		movs	r1, #0
 4107 03de 46F82210 		str	r1, [r6, r2, lsl #2]
 4108              	.L361:
1438:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 4109              		.loc 1 1438 0 discriminator 2
 4110 03e2 0133     		adds	r3, r3, #1
 4111              	.LVL709:
 4112              	.L350:
1438:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 4113              		.loc 1 1438 0 is_stmt 0 discriminator 1
 4114 03e4 D4F86C21 		ldr	r2, [r4, #364]
 4115 03e8 9A42     		cmp	r2, r3
 4116 03ea 7FF7DEAE 		ble	.L341
1439:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 4117              		.loc 1 1439 0 is_stmt 1
 4118 03ee 03F15C02 		add	r2, r3, #92
 4119 03f2 54F82220 		ldr	r2, [r4, r2, lsl #2]
 4120              	.LVL710:
1440:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Precalculate which table to use for each block */
 4121              		.loc 1 1440 0
 4122 03f6 5432     		adds	r2, r2, #84
 4123              	.LVL711:
 4124 03f8 04EB8202 		add	r2, r4, r2, lsl #2
 4125 03fc 5268     		ldr	r2, [r2, #4]
 4126              	.LVL712:
1442:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 4127              		.loc 1 1442 0
 4128 03fe 5169     		ldr	r1, [r2, #20]
 4129 0400 1031     		adds	r1, r1, #16
 4130 0402 56F82100 		ldr	r0, [r6, r1, lsl #2]
 4131 0406 03F11801 		add	r1, r3, #24
 4132 040a 46F82100 		str	r0, [r6, r1, lsl #2]
ARM GAS  /tmp/ccDN7JHH.s 			page 106


 4133              	.LVL713:
1443:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       /* Decide whether we really care about the coefficient values */
 4134              		.loc 1 1443 0
 4135 040e 9169     		ldr	r1, [r2, #24]
 4136 0410 1431     		adds	r1, r1, #20
 4137 0412 56F82100 		ldr	r0, [r6, r1, lsl #2]
 4138 0416 03F12201 		add	r1, r3, #34
 4139 041a 46F82100 		str	r0, [r6, r1, lsl #2]
1445:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	ci = compptr->DCT_v_scaled_size;
 4140              		.loc 1 1445 0
 4141 041e 516B     		ldr	r1, [r2, #52]
 4142 0420 0029     		cmp	r1, #0
 4143 0422 D9D0     		beq	.L351
1446:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	i = compptr->DCT_h_scaled_size;
 4144              		.loc 1 1446 0
 4145 0424 916A     		ldr	r1, [r2, #40]
 4146              	.LVL714:
1447:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	switch (cinfo->lim_Se) {
 4147              		.loc 1 1447 0
 4148 0426 526A     		ldr	r2, [r2, #36]
 4149              	.LVL715:
1448:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	case (1*1-1):
 4150              		.loc 1 1448 0
 4151 0428 D4F8B001 		ldr	r0, [r4, #432]
 4152 042c 3028     		cmp	r0, #48
 4153 042e A3D8     		bhi	.L352
 4154 0430 01A5     		adr	r5, .L354
 4155 0432 55F820F0 		ldr	pc, [r5, r0, lsl #2]
 4156 0436 00BF     		.p2align 2
 4157              	.L354:
 4158 0438 67020000 		.word	.L353+1
 4159 043c 79030000 		.word	.L352+1
 4160 0440 79030000 		.word	.L352+1
 4161 0444 73020000 		.word	.L355+1
 4162 0448 79030000 		.word	.L352+1
 4163 044c 79030000 		.word	.L352+1
 4164 0450 79030000 		.word	.L352+1
 4165 0454 79030000 		.word	.L352+1
 4166 0458 9D020000 		.word	.L356+1
 4167 045c 79030000 		.word	.L352+1
 4168 0460 79030000 		.word	.L352+1
 4169 0464 79030000 		.word	.L352+1
 4170 0468 79030000 		.word	.L352+1
 4171 046c 79030000 		.word	.L352+1
 4172 0470 79030000 		.word	.L352+1
 4173 0474 C9020000 		.word	.L357+1
 4174 0478 79030000 		.word	.L352+1
 4175 047c 79030000 		.word	.L352+1
 4176 0480 79030000 		.word	.L352+1
 4177 0484 79030000 		.word	.L352+1
 4178 0488 79030000 		.word	.L352+1
 4179 048c 79030000 		.word	.L352+1
 4180 0490 79030000 		.word	.L352+1
 4181 0494 79030000 		.word	.L352+1
 4182 0498 F3020000 		.word	.L358+1
 4183 049c 79030000 		.word	.L352+1
 4184 04a0 79030000 		.word	.L352+1
ARM GAS  /tmp/ccDN7JHH.s 			page 107


 4185 04a4 79030000 		.word	.L352+1
 4186 04a8 79030000 		.word	.L352+1
 4187 04ac 79030000 		.word	.L352+1
 4188 04b0 79030000 		.word	.L352+1
 4189 04b4 79030000 		.word	.L352+1
 4190 04b8 79030000 		.word	.L352+1
 4191 04bc 79030000 		.word	.L352+1
 4192 04c0 79030000 		.word	.L352+1
 4193 04c4 1F030000 		.word	.L359+1
 4194 04c8 79030000 		.word	.L352+1
 4195 04cc 79030000 		.word	.L352+1
 4196 04d0 79030000 		.word	.L352+1
 4197 04d4 79030000 		.word	.L352+1
 4198 04d8 79030000 		.word	.L352+1
 4199 04dc 79030000 		.word	.L352+1
 4200 04e0 79030000 		.word	.L352+1
 4201 04e4 79030000 		.word	.L352+1
 4202 04e8 79030000 		.word	.L352+1
 4203 04ec 79030000 		.word	.L352+1
 4204 04f0 79030000 		.word	.L352+1
 4205 04f4 79030000 		.word	.L352+1
 4206 04f8 4D030000 		.word	.L360+1
 4207              		.cfi_endproc
 4208              	.LFE13:
 4210              		.section	.text.jinit_huff_decoder,"ax",%progbits
 4211              		.align	1
 4212              		.global	jinit_huff_decoder
 4213              		.syntax unified
 4214              		.thumb
 4215              		.thumb_func
 4216              		.fpu fpv5-sp-d16
 4218              	jinit_huff_decoder:
 4219              	.LFB14:
1502:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1503:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1504:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** /*
1505:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  * Module initialization routine for Huffman entropy decoding.
1506:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****  */
1507:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1508:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** GLOBAL(void)
1509:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** jinit_huff_decoder (j_decompress_ptr cinfo)
1510:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** {
 4220              		.loc 1 1510 0
 4221              		.cfi_startproc
 4222              		@ args = 0, pretend = 0, frame = 0
 4223              		@ frame_needed = 0, uses_anonymous_args = 0
 4224              	.LVL716:
 4225 0000 38B5     		push	{r3, r4, r5, lr}
 4226              	.LCFI30:
 4227              		.cfi_def_cfa_offset 16
 4228              		.cfi_offset 3, -16
 4229              		.cfi_offset 4, -12
 4230              		.cfi_offset 5, -8
 4231              		.cfi_offset 14, -4
 4232 0002 0546     		mov	r5, r0
1511:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   huff_entropy_ptr entropy;
1512:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   int i;
ARM GAS  /tmp/ccDN7JHH.s 			page 108


1513:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1514:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy = (huff_entropy_ptr)
1515:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4233              		.loc 1 1515 0
 4234 0004 4368     		ldr	r3, [r0, #4]
 4235 0006 1B68     		ldr	r3, [r3]
1514:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4236              		.loc 1 1514 0
 4237 0008 D822     		movs	r2, #216
 4238 000a 0121     		movs	r1, #1
 4239 000c 9847     		blx	r3
 4240              	.LVL717:
 4241 000e 0446     		mov	r4, r0
 4242              	.LVL718:
1516:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				SIZEOF(huff_entropy_decoder));
1517:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 4243              		.loc 1 1517 0
 4244 0010 C5F8D001 		str	r0, [r5, #464]
1518:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   entropy->pub.start_pass = start_pass_huff_decoder;
 4245              		.loc 1 1518 0
 4246 0014 1B4B     		ldr	r3, .L412
 4247 0016 0360     		str	r3, [r0]
1519:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1520:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   if (cinfo->progressive_mode) {
 4248              		.loc 1 1520 0
 4249 0018 D5F8E030 		ldr	r3, [r5, #224]
 4250 001c 83B3     		cbz	r3, .L408
 4251              	.LBB42:
1521:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Create progression status table */
1522:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     int *coef_bit_ptr, ci;
1523:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     cinfo->coef_bits = (int (*)[DCTSIZE2])
1524:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4252              		.loc 1 1524 0
 4253 001e 6B68     		ldr	r3, [r5, #4]
1525:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 4254              		.loc 1 1525 0
 4255 0020 6A6A     		ldr	r2, [r5, #36]
1524:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 4256              		.loc 1 1524 0
 4257 0022 1B68     		ldr	r3, [r3]
 4258 0024 1202     		lsls	r2, r2, #8
 4259 0026 0121     		movs	r1, #1
 4260 0028 2846     		mov	r0, r5
 4261              	.LVL719:
 4262 002a 9847     		blx	r3
 4263              	.LVL720:
1523:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4264              		.loc 1 1523 0
 4265 002c C5F8A000 		str	r0, [r5, #160]
 4266              	.LVL721:
1526:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     coef_bit_ptr = & cinfo->coef_bits[0][0];
1527:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (ci = 0; ci < cinfo->num_components; ci++)
 4267              		.loc 1 1527 0
 4268 0030 0021     		movs	r1, #0
 4269 0032 07E0     		b	.L401
 4270              	.LVL722:
 4271              	.L402:
ARM GAS  /tmp/ccDN7JHH.s 			page 109


1528:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
1529:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 	*coef_bit_ptr++ = -1;
 4272              		.loc 1 1529 0 discriminator 3
 4273 0034 4FF0FF32 		mov	r2, #-1
 4274 0038 0260     		str	r2, [r0]
1528:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 4275              		.loc 1 1528 0 discriminator 3
 4276 003a 0133     		adds	r3, r3, #1
 4277              	.LVL723:
 4278              		.loc 1 1529 0 discriminator 3
 4279 003c 0430     		adds	r0, r0, #4
 4280              	.LVL724:
 4281              	.L403:
1528:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 4282              		.loc 1 1528 0 discriminator 1
 4283 003e 3F2B     		cmp	r3, #63
 4284 0040 F8DD     		ble	.L402
1527:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 4285              		.loc 1 1527 0 discriminator 2
 4286 0042 0131     		adds	r1, r1, #1
 4287              	.LVL725:
 4288              	.L401:
1527:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 4289              		.loc 1 1527 0 is_stmt 0 discriminator 1
 4290 0044 6B6A     		ldr	r3, [r5, #36]
 4291 0046 8B42     		cmp	r3, r1
 4292 0048 01DD     		ble	.L411
1528:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 4293              		.loc 1 1528 0 is_stmt 1
 4294 004a 0023     		movs	r3, #0
 4295 004c F7E7     		b	.L403
 4296              	.L411:
1530:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** 
1531:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Mark derived tables unallocated */
1532:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (i = 0; i < NUM_HUFF_TBLS; i++) {
 4297              		.loc 1 1532 0
 4298 004e 0023     		movs	r3, #0
 4299 0050 06E0     		b	.L404
 4300              	.LVL726:
 4301              	.L405:
1533:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 4302              		.loc 1 1533 0 discriminator 3
 4303 0052 03F10A02 		add	r2, r3, #10
 4304 0056 04EB8202 		add	r2, r4, r2, lsl #2
 4305 005a 0021     		movs	r1, #0
 4306 005c 5160     		str	r1, [r2, #4]
1532:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 4307              		.loc 1 1532 0 discriminator 3
 4308 005e 0133     		adds	r3, r3, #1
 4309              	.LVL727:
 4310              	.L404:
1532:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 4311              		.loc 1 1532 0 is_stmt 0 discriminator 1
 4312 0060 032B     		cmp	r3, #3
 4313 0062 F6DD     		ble	.L405
 4314              	.LVL728:
 4315              	.L399:
ARM GAS  /tmp/ccDN7JHH.s 			page 110


 4316              	.LBE42:
1534:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1535:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   } else {
1536:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     /* Mark tables unallocated */
1537:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     for (i = 0; i < NUM_HUFF_TBLS; i++) {
1538:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
1539:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
1540:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****   }
1541:Middlewares/Third_Party/LibJPEG/source/jdhuff.c **** }
 4317              		.loc 1 1541 0 is_stmt 1
 4318 0064 38BD     		pop	{r3, r4, r5, pc}
 4319              	.LVL729:
 4320              	.L407:
1538:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****     }
 4321              		.loc 1 1538 0 discriminator 3
 4322 0066 03F11401 		add	r1, r3, #20
 4323 006a 0022     		movs	r2, #0
 4324 006c 44F82120 		str	r2, [r4, r1, lsl #2]
 4325 0070 03F11001 		add	r1, r3, #16
 4326 0074 44F82120 		str	r2, [r4, r1, lsl #2]
1537:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 4327              		.loc 1 1537 0 discriminator 3
 4328 0078 0133     		adds	r3, r3, #1
 4329              	.LVL730:
 4330              	.L400:
1537:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 4331              		.loc 1 1537 0 is_stmt 0 discriminator 1
 4332 007a 032B     		cmp	r3, #3
 4333 007c F3DD     		ble	.L407
 4334 007e F1E7     		b	.L399
 4335              	.LVL731:
 4336              	.L408:
1537:Middlewares/Third_Party/LibJPEG/source/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 4337              		.loc 1 1537 0
 4338 0080 0023     		movs	r3, #0
 4339 0082 FAE7     		b	.L400
 4340              	.L413:
 4341              		.align	2
 4342              	.L412:
 4343 0084 00000000 		.word	start_pass_huff_decoder
 4344              		.cfi_endproc
 4345              	.LFE14:
 4347              		.section	.rodata.bmask,"a",%progbits
 4348              		.align	2
 4349              		.set	.LANCHOR0,. + 0
 4352              	bmask:
 4353 0000 00000000 		.word	0
 4354 0004 01000000 		.word	1
 4355 0008 03000000 		.word	3
 4356 000c 07000000 		.word	7
 4357 0010 0F000000 		.word	15
 4358 0014 1F000000 		.word	31
 4359 0018 3F000000 		.word	63
 4360 001c 7F000000 		.word	127
 4361 0020 FF000000 		.word	255
 4362 0024 FF010000 		.word	511
 4363 0028 FF030000 		.word	1023
ARM GAS  /tmp/ccDN7JHH.s 			page 111


 4364 002c FF070000 		.word	2047
 4365 0030 FF0F0000 		.word	4095
 4366 0034 FF1F0000 		.word	8191
 4367 0038 FF3F0000 		.word	16383
 4368 003c FF7F0000 		.word	32767
 4369              		.section	.rodata.jpeg_zigzag_order,"a",%progbits
 4370              		.align	2
 4371              		.set	.LANCHOR7,. + 0
 4374              	jpeg_zigzag_order:
 4375 0000 00000000 		.word	0
 4376 0004 01000000 		.word	1
 4377 0008 05000000 		.word	5
 4378 000c 06000000 		.word	6
 4379 0010 0E000000 		.word	14
 4380 0014 0F000000 		.word	15
 4381 0018 1B000000 		.word	27
 4382 001c 1C000000 		.word	28
 4383 0020 02000000 		.word	2
 4384 0024 04000000 		.word	4
 4385 0028 07000000 		.word	7
 4386 002c 0D000000 		.word	13
 4387 0030 10000000 		.word	16
 4388 0034 1A000000 		.word	26
 4389 0038 1D000000 		.word	29
 4390 003c 2A000000 		.word	42
 4391 0040 03000000 		.word	3
 4392 0044 08000000 		.word	8
 4393 0048 0C000000 		.word	12
 4394 004c 11000000 		.word	17
 4395 0050 19000000 		.word	25
 4396 0054 1E000000 		.word	30
 4397 0058 29000000 		.word	41
 4398 005c 2B000000 		.word	43
 4399 0060 09000000 		.word	9
 4400 0064 0B000000 		.word	11
 4401 0068 12000000 		.word	18
 4402 006c 18000000 		.word	24
 4403 0070 1F000000 		.word	31
 4404 0074 28000000 		.word	40
 4405 0078 2C000000 		.word	44
 4406 007c 35000000 		.word	53
 4407 0080 0A000000 		.word	10
 4408 0084 13000000 		.word	19
 4409 0088 17000000 		.word	23
 4410 008c 20000000 		.word	32
 4411 0090 27000000 		.word	39
 4412 0094 2D000000 		.word	45
 4413 0098 34000000 		.word	52
 4414 009c 36000000 		.word	54
 4415 00a0 14000000 		.word	20
 4416 00a4 16000000 		.word	22
 4417 00a8 21000000 		.word	33
 4418 00ac 26000000 		.word	38
 4419 00b0 2E000000 		.word	46
 4420 00b4 33000000 		.word	51
 4421 00b8 37000000 		.word	55
 4422 00bc 3C000000 		.word	60
ARM GAS  /tmp/ccDN7JHH.s 			page 112


 4423 00c0 15000000 		.word	21
 4424 00c4 22000000 		.word	34
 4425 00c8 25000000 		.word	37
 4426 00cc 2F000000 		.word	47
 4427 00d0 32000000 		.word	50
 4428 00d4 38000000 		.word	56
 4429 00d8 3B000000 		.word	59
 4430 00dc 3D000000 		.word	61
 4431 00e0 23000000 		.word	35
 4432 00e4 24000000 		.word	36
 4433 00e8 30000000 		.word	48
 4434 00ec 31000000 		.word	49
 4435 00f0 39000000 		.word	57
 4436 00f4 3A000000 		.word	58
 4437 00f8 3E000000 		.word	62
 4438 00fc 3F000000 		.word	63
 4439              		.section	.rodata.jpeg_zigzag_order2,"a",%progbits
 4440              		.align	2
 4441              		.set	.LANCHOR1,. + 0
 4444              	jpeg_zigzag_order2:
 4445 0000 00000000 		.word	0
 4446 0004 01000000 		.word	1
 4447 0008 02000000 		.word	2
 4448 000c 03000000 		.word	3
 4449              		.section	.rodata.jpeg_zigzag_order3,"a",%progbits
 4450              		.align	2
 4451              		.set	.LANCHOR2,. + 0
 4454              	jpeg_zigzag_order3:
 4455 0000 00000000 		.word	0
 4456 0004 01000000 		.word	1
 4457 0008 05000000 		.word	5
 4458 000c 02000000 		.word	2
 4459 0010 04000000 		.word	4
 4460 0014 06000000 		.word	6
 4461 0018 03000000 		.word	3
 4462 001c 07000000 		.word	7
 4463 0020 08000000 		.word	8
 4464              		.section	.rodata.jpeg_zigzag_order4,"a",%progbits
 4465              		.align	2
 4466              		.set	.LANCHOR3,. + 0
 4469              	jpeg_zigzag_order4:
 4470 0000 00000000 		.word	0
 4471 0004 01000000 		.word	1
 4472 0008 05000000 		.word	5
 4473 000c 06000000 		.word	6
 4474 0010 02000000 		.word	2
 4475 0014 04000000 		.word	4
 4476 0018 07000000 		.word	7
 4477 001c 0C000000 		.word	12
 4478 0020 03000000 		.word	3
 4479 0024 08000000 		.word	8
 4480 0028 0B000000 		.word	11
 4481 002c 0D000000 		.word	13
 4482 0030 09000000 		.word	9
 4483 0034 0A000000 		.word	10
 4484 0038 0E000000 		.word	14
 4485 003c 0F000000 		.word	15
ARM GAS  /tmp/ccDN7JHH.s 			page 113


 4486              		.section	.rodata.jpeg_zigzag_order5,"a",%progbits
 4487              		.align	2
 4488              		.set	.LANCHOR4,. + 0
 4491              	jpeg_zigzag_order5:
 4492 0000 00000000 		.word	0
 4493 0004 01000000 		.word	1
 4494 0008 05000000 		.word	5
 4495 000c 06000000 		.word	6
 4496 0010 0E000000 		.word	14
 4497 0014 02000000 		.word	2
 4498 0018 04000000 		.word	4
 4499 001c 07000000 		.word	7
 4500 0020 0D000000 		.word	13
 4501 0024 0F000000 		.word	15
 4502 0028 03000000 		.word	3
 4503 002c 08000000 		.word	8
 4504 0030 0C000000 		.word	12
 4505 0034 10000000 		.word	16
 4506 0038 15000000 		.word	21
 4507 003c 09000000 		.word	9
 4508 0040 0B000000 		.word	11
 4509 0044 11000000 		.word	17
 4510 0048 14000000 		.word	20
 4511 004c 16000000 		.word	22
 4512 0050 0A000000 		.word	10
 4513 0054 12000000 		.word	18
 4514 0058 13000000 		.word	19
 4515 005c 17000000 		.word	23
 4516 0060 18000000 		.word	24
 4517              		.section	.rodata.jpeg_zigzag_order6,"a",%progbits
 4518              		.align	2
 4519              		.set	.LANCHOR5,. + 0
 4522              	jpeg_zigzag_order6:
 4523 0000 00000000 		.word	0
 4524 0004 01000000 		.word	1
 4525 0008 05000000 		.word	5
 4526 000c 06000000 		.word	6
 4527 0010 0E000000 		.word	14
 4528 0014 0F000000 		.word	15
 4529 0018 02000000 		.word	2
 4530 001c 04000000 		.word	4
 4531 0020 07000000 		.word	7
 4532 0024 0D000000 		.word	13
 4533 0028 10000000 		.word	16
 4534 002c 19000000 		.word	25
 4535 0030 03000000 		.word	3
 4536 0034 08000000 		.word	8
 4537 0038 0C000000 		.word	12
 4538 003c 11000000 		.word	17
 4539 0040 18000000 		.word	24
 4540 0044 1A000000 		.word	26
 4541 0048 09000000 		.word	9
 4542 004c 0B000000 		.word	11
 4543 0050 12000000 		.word	18
 4544 0054 17000000 		.word	23
 4545 0058 1B000000 		.word	27
 4546 005c 20000000 		.word	32
ARM GAS  /tmp/ccDN7JHH.s 			page 114


 4547 0060 0A000000 		.word	10
 4548 0064 13000000 		.word	19
 4549 0068 16000000 		.word	22
 4550 006c 1C000000 		.word	28
 4551 0070 1F000000 		.word	31
 4552 0074 21000000 		.word	33
 4553 0078 14000000 		.word	20
 4554 007c 15000000 		.word	21
 4555 0080 1D000000 		.word	29
 4556 0084 1E000000 		.word	30
 4557 0088 22000000 		.word	34
 4558 008c 23000000 		.word	35
 4559              		.section	.rodata.jpeg_zigzag_order7,"a",%progbits
 4560              		.align	2
 4561              		.set	.LANCHOR6,. + 0
 4564              	jpeg_zigzag_order7:
 4565 0000 00000000 		.word	0
 4566 0004 01000000 		.word	1
 4567 0008 05000000 		.word	5
 4568 000c 06000000 		.word	6
 4569 0010 0E000000 		.word	14
 4570 0014 0F000000 		.word	15
 4571 0018 1B000000 		.word	27
 4572 001c 02000000 		.word	2
 4573 0020 04000000 		.word	4
 4574 0024 07000000 		.word	7
 4575 0028 0D000000 		.word	13
 4576 002c 10000000 		.word	16
 4577 0030 1A000000 		.word	26
 4578 0034 1C000000 		.word	28
 4579 0038 03000000 		.word	3
 4580 003c 08000000 		.word	8
 4581 0040 0C000000 		.word	12
 4582 0044 11000000 		.word	17
 4583 0048 19000000 		.word	25
 4584 004c 1D000000 		.word	29
 4585 0050 26000000 		.word	38
 4586 0054 09000000 		.word	9
 4587 0058 0B000000 		.word	11
 4588 005c 12000000 		.word	18
 4589 0060 18000000 		.word	24
 4590 0064 1E000000 		.word	30
 4591 0068 25000000 		.word	37
 4592 006c 27000000 		.word	39
 4593 0070 0A000000 		.word	10
 4594 0074 13000000 		.word	19
 4595 0078 17000000 		.word	23
 4596 007c 1F000000 		.word	31
 4597 0080 24000000 		.word	36
 4598 0084 28000000 		.word	40
 4599 0088 2D000000 		.word	45
 4600 008c 14000000 		.word	20
 4601 0090 16000000 		.word	22
 4602 0094 20000000 		.word	32
 4603 0098 23000000 		.word	35
 4604 009c 29000000 		.word	41
 4605 00a0 2C000000 		.word	44
ARM GAS  /tmp/ccDN7JHH.s 			page 115


 4606 00a4 2E000000 		.word	46
 4607 00a8 15000000 		.word	21
 4608 00ac 21000000 		.word	33
 4609 00b0 22000000 		.word	34
 4610 00b4 2A000000 		.word	42
 4611 00b8 2B000000 		.word	43
 4612 00bc 2F000000 		.word	47
 4613 00c0 30000000 		.word	48
 4614              		.text
 4615              	.Letext0:
 4616              		.file 2 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 4617              		.file 3 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 4618              		.file 4 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 4619              		.file 5 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 4620              		.file 6 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 4621              		.file 7 "Inc/jmorecfg.h"
 4622              		.file 8 "Middlewares/Third_Party/LibJPEG/include/jpeglib.h"
 4623              		.file 9 "Middlewares/Third_Party/LibJPEG/include/jpegint.h"
 4624              		.file 10 "Middlewares/Third_Party/LibJPEG/include/jerror.h"
 4625              		.file 11 "<built-in>"
ARM GAS  /tmp/ccDN7JHH.s 			page 116


DEFINED SYMBOLS
                            *ABS*:0000000000000000 jdhuff.c
     /tmp/ccDN7JHH.s:18     .text.jpeg_fill_bit_buffer:0000000000000000 $t
     /tmp/ccDN7JHH.s:24     .text.jpeg_fill_bit_buffer:0000000000000000 jpeg_fill_bit_buffer
     /tmp/ccDN7JHH.s:213    .text.jpeg_huff_decode:0000000000000000 $t
     /tmp/ccDN7JHH.s:219    .text.jpeg_huff_decode:0000000000000000 jpeg_huff_decode
     /tmp/ccDN7JHH.s:360    .text.jpeg_huff_decode:0000000000000094 $d
     /tmp/ccDN7JHH.s:365    .text.process_restart:0000000000000000 $t
     /tmp/ccDN7JHH.s:371    .text.process_restart:0000000000000000 process_restart
     /tmp/ccDN7JHH.s:460    .text.decode_mcu_DC_first:0000000000000000 $t
     /tmp/ccDN7JHH.s:466    .text.decode_mcu_DC_first:0000000000000000 decode_mcu_DC_first
     /tmp/ccDN7JHH.s:750    .text.decode_mcu_DC_first:0000000000000170 $d
     /tmp/ccDN7JHH.s:755    .text.decode_mcu_AC_first:0000000000000000 $t
     /tmp/ccDN7JHH.s:761    .text.decode_mcu_AC_first:0000000000000000 decode_mcu_AC_first
     /tmp/ccDN7JHH.s:1099   .text.decode_mcu_AC_first:000000000000017c $d
     /tmp/ccDN7JHH.s:1104   .text.decode_mcu_DC_refine:0000000000000000 $t
     /tmp/ccDN7JHH.s:1110   .text.decode_mcu_DC_refine:0000000000000000 decode_mcu_DC_refine
     /tmp/ccDN7JHH.s:1243   .text.decode_mcu_AC_refine:0000000000000000 $t
     /tmp/ccDN7JHH.s:1249   .text.decode_mcu_AC_refine:0000000000000000 decode_mcu_AC_refine
     /tmp/ccDN7JHH.s:1811   .text.decode_mcu_AC_refine:00000000000002d8 $d
     /tmp/ccDN7JHH.s:1816   .text.decode_mcu_sub:0000000000000000 $t
     /tmp/ccDN7JHH.s:1822   .text.decode_mcu_sub:0000000000000000 decode_mcu_sub
     /tmp/ccDN7JHH.s:2450   .text.decode_mcu_sub:000000000000030c $d
     /tmp/ccDN7JHH.s:2456   .text.decode_mcu:0000000000000000 $t
     /tmp/ccDN7JHH.s:2462   .text.decode_mcu:0000000000000000 decode_mcu
     /tmp/ccDN7JHH.s:3075   .text.decode_mcu:00000000000002ec $d
     /tmp/ccDN7JHH.s:3082   .text.jpeg_make_d_derived_tbl:0000000000000000 $t
     /tmp/ccDN7JHH.s:3088   .text.jpeg_make_d_derived_tbl:0000000000000000 jpeg_make_d_derived_tbl
     /tmp/ccDN7JHH.s:3443   .text.jpeg_make_d_derived_tbl:00000000000001dc $d
     /tmp/ccDN7JHH.s:3448   .text.start_pass_huff_decoder:0000000000000000 $t
     /tmp/ccDN7JHH.s:3454   .text.start_pass_huff_decoder:0000000000000000 start_pass_huff_decoder
     /tmp/ccDN7JHH.s:4088   .text.start_pass_huff_decoder:00000000000003a4 $d
     /tmp/ccDN7JHH.s:4104   .text.start_pass_huff_decoder:00000000000003d8 $t
     /tmp/ccDN7JHH.s:4158   .text.start_pass_huff_decoder:0000000000000438 $d
     /tmp/ccDN7JHH.s:4211   .text.jinit_huff_decoder:0000000000000000 $t
     /tmp/ccDN7JHH.s:4218   .text.jinit_huff_decoder:0000000000000000 jinit_huff_decoder
     /tmp/ccDN7JHH.s:4343   .text.jinit_huff_decoder:0000000000000084 $d
     /tmp/ccDN7JHH.s:4348   .rodata.bmask:0000000000000000 $d
     /tmp/ccDN7JHH.s:4352   .rodata.bmask:0000000000000000 bmask
     /tmp/ccDN7JHH.s:4370   .rodata.jpeg_zigzag_order:0000000000000000 $d
     /tmp/ccDN7JHH.s:4374   .rodata.jpeg_zigzag_order:0000000000000000 jpeg_zigzag_order
     /tmp/ccDN7JHH.s:4440   .rodata.jpeg_zigzag_order2:0000000000000000 $d
     /tmp/ccDN7JHH.s:4444   .rodata.jpeg_zigzag_order2:0000000000000000 jpeg_zigzag_order2
     /tmp/ccDN7JHH.s:4450   .rodata.jpeg_zigzag_order3:0000000000000000 $d
     /tmp/ccDN7JHH.s:4454   .rodata.jpeg_zigzag_order3:0000000000000000 jpeg_zigzag_order3
     /tmp/ccDN7JHH.s:4465   .rodata.jpeg_zigzag_order4:0000000000000000 $d
     /tmp/ccDN7JHH.s:4469   .rodata.jpeg_zigzag_order4:0000000000000000 jpeg_zigzag_order4
     /tmp/ccDN7JHH.s:4487   .rodata.jpeg_zigzag_order5:0000000000000000 $d
     /tmp/ccDN7JHH.s:4491   .rodata.jpeg_zigzag_order5:0000000000000000 jpeg_zigzag_order5
     /tmp/ccDN7JHH.s:4518   .rodata.jpeg_zigzag_order6:0000000000000000 $d
     /tmp/ccDN7JHH.s:4522   .rodata.jpeg_zigzag_order6:0000000000000000 jpeg_zigzag_order6
     /tmp/ccDN7JHH.s:4560   .rodata.jpeg_zigzag_order7:0000000000000000 $d
     /tmp/ccDN7JHH.s:4564   .rodata.jpeg_zigzag_order7:0000000000000000 jpeg_zigzag_order7

UNDEFINED SYMBOLS
jpeg_natural_order
memset
ARM GAS  /tmp/ccDN7JHH.s 			page 117


