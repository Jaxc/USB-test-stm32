ARM GAS  /tmp/ccQQGSTq.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"jmemmgr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.out_of_memory,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	out_of_memory:
  25              	.LFB3:
  26              		.file 1 "Middlewares/Third_Party/LibJPEG/source/jmemmgr.c"
   1:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
   2:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * jmemmgr.c
   3:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
   4:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Copyright (C) 1991-1997, Thomas G. Lane.
   5:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Modified 2011 by Guido Vollbeding.
   6:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * This file is part of the Independent JPEG Group's software.
   7:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
   9:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * This file contains the JPEG system-independent memory management
  10:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * routines.  This code is usable across a wide variety of machines; most
  11:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * of the system dependencies have been isolated in a separate file.
  12:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The major functions provided here are:
  13:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   * pool-based allocation and freeing of memory;
  14:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   * policy decisions about how to divide available memory among the
  15:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *     virtual arrays;
  16:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   * control logic for swapping virtual arrays between main memory and
  17:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *     backing storage.
  18:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The separate system-dependent file provides the actual backing-storage
  19:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * access code, and it contains the policy decision about how much total
  20:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * main memory to use.
  21:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * This file is system-dependent in the sense that some of its functions
  22:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * are unnecessary in some systems.  For example, if there is enough virtual
  23:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * memory so that backing storage will never be used, much of the virtual
  24:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * array control logic could be removed.  (Of course, if you have that much
  25:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * memory then you shouldn't care about a little bit of unused code...)
  26:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
  27:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  28:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #define JPEG_INTERNALS
  29:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #define AM_MEMORY_MANAGER	/* we define jvirt_Xarray_control structs */
  30:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #include "jinclude.h"
  31:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #include "jpeglib.h"
  32:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #include "jmemsys.h"		/* import the system-dependent declarations */
ARM GAS  /tmp/ccQQGSTq.s 			page 2


  33:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  34:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #ifndef NO_GETENV
  35:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare getenv() */
  36:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** extern char * getenv JPP((const char * name));
  37:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #endif
  38:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #endif
  39:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  40:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  41:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
  42:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Some important notes:
  43:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   The allocation routines provided here must never return NULL.
  44:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   They should exit to error_exit if unsuccessful.
  45:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
  46:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   It's not a good idea to try to merge the sarray and barray routines,
  47:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   even though they are textually almost the same, because samples are
  48:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   usually stored as bytes while coefficients are shorts or ints.  Thus,
  49:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   in machines where byte pointers have a different representation from
  50:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *   word pointers, the resulting machine code could not be the same.
  51:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
  52:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  53:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  54:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
  55:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Many machines require storage alignment: longs must start on 4-byte
  56:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * boundaries, doubles on 8-byte boundaries, etc.  On such machines, malloc()
  57:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * always returns pointers that are multiples of the worst-case alignment
  58:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * requirement, and we had better do so too.
  59:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * There isn't any really portable way to determine the worst-case alignment
  60:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * requirement.  This module assumes that the alignment requirement is
  61:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * multiples of sizeof(ALIGN_TYPE).
  62:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * By default, we define ALIGN_TYPE as double.  This is necessary on some
  63:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * workstations (where doubles really do need 8-byte alignment) and will work
  64:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * fine on nearly everything.  If your machine has lesser alignment needs,
  65:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * you can save a few bytes by making ALIGN_TYPE smaller.
  66:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The only place I know of where this will NOT work is certain Macintosh
  67:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * 680x0 compilers that define double as a 10-byte IEEE extended float.
  68:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Doing 10-byte alignment is counterproductive because longwords won't be
  69:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * aligned well.  Put "#define ALIGN_TYPE long" in jconfig.h if you have
  70:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * such a compiler.
  71:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
  72:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  73:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #ifndef ALIGN_TYPE		/* so can override from jconfig.h */
  74:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #define ALIGN_TYPE  double
  75:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #endif
  76:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  77:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  78:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
  79:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * We allocate objects from "pools", where each pool is gotten with a single
  80:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * request to jpeg_get_small() or jpeg_get_large().  There is no per-object
  81:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * overhead within a pool, except for alignment padding.  Each pool has a
  82:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * header with a link to the next pool of the same class.
  83:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Small and large pool headers are identical except that the latter's
  84:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * link pointer must be FAR on 80x86 machines.
  85:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Notice that the "real" header fields are union'ed with a dummy ALIGN_TYPE
  86:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * field.  This forces the compiler to make SIZEOF(small_pool_hdr) a multiple
  87:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * of the alignment requirement of ALIGN_TYPE.
  88:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
  89:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
ARM GAS  /tmp/ccQQGSTq.s 			page 3


  90:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** typedef union small_pool_struct * small_pool_ptr;
  91:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
  92:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** typedef union small_pool_struct {
  93:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   struct {
  94:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     small_pool_ptr next;	/* next in list of pools */
  95:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     size_t bytes_used;		/* how many bytes already used within pool */
  96:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     size_t bytes_left;		/* bytes still available in this pool */
  97:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   } hdr;
  98:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   ALIGN_TYPE dummy;		/* included in union to ensure alignment */
  99:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** } small_pool_hdr;
 100:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 101:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** typedef union large_pool_struct FAR * large_pool_ptr;
 102:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 103:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** typedef union large_pool_struct {
 104:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   struct {
 105:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     large_pool_ptr next;	/* next in list of pools */
 106:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     size_t bytes_used;		/* how many bytes already used within pool */
 107:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     size_t bytes_left;		/* bytes still available in this pool */
 108:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   } hdr;
 109:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   ALIGN_TYPE dummy;		/* included in union to ensure alignment */
 110:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** } large_pool_hdr;
 111:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 112:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 113:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
 114:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Here is the full definition of a memory manager object.
 115:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
 116:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 117:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** typedef struct {
 118:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   struct jpeg_memory_mgr pub;	/* public fields */
 119:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 120:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Each pool identifier (lifetime class) names a linked list of pools. */
 121:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   small_pool_ptr small_list[JPOOL_NUMPOOLS];
 122:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   large_pool_ptr large_list[JPOOL_NUMPOOLS];
 123:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 124:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Since we only have one lifetime class of virtual arrays, only one
 125:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * linked list is necessary (for each datatype).  Note that the virtual
 126:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * array control blocks being linked together are actually stored somewhere
 127:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * in the small-pool list.
 128:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
 129:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_sarray_ptr virt_sarray_list;
 130:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_barray_ptr virt_barray_list;
 131:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 132:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* This counts total space obtained from jpeg_get_small/large */
 133:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   long total_space_allocated;
 134:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 135:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* alloc_sarray and alloc_barray set this value for use by virtual
 136:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * array routines.
 137:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
 138:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION last_rowsperchunk;	/* from most recent alloc_sarray/barray */
 139:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** } my_memory_mgr;
 140:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 141:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** typedef my_memory_mgr * my_mem_ptr;
 142:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 143:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 144:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
 145:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The control blocks for virtual arrays.
 146:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Note that these blocks are allocated in the "small" pool area.
ARM GAS  /tmp/ccQQGSTq.s 			page 4


 147:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * System-dependent info for the associated backing store (if any) is hidden
 148:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * inside the backing_store_info struct.
 149:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
 150:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 151:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** struct jvirt_sarray_control {
 152:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JSAMPARRAY mem_buffer;	/* => the in-memory buffer */
 153:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION rows_in_array;	/* total virtual array height */
 154:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION samplesperrow;	/* width of array (and of memory buffer) */
 155:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION maxaccess;		/* max rows accessed by access_virt_sarray */
 156:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION rows_in_mem;	/* height of memory buffer */
 157:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
 158:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION cur_start_row;	/* first logical row # in the buffer */
 159:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION first_undef_row;	/* row # of first uninitialized row */
 160:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   boolean pre_zero;		/* pre-zero mode requested? */
 161:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   boolean dirty;		/* do current buffer contents need written? */
 162:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   boolean b_s_open;		/* is backing-store data valid? */
 163:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_sarray_ptr next;	/* link to next virtual sarray control block */
 164:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   backing_store_info b_s_info;	/* System-dependent control info */
 165:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** };
 166:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 167:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** struct jvirt_barray_control {
 168:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JBLOCKARRAY mem_buffer;	/* => the in-memory buffer */
 169:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION rows_in_array;	/* total virtual array height */
 170:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION blocksperrow;	/* width of array (and of memory buffer) */
 171:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION maxaccess;		/* max rows accessed by access_virt_barray */
 172:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION rows_in_mem;	/* height of memory buffer */
 173:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
 174:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION cur_start_row;	/* first logical row # in the buffer */
 175:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION first_undef_row;	/* row # of first uninitialized row */
 176:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   boolean pre_zero;		/* pre-zero mode requested? */
 177:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   boolean dirty;		/* do current buffer contents need written? */
 178:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   boolean b_s_open;		/* is backing-store data valid? */
 179:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_barray_ptr next;	/* link to next virtual barray control block */
 180:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   backing_store_info b_s_info;	/* System-dependent control info */
 181:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** };
 182:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 183:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 184:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #ifdef MEM_STATS		/* optional extra stuff for statistics */
 185:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 186:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** LOCAL(void)
 187:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** print_mem_stats (j_common_ptr cinfo, int pool_id)
 188:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 189:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 190:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   small_pool_ptr shdr_ptr;
 191:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   large_pool_ptr lhdr_ptr;
 192:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 193:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Since this is only a debugging stub, we can cheat a little by using
 194:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * fprintf directly rather than going through the trace message code.
 195:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * This is helpful because message parm array can't handle longs.
 196:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
 197:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   fprintf(stderr, "Freeing pool %d, total space = %ld\n",
 198:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	  pool_id, mem->total_space_allocated);
 199:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 200:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (lhdr_ptr = mem->large_list[pool_id]; lhdr_ptr != NULL;
 201:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****        lhdr_ptr = lhdr_ptr->hdr.next) {
 202:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     fprintf(stderr, "  Large chunk used %ld\n",
 203:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	    (long) lhdr_ptr->hdr.bytes_used);
ARM GAS  /tmp/ccQQGSTq.s 			page 5


 204:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 205:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 206:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (shdr_ptr = mem->small_list[pool_id]; shdr_ptr != NULL;
 207:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****        shdr_ptr = shdr_ptr->hdr.next) {
 208:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     fprintf(stderr, "  Small chunk used %ld free %ld\n",
 209:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	    (long) shdr_ptr->hdr.bytes_used,
 210:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	    (long) shdr_ptr->hdr.bytes_left);
 211:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 212:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 213:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 214:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #endif /* MEM_STATS */
 215:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 216:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 217:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** LOCAL(void)
 218:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** out_of_memory (j_common_ptr cinfo, int which)
 219:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Report an out-of-memory error and stop execution */
 220:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* If we compiled MEM_STATS support, report alloc requests before dying */
 221:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
  27              		.loc 1 221 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
 222:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #ifdef MEM_STATS
 223:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
 224:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #endif
 225:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
  37              		.loc 1 225 0
  38 0002 0268     		ldr	r2, [r0]
  39 0004 3824     		movs	r4, #56
  40 0006 5461     		str	r4, [r2, #20]
  41 0008 0268     		ldr	r2, [r0]
  42 000a 9161     		str	r1, [r2, #24]
  43 000c 0368     		ldr	r3, [r0]
  44 000e 1B68     		ldr	r3, [r3]
  45 0010 9847     		blx	r3
  46              	.LVL1:
 226:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
  47              		.loc 1 226 0
  48 0012 10BD     		pop	{r4, pc}
  49              		.cfi_endproc
  50              	.LFE3:
  52              		.section	.text.do_sarray_io,"ax",%progbits
  53              		.align	1
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv5-sp-d16
  59              	do_sarray_io:
  60              	.LFB11:
 227:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 228:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
ARM GAS  /tmp/ccQQGSTq.s 			page 6


 229:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
 230:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Allocation of "small" objects.
 231:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
 232:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * For these, we use pooled storage.  When a new pool must be created,
 233:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * we try to get enough space for the current request plus a "slop" factor,
 234:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * where the slop will be the amount of leftover space in the new pool.
 235:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The speed vs. space tradeoff is largely determined by the slop values.
 236:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * A different slop value is provided for each pool class (lifetime),
 237:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * and we also distinguish the first pool of a class from later ones.
 238:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * NOTE: the values given work fairly well on both 16- and 32-bit-int
 239:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * machines, but may be too small if longs are 64 bits or more.
 240:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
 241:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 242:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** static const size_t first_pool_slop[JPOOL_NUMPOOLS] = 
 243:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 244:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	1600,			/* first PERMANENT pool */
 245:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	16000			/* first IMAGE pool */
 246:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** };
 247:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 248:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** static const size_t extra_pool_slop[JPOOL_NUMPOOLS] = 
 249:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 250:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	0,			/* additional PERMANENT pools */
 251:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	5000			/* additional IMAGE pools */
 252:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** };
 253:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 254:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #define MIN_SLOP  50		/* greater than 0 to avoid futile looping */
 255:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 256:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 257:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(void *)
 258:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
 259:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Allocate a "small" object */
 260:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 261:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 262:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   small_pool_ptr hdr_ptr, prev_hdr_ptr;
 263:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   char * data_ptr;
 264:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   size_t odd_bytes, min_request, slop;
 265:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 266:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Check for unsatisfiable request (do now to ensure no overflow below) */
 267:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 268:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 269:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 270:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
 271:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 272:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (odd_bytes > 0)
 273:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 274:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 275:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* See if space is available in any existing pool */
 276:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 277:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 278:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   prev_hdr_ptr = NULL;
 279:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr = mem->small_list[pool_id];
 280:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   while (hdr_ptr != NULL) {
 281:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 282:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       break;			/* found pool with enough space */
 283:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     prev_hdr_ptr = hdr_ptr;
 284:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     hdr_ptr = hdr_ptr->hdr.next;
 285:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
ARM GAS  /tmp/ccQQGSTq.s 			page 7


 286:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 287:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Time to make a new pool? */
 288:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (hdr_ptr == NULL) {
 289:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* min_request is what we need now, slop is what will be leftover */
 290:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     min_request = sizeofobject + SIZEOF(small_pool_hdr);
 291:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 292:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       slop = first_pool_slop[pool_id];
 293:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     else
 294:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       slop = extra_pool_slop[pool_id];
 295:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Don't ask for more than MAX_ALLOC_CHUNK */
 296:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 297:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 298:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Try to get space, if fail reduce slop and try again */
 299:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     for (;;) {
 300:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 301:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (hdr_ptr != NULL)
 302:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	break;
 303:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       slop /= 2;
 304:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (slop < MIN_SLOP)	/* give up when it gets real small */
 305:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 306:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 307:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     mem->total_space_allocated += min_request + slop;
 308:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Success, initialize the new pool header and add to end of list */
 309:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     hdr_ptr->hdr.next = NULL;
 310:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     hdr_ptr->hdr.bytes_used = 0;
 311:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 312:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 313:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       mem->small_list[pool_id] = hdr_ptr;
 314:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     else
 315:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       prev_hdr_ptr->hdr.next = hdr_ptr;
 316:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 317:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 318:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* OK, allocate the object from the current pool */
 319:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
 320:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 321:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr->hdr.bytes_used += sizeofobject;
 322:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr->hdr.bytes_left -= sizeofobject;
 323:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 324:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   return (void *) data_ptr;
 325:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 326:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 327:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 328:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
 329:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Allocation of "large" objects.
 330:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
 331:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The external semantics of these are the same as "small" objects,
 332:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * except that FAR pointers are used on 80x86.  However the pool
 333:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * management heuristics are quite different.  We assume that each
 334:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * request is large enough that it may as well be passed directly to
 335:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * jpeg_get_large; the pool management just links everything together
 336:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * so that we can free it all on demand.
 337:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Note: the major use of "large" objects is in JSAMPARRAY and JBLOCKARRAY
 338:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * structures.  The routines that create these structures (see below)
 339:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * deliberately bunch rows together to ensure a large request size.
 340:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
 341:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 342:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(void FAR *)
ARM GAS  /tmp/ccQQGSTq.s 			page 8


 343:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
 344:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Allocate a "large" object */
 345:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 346:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 347:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   large_pool_ptr hdr_ptr;
 348:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   size_t odd_bytes;
 349:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 350:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Check for unsatisfiable request (do now to ensure no overflow below) */
 351:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 352:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 353:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 354:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
 355:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 356:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (odd_bytes > 0)
 357:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 358:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 359:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Always make a new pool */
 360:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 361:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 362:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 363:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 364:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    SIZEOF(large_pool_hdr));
 365:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (hdr_ptr == NULL)
 366:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 367:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 368:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 369:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Success, initialize the new pool header and add to list */
 370:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr->hdr.next = mem->large_list[pool_id];
 371:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* We maintain space counts in each pool header for statistical purposes,
 372:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * even though they are not needed for allocation.
 373:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
 374:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr->hdr.bytes_used = sizeofobject;
 375:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr->hdr.bytes_left = 0;
 376:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->large_list[pool_id] = hdr_ptr;
 377:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 378:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
 379:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 380:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 381:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 382:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
 383:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Creation of 2-D sample arrays.
 384:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The pointers are in near heap, the samples themselves in FAR heap.
 385:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
 386:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * To minimize allocation overhead and to allow I/O of large contiguous
 387:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * blocks, we allocate the sample rows in groups of as many rows as possible
 388:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.
 389:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * NB: the virtual array control routines, later in this file, know about
 390:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * this chunking of rows.  The rowsperchunk value is left in the mem manager
 391:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * object so that it can be saved away if this sarray is the workspace for
 392:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * a virtual array.
 393:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
 394:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 395:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(JSAMPARRAY)
 396:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** alloc_sarray (j_common_ptr cinfo, int pool_id,
 397:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	      JDIMENSION samplesperrow, JDIMENSION numrows)
 398:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Allocate a 2-D sample array */
 399:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
ARM GAS  /tmp/ccQQGSTq.s 			page 9


 400:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 401:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JSAMPARRAY result;
 402:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JSAMPROW workspace;
 403:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION rowsperchunk, currow, i;
 404:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   long ltemp;
 405:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 406:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Calculate max # of rows allowed in one allocation chunk */
 407:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 408:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	  ((long) samplesperrow * SIZEOF(JSAMPLE));
 409:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (ltemp <= 0)
 410:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 411:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (ltemp < (long) numrows)
 412:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 413:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   else
 414:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = numrows;
 415:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->last_rowsperchunk = rowsperchunk;
 416:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 417:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Get space for row pointers (small object) */
 418:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 419:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 420:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 421:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Get the rows themselves (large objects) */
 422:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   currow = 0;
 423:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   while (currow < numrows) {
 424:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 425:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 426:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
 427:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		  * SIZEOF(JSAMPLE)));
 428:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     for (i = rowsperchunk; i > 0; i--) {
 429:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       result[currow++] = workspace;
 430:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       workspace += samplesperrow;
 431:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 432:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 433:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 434:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   return result;
 435:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 436:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 437:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 438:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
 439:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Creation of 2-D coefficient-block arrays.
 440:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * This is essentially the same as the code for sample arrays, above.
 441:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
 442:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 443:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(JBLOCKARRAY)
 444:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** alloc_barray (j_common_ptr cinfo, int pool_id,
 445:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	      JDIMENSION blocksperrow, JDIMENSION numrows)
 446:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Allocate a 2-D coefficient-block array */
 447:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 448:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 449:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JBLOCKARRAY result;
 450:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JBLOCKROW workspace;
 451:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION rowsperchunk, currow, i;
 452:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   long ltemp;
 453:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 454:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Calculate max # of rows allowed in one allocation chunk */
 455:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 456:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	  ((long) blocksperrow * SIZEOF(JBLOCK));
ARM GAS  /tmp/ccQQGSTq.s 			page 10


 457:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (ltemp <= 0)
 458:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 459:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (ltemp < (long) numrows)
 460:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 461:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   else
 462:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = numrows;
 463:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->last_rowsperchunk = rowsperchunk;
 464:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 465:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Get space for row pointers (small object) */
 466:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 467:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 468:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 469:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Get the rows themselves (large objects) */
 470:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   currow = 0;
 471:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   while (currow < numrows) {
 472:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 473:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 474:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 475:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		  * SIZEOF(JBLOCK)));
 476:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     for (i = rowsperchunk; i > 0; i--) {
 477:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       result[currow++] = workspace;
 478:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       workspace += blocksperrow;
 479:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 480:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 481:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 482:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   return result;
 483:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 484:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 485:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 486:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
 487:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * About virtual array management:
 488:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
 489:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The above "normal" array routines are only used to allocate strip buffers
 490:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * (as wide as the image, but just a few rows high).  Full-image-sized buffers
 491:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * are handled as "virtual" arrays.  The array is still accessed a strip at a
 492:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * time, but the memory manager must save the whole array for repeated
 493:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * accesses.  The intended implementation is that there is a strip buffer in
 494:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * memory (as high as is possible given the desired memory limit), plus a
 495:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * backing file that holds the rest of the array.
 496:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
 497:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The request_virt_array routines are told the total size of the image and
 498:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * the maximum number of rows that will be accessed at once.  The in-memory
 499:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * buffer must be at least as large as the maxaccess value.
 500:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
 501:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The request routines create control blocks but not the in-memory buffers.
 502:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * That is postponed until realize_virt_arrays is called.  At that time the
 503:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * total amount of space needed is known (approximately, anyway), so free
 504:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * memory can be divided up fairly.
 505:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
 506:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * The access_virt_array routines are responsible for making a specific strip
 507:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * area accessible (after reading or writing the backing file, if necessary).
 508:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Note that the access routines are told whether the caller intends to modify
 509:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * the accessed strip; during a read-only pass this saves having to rewrite
 510:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * data to disk.  The access routines are also responsible for pre-zeroing
 511:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * any newly accessed rows, if pre-zeroing was requested.
 512:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  *
 513:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * In current usage, the access requests are usually for nonoverlapping
ARM GAS  /tmp/ccQQGSTq.s 			page 11


 514:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * strips; that is, successive access start_row numbers differ by exactly
 515:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * num_rows = maxaccess.  This means we can get good performance with simple
 516:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * buffer dump/reload logic, by making the in-memory buffer be a multiple
 517:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * of the access height; then there will never be accesses across bufferload
 518:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * boundaries.  The code will still work with overlapping access requests,
 519:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * but it doesn't handle bufferload overlaps very efficiently.
 520:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
 521:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 522:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 523:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(jvirt_sarray_ptr)
 524:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
 525:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		     JDIMENSION samplesperrow, JDIMENSION numrows,
 526:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		     JDIMENSION maxaccess)
 527:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Request a virtual 2-D sample array */
 528:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 529:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 530:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_sarray_ptr result;
 531:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 532:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Only IMAGE-lifetime virtual arrays are currently supported */
 533:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (pool_id != JPOOL_IMAGE)
 534:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 535:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 536:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* get control block */
 537:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 538:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					  SIZEOF(struct jvirt_sarray_control));
 539:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 540:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->mem_buffer = NULL;	/* marks array not yet realized */
 541:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->rows_in_array = numrows;
 542:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->samplesperrow = samplesperrow;
 543:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->maxaccess = maxaccess;
 544:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->pre_zero = pre_zero;
 545:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 546:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 547:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->virt_sarray_list = result;
 548:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 549:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   return result;
 550:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 551:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 552:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 553:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(jvirt_barray_ptr)
 554:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
 555:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		     JDIMENSION blocksperrow, JDIMENSION numrows,
 556:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		     JDIMENSION maxaccess)
 557:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Request a virtual 2-D coefficient-block array */
 558:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 559:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 560:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_barray_ptr result;
 561:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 562:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Only IMAGE-lifetime virtual arrays are currently supported */
 563:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (pool_id != JPOOL_IMAGE)
 564:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 565:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 566:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* get control block */
 567:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 568:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					  SIZEOF(struct jvirt_barray_control));
 569:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 570:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->mem_buffer = NULL;	/* marks array not yet realized */
ARM GAS  /tmp/ccQQGSTq.s 			page 12


 571:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->rows_in_array = numrows;
 572:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->blocksperrow = blocksperrow;
 573:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->maxaccess = maxaccess;
 574:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->pre_zero = pre_zero;
 575:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 576:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 577:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->virt_barray_list = result;
 578:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 579:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   return result;
 580:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 581:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 582:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 583:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(void)
 584:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** realize_virt_arrays (j_common_ptr cinfo)
 585:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Allocate the in-memory buffers for any unrealized virtual arrays */
 586:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 587:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 588:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   long space_per_minheight, maximum_space, avail_mem;
 589:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   long minheights, max_minheights;
 590:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_sarray_ptr sptr;
 591:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_barray_ptr bptr;
 592:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 593:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Compute the minimum space needed (maxaccess rows in each buffer)
 594:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * and the maximum space needed (full image height in each buffer).
 595:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * These may be of use to the system-dependent jpeg_mem_available routine.
 596:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
 597:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   space_per_minheight = 0;
 598:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   maximum_space = 0;
 599:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 600:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 601:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       space_per_minheight += (long) sptr->maxaccess *
 602:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 603:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       maximum_space += (long) sptr->rows_in_array *
 604:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 605:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 606:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 607:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 608:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 609:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       space_per_minheight += (long) bptr->maxaccess *
 610:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 611:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       maximum_space += (long) bptr->rows_in_array *
 612:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 613:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 614:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 615:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 616:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (space_per_minheight <= 0)
 617:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     return;			/* no unrealized arrays, no work */
 618:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 619:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Determine amount of memory to actually use; this is system-dependent. */
 620:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 621:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				 mem->total_space_allocated);
 622:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 623:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* If the maximum space needed is available, make all the buffers full
 624:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * height; otherwise parcel it out with the same number of minheights
 625:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * in each buffer.
 626:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
 627:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (avail_mem >= maximum_space)
ARM GAS  /tmp/ccQQGSTq.s 			page 13


 628:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     max_minheights = 1000000000L;
 629:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   else {
 630:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     max_minheights = avail_mem / space_per_minheight;
 631:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* If there doesn't seem to be enough space, try to get the minimum
 632:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * anyway.  This allows a "stub" implementation of jpeg_mem_available().
 633:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      */
 634:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (max_minheights <= 0)
 635:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       max_minheights = 1;
 636:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 637:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 638:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Allocate the in-memory buffers and initialize backing store as needed. */
 639:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 640:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 641:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 642:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 643:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (minheights <= max_minheights) {
 644:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	/* This buffer fits in memory */
 645:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	sptr->rows_in_mem = sptr->rows_in_array;
 646:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       } else {
 647:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	/* It doesn't fit in memory, create backing store. */
 648:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 649:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 650:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) sptr->rows_in_array *
 651:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) sptr->samplesperrow *
 652:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) SIZEOF(JSAMPLE));
 653:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	sptr->b_s_open = TRUE;
 654:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 655:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 656:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				      sptr->samplesperrow, sptr->rows_in_mem);
 657:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       sptr->rowsperchunk = mem->last_rowsperchunk;
 658:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       sptr->cur_start_row = 0;
 659:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       sptr->first_undef_row = 0;
 660:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       sptr->dirty = FALSE;
 661:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 662:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 663:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 664:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 665:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 666:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 667:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (minheights <= max_minheights) {
 668:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	/* This buffer fits in memory */
 669:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	bptr->rows_in_mem = bptr->rows_in_array;
 670:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       } else {
 671:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	/* It doesn't fit in memory, create backing store. */
 672:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 673:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 674:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) bptr->rows_in_array *
 675:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) bptr->blocksperrow *
 676:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) SIZEOF(JBLOCK));
 677:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	bptr->b_s_open = TRUE;
 678:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 679:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 680:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				      bptr->blocksperrow, bptr->rows_in_mem);
 681:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       bptr->rowsperchunk = mem->last_rowsperchunk;
 682:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       bptr->cur_start_row = 0;
 683:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       bptr->first_undef_row = 0;
 684:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       bptr->dirty = FALSE;
ARM GAS  /tmp/ccQQGSTq.s 			page 14


 685:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 686:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 687:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 688:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 689:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 690:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** LOCAL(void)
 691:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
 692:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Do backing store read or write of a virtual sample array */
 693:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
  61              		.loc 1 693 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              	.LVL2:
  66 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  67              	.LCFI1:
  68              		.cfi_def_cfa_offset 36
  69              		.cfi_offset 4, -36
  70              		.cfi_offset 5, -32
  71              		.cfi_offset 6, -28
  72              		.cfi_offset 7, -24
  73              		.cfi_offset 8, -20
  74              		.cfi_offset 9, -16
  75              		.cfi_offset 10, -12
  76              		.cfi_offset 11, -8
  77              		.cfi_offset 14, -4
  78 0004 83B0     		sub	sp, sp, #12
  79              	.LCFI2:
  80              		.cfi_def_cfa_offset 48
  81 0006 8346     		mov	fp, r0
  82 0008 0D46     		mov	r5, r1
  83 000a 9246     		mov	r10, r2
 694:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   long bytesperrow, file_offset, byte_count, rows, thisrow, i;
 695:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 696:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
  84              		.loc 1 696 0
  85 000c D1F80890 		ldr	r9, [r1, #8]
  86              	.LVL3:
 697:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
  87              		.loc 1 697 0
  88 0010 8B69     		ldr	r3, [r1, #24]
  89 0012 03FB09F8 		mul	r8, r3, r9
  90              	.LVL4:
 698:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 699:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
  91              		.loc 1 699 0
  92 0016 0026     		movs	r6, #0
  93 0018 0CE0     		b	.L4
  94              	.LVL5:
  95              	.L6:
 700:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 701:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 702:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Transfer no more than is currently defined */
 703:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     thisrow = (long) ptr->cur_start_row + i;
 704:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 705:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Transfer no more than fits in file */
 706:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
ARM GAS  /tmp/ccQQGSTq.s 			page 15


 707:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 708:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       break;
 709:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     byte_count = rows * bytesperrow;
 710:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (writing)
 711:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 712:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 713:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    file_offset, byte_count);
 714:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     else
 715:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 716:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
  96              		.loc 1 716 0
  97 001a 2B68     		ldr	r3, [r5]
  98              	.LVL6:
 715:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
  99              		.loc 1 715 0
 100 001c 53F82620 		ldr	r2, [r3, r6, lsl #2]
 101              	.LVL7:
 102 0020 0094     		str	r4, [sp]
 103              	.LVL8:
 104 0022 4346     		mov	r3, r8
 105 0024 05F13001 		add	r1, r5, #48
 106 0028 5846     		mov	r0, fp
 107 002a 2F6B     		ldr	r7, [r5, #48]
 108 002c B847     		blx	r7
 109              	.LVL9:
 110              	.L7:
 717:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					   file_offset, byte_count);
 718:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     file_offset += byte_count;
 111              		.loc 1 718 0 discriminator 2
 112 002e A044     		add	r8, r8, r4
 113              	.LVL10:
 699:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 114              		.loc 1 699 0 discriminator 2
 115 0030 6B69     		ldr	r3, [r5, #20]
 116 0032 1E44     		add	r6, r6, r3
 117              	.LVL11:
 118              	.L4:
 699:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 119              		.loc 1 699 0 is_stmt 0 discriminator 1
 120 0034 2B69     		ldr	r3, [r5, #16]
 121 0036 B342     		cmp	r3, r6
 122 0038 22DD     		ble	.L3
 701:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Transfer no more than is currently defined */
 123              		.loc 1 701 0 is_stmt 1
 124 003a 9B1B     		subs	r3, r3, r6
 125 003c 6C69     		ldr	r4, [r5, #20]
 126 003e A342     		cmp	r3, r4
 127 0040 A8BF     		it	ge
 128 0042 2346     		movge	r3, r4
 129              	.LVL12:
 703:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 130              		.loc 1 703 0
 131 0044 AC69     		ldr	r4, [r5, #24]
 132 0046 3444     		add	r4, r4, r6
 133              	.LVL13:
 704:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Transfer no more than fits in file */
 134              		.loc 1 704 0
ARM GAS  /tmp/ccQQGSTq.s 			page 16


 135 0048 E969     		ldr	r1, [r5, #28]
 136 004a 091B     		subs	r1, r1, r4
 137 004c 8B42     		cmp	r3, r1
 138 004e A8BF     		it	ge
 139 0050 0B46     		movge	r3, r1
 140              	.LVL14:
 706:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 141              		.loc 1 706 0
 142 0052 6A68     		ldr	r2, [r5, #4]
 143 0054 141B     		subs	r4, r2, r4
 144              	.LVL15:
 145 0056 A342     		cmp	r3, r4
 146 0058 A8BF     		it	ge
 147 005a 2346     		movge	r3, r4
 148              	.LVL16:
 707:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       break;
 149              		.loc 1 707 0
 150 005c 002B     		cmp	r3, #0
 151 005e 0FDD     		ble	.L3
 709:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (writing)
 152              		.loc 1 709 0
 153 0060 03FB09F4 		mul	r4, r3, r9
 154              	.LVL17:
 710:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 155              		.loc 1 710 0
 156 0064 BAF1000F 		cmp	r10, #0
 157 0068 D7D0     		beq	.L6
 712:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    file_offset, byte_count);
 158              		.loc 1 712 0
 159 006a 2B68     		ldr	r3, [r5]
 160              	.LVL18:
 711:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 161              		.loc 1 711 0
 162 006c 53F82620 		ldr	r2, [r3, r6, lsl #2]
 163              	.LVL19:
 164 0070 0094     		str	r4, [sp]
 165              	.LVL20:
 166 0072 4346     		mov	r3, r8
 167 0074 05F13001 		add	r1, r5, #48
 168 0078 5846     		mov	r0, fp
 169 007a 6F6B     		ldr	r7, [r5, #52]
 170 007c B847     		blx	r7
 171              	.LVL21:
 172 007e D6E7     		b	.L7
 173              	.LVL22:
 174              	.L3:
 719:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 720:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 175              		.loc 1 720 0
 176 0080 03B0     		add	sp, sp, #12
 177              	.LCFI3:
 178              		.cfi_def_cfa_offset 36
 179              		@ sp needed
 180 0082 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 181              		.cfi_endproc
 182              	.LFE11:
 184              		.section	.text.do_barray_io,"ax",%progbits
ARM GAS  /tmp/ccQQGSTq.s 			page 17


 185              		.align	1
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv5-sp-d16
 191              	do_barray_io:
 192              	.LFB12:
 721:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 722:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 723:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** LOCAL(void)
 724:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
 725:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Do backing store read or write of a virtual coefficient-block array */
 726:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 193              		.loc 1 726 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              	.LVL23:
 198 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 199              	.LCFI4:
 200              		.cfi_def_cfa_offset 36
 201              		.cfi_offset 4, -36
 202              		.cfi_offset 5, -32
 203              		.cfi_offset 6, -28
 204              		.cfi_offset 7, -24
 205              		.cfi_offset 8, -20
 206              		.cfi_offset 9, -16
 207              		.cfi_offset 10, -12
 208              		.cfi_offset 11, -8
 209              		.cfi_offset 14, -4
 210 0004 83B0     		sub	sp, sp, #12
 211              	.LCFI5:
 212              		.cfi_def_cfa_offset 48
 213 0006 8346     		mov	fp, r0
 214 0008 0D46     		mov	r5, r1
 215 000a 9246     		mov	r10, r2
 727:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   long bytesperrow, file_offset, byte_count, rows, thisrow, i;
 728:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 729:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 216              		.loc 1 729 0
 217 000c 8B68     		ldr	r3, [r1, #8]
 218 000e 4FEAC319 		lsl	r9, r3, #7
 219              	.LVL24:
 730:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
 220              		.loc 1 730 0
 221 0012 8B69     		ldr	r3, [r1, #24]
 222 0014 03FB09F8 		mul	r8, r3, r9
 223              	.LVL25:
 731:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 732:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 224              		.loc 1 732 0
 225 0018 0026     		movs	r6, #0
 226 001a 0CE0     		b	.L11
 227              	.LVL26:
 228              	.L13:
 733:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 734:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
ARM GAS  /tmp/ccQQGSTq.s 			page 18


 735:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Transfer no more than is currently defined */
 736:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     thisrow = (long) ptr->cur_start_row + i;
 737:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 738:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Transfer no more than fits in file */
 739:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 740:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 741:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       break;
 742:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     byte_count = rows * bytesperrow;
 743:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (writing)
 744:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 745:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 746:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    file_offset, byte_count);
 747:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     else
 748:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 749:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
 229              		.loc 1 749 0
 230 001c 2B68     		ldr	r3, [r5]
 231              	.LVL27:
 748:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
 232              		.loc 1 748 0
 233 001e 53F82620 		ldr	r2, [r3, r6, lsl #2]
 234              	.LVL28:
 235 0022 0094     		str	r4, [sp]
 236              	.LVL29:
 237 0024 4346     		mov	r3, r8
 238 0026 05F13001 		add	r1, r5, #48
 239 002a 5846     		mov	r0, fp
 240 002c 2F6B     		ldr	r7, [r5, #48]
 241 002e B847     		blx	r7
 242              	.LVL30:
 243              	.L14:
 750:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					   file_offset, byte_count);
 751:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     file_offset += byte_count;
 244              		.loc 1 751 0 discriminator 2
 245 0030 A044     		add	r8, r8, r4
 246              	.LVL31:
 732:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 247              		.loc 1 732 0 discriminator 2
 248 0032 6B69     		ldr	r3, [r5, #20]
 249 0034 1E44     		add	r6, r6, r3
 250              	.LVL32:
 251              	.L11:
 732:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 252              		.loc 1 732 0 is_stmt 0 discriminator 1
 253 0036 2B69     		ldr	r3, [r5, #16]
 254 0038 B342     		cmp	r3, r6
 255 003a 22DD     		ble	.L10
 734:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Transfer no more than is currently defined */
 256              		.loc 1 734 0 is_stmt 1
 257 003c 9B1B     		subs	r3, r3, r6
 258 003e 6C69     		ldr	r4, [r5, #20]
 259 0040 A342     		cmp	r3, r4
 260 0042 A8BF     		it	ge
 261 0044 2346     		movge	r3, r4
 262              	.LVL33:
 736:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 263              		.loc 1 736 0
ARM GAS  /tmp/ccQQGSTq.s 			page 19


 264 0046 AC69     		ldr	r4, [r5, #24]
 265 0048 3444     		add	r4, r4, r6
 266              	.LVL34:
 737:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Transfer no more than fits in file */
 267              		.loc 1 737 0
 268 004a E969     		ldr	r1, [r5, #28]
 269 004c 091B     		subs	r1, r1, r4
 270 004e 8B42     		cmp	r3, r1
 271 0050 A8BF     		it	ge
 272 0052 0B46     		movge	r3, r1
 273              	.LVL35:
 739:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 274              		.loc 1 739 0
 275 0054 6A68     		ldr	r2, [r5, #4]
 276 0056 141B     		subs	r4, r2, r4
 277              	.LVL36:
 278 0058 A342     		cmp	r3, r4
 279 005a A8BF     		it	ge
 280 005c 2346     		movge	r3, r4
 281              	.LVL37:
 740:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       break;
 282              		.loc 1 740 0
 283 005e 002B     		cmp	r3, #0
 284 0060 0FDD     		ble	.L10
 742:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (writing)
 285              		.loc 1 742 0
 286 0062 03FB09F4 		mul	r4, r3, r9
 287              	.LVL38:
 743:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 288              		.loc 1 743 0
 289 0066 BAF1000F 		cmp	r10, #0
 290 006a D7D0     		beq	.L13
 745:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    file_offset, byte_count);
 291              		.loc 1 745 0
 292 006c 2B68     		ldr	r3, [r5]
 293              	.LVL39:
 744:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 294              		.loc 1 744 0
 295 006e 53F82620 		ldr	r2, [r3, r6, lsl #2]
 296              	.LVL40:
 297 0072 0094     		str	r4, [sp]
 298              	.LVL41:
 299 0074 4346     		mov	r3, r8
 300 0076 05F13001 		add	r1, r5, #48
 301 007a 5846     		mov	r0, fp
 302 007c 6F6B     		ldr	r7, [r5, #52]
 303 007e B847     		blx	r7
 304              	.LVL42:
 305 0080 D6E7     		b	.L14
 306              	.LVL43:
 307              	.L10:
 752:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 753:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 308              		.loc 1 753 0
 309 0082 03B0     		add	sp, sp, #12
 310              	.LCFI6:
 311              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/ccQQGSTq.s 			page 20


 312              		@ sp needed
 313 0084 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 314              		.cfi_endproc
 315              	.LFE12:
 317              		.section	.text.alloc_small,"ax",%progbits
 318              		.align	1
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 322              		.fpu fpv5-sp-d16
 324              	alloc_small:
 325              	.LFB4:
 260:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 326              		.loc 1 260 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              	.LVL44:
 331 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 332              	.LCFI7:
 333              		.cfi_def_cfa_offset 40
 334              		.cfi_offset 3, -40
 335              		.cfi_offset 4, -36
 336              		.cfi_offset 5, -32
 337              		.cfi_offset 6, -28
 338              		.cfi_offset 7, -24
 339              		.cfi_offset 8, -20
 340              		.cfi_offset 9, -16
 341              		.cfi_offset 10, -12
 342              		.cfi_offset 11, -8
 343              		.cfi_offset 14, -4
 344 0004 0646     		mov	r6, r0
 345 0006 8946     		mov	r9, r1
 346 0008 1446     		mov	r4, r2
 261:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   small_pool_ptr hdr_ptr, prev_hdr_ptr;
 347              		.loc 1 261 0
 348 000a D0F804A0 		ldr	r10, [r0, #4]
 349              	.LVL45:
 267:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 350              		.loc 1 267 0
 351 000e 4FF6F073 		movw	r3, #65520
 352 0012 9A42     		cmp	r2, r3
 353 0014 1ED8     		bhi	.L33
 354              	.LVL46:
 355              	.L18:
 272:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 356              		.loc 1 272 0
 357 0016 14F00703 		ands	r3, r4, #7
 358              	.LVL47:
 359 001a 01D0     		beq	.L19
 273:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 360              		.loc 1 273 0
 361 001c E41A     		subs	r4, r4, r3
 362              	.LVL48:
 363 001e 0834     		adds	r4, r4, #8
 364              	.LVL49:
 365              	.L19:
ARM GAS  /tmp/ccQQGSTq.s 			page 21


 276:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 366              		.loc 1 276 0
 367 0020 B9F1010F 		cmp	r9, #1
 368 0024 09D9     		bls	.L20
 277:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   prev_hdr_ptr = NULL;
 369              		.loc 1 277 0
 370 0026 3368     		ldr	r3, [r6]
 371              	.LVL50:
 372 0028 0F22     		movs	r2, #15
 373 002a 5A61     		str	r2, [r3, #20]
 374 002c 3368     		ldr	r3, [r6]
 375 002e C3F81890 		str	r9, [r3, #24]
 376 0032 3368     		ldr	r3, [r6]
 377 0034 1B68     		ldr	r3, [r3]
 378 0036 3046     		mov	r0, r6
 379 0038 9847     		blx	r3
 380              	.LVL51:
 381              	.L20:
 279:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   while (hdr_ptr != NULL) {
 382              		.loc 1 279 0
 383 003a 09F10C03 		add	r3, r9, #12
 384 003e 0AEB8303 		add	r3, r10, r3, lsl #2
 385 0042 5B68     		ldr	r3, [r3, #4]
 386              	.LVL52:
 278:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr = mem->small_list[pool_id];
 387              		.loc 1 278 0
 388 0044 0027     		movs	r7, #0
 389              	.LVL53:
 390              	.L21:
 280:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 391              		.loc 1 280 0
 392 0046 4BB1     		cbz	r3, .L22
 281:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       break;			/* found pool with enough space */
 393              		.loc 1 281 0
 394 0048 9A68     		ldr	r2, [r3, #8]
 395 004a A242     		cmp	r2, r4
 396 004c 06D2     		bcs	.L22
 397              	.LVL54:
 283:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     hdr_ptr = hdr_ptr->hdr.next;
 398              		.loc 1 283 0
 399 004e 1F46     		mov	r7, r3
 284:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 400              		.loc 1 284 0
 401 0050 1B68     		ldr	r3, [r3]
 402              	.LVL55:
 403 0052 F8E7     		b	.L21
 404              	.LVL56:
 405              	.L33:
 268:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 406              		.loc 1 268 0
 407 0054 0121     		movs	r1, #1
 408              	.LVL57:
 409 0056 FFF7FEFF 		bl	out_of_memory
 410              	.LVL58:
 411 005a DCE7     		b	.L18
 412              	.LVL59:
 413              	.L22:
ARM GAS  /tmp/ccQQGSTq.s 			page 22


 288:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* min_request is what we need now, slop is what will be leftover */
 414              		.loc 1 288 0
 415 005c 53B1     		cbz	r3, .L34
 416              	.LVL60:
 417              	.L24:
 320:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr->hdr.bytes_used += sizeofobject;
 418              		.loc 1 320 0
 419 005e 5A68     		ldr	r2, [r3, #4]
 420 0060 02F11000 		add	r0, r2, #16
 421              	.LVL61:
 321:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr->hdr.bytes_left -= sizeofobject;
 422              		.loc 1 321 0
 423 0064 2244     		add	r2, r2, r4
 424 0066 5A60     		str	r2, [r3, #4]
 322:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 425              		.loc 1 322 0
 426 0068 9A68     		ldr	r2, [r3, #8]
 427 006a 141B     		subs	r4, r2, r4
 428              	.LVL62:
 429 006c 9C60     		str	r4, [r3, #8]
 325:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 430              		.loc 1 325 0
 431 006e 1844     		add	r0, r0, r3
 432              	.LVL63:
 433 0070 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 434              	.LVL64:
 435              	.L34:
 290:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 436              		.loc 1 290 0
 437 0074 04F1100B 		add	fp, r4, #16
 438              	.LVL65:
 291:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       slop = first_pool_slop[pool_id];
 439              		.loc 1 291 0
 440 0078 BFB1     		cbz	r7, .L35
 294:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Don't ask for more than MAX_ALLOC_CHUNK */
 441              		.loc 1 294 0
 442 007a 184B     		ldr	r3, .L37
 443              	.LVL66:
 444 007c 53F82930 		ldr	r3, [r3, r9, lsl #2]
 445              	.LVL67:
 446              	.L26:
 296:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 447              		.loc 1 296 0
 448 0080 CBF58035 		rsb	r5, fp, #65536
 449 0084 9D42     		cmp	r5, r3
 450 0086 00D3     		bcc	.L28
 451 0088 1D46     		mov	r5, r3
 452              	.LVL68:
 453              	.L28:
 300:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (hdr_ptr != NULL)
 454              		.loc 1 300 0
 455 008a 05EB0B08 		add	r8, r5, fp
 456 008e 4146     		mov	r1, r8
 457 0090 3046     		mov	r0, r6
 458 0092 FFF7FEFF 		bl	jpeg_get_small
 459              	.LVL69:
 301:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	break;
ARM GAS  /tmp/ccQQGSTq.s 			page 23


 460              		.loc 1 301 0
 461 0096 0346     		mov	r3, r0
 462 0098 58B9     		cbnz	r0, .L29
 303:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (slop < MIN_SLOP)	/* give up when it gets real small */
 463              		.loc 1 303 0
 464 009a 6D08     		lsrs	r5, r5, #1
 465              	.LVL70:
 304:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 466              		.loc 1 304 0
 467 009c 312D     		cmp	r5, #49
 468 009e F4D8     		bhi	.L28
 305:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 469              		.loc 1 305 0
 470 00a0 0221     		movs	r1, #2
 471 00a2 3046     		mov	r0, r6
 472              	.LVL71:
 473 00a4 FFF7FEFF 		bl	out_of_memory
 474              	.LVL72:
 475 00a8 EFE7     		b	.L28
 476              	.LVL73:
 477              	.L35:
 292:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     else
 478              		.loc 1 292 0
 479 00aa 0D4B     		ldr	r3, .L37+4
 480              	.LVL74:
 481 00ac 53F82930 		ldr	r3, [r3, r9, lsl #2]
 482              	.LVL75:
 483 00b0 E6E7     		b	.L26
 484              	.LVL76:
 485              	.L29:
 307:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Success, initialize the new pool header and add to end of list */
 486              		.loc 1 307 0
 487 00b2 DAF84C20 		ldr	r2, [r10, #76]
 488 00b6 4244     		add	r2, r2, r8
 489 00b8 CAF84C20 		str	r2, [r10, #76]
 309:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     hdr_ptr->hdr.bytes_used = 0;
 490              		.loc 1 309 0
 491 00bc 0022     		movs	r2, #0
 492 00be 0260     		str	r2, [r0]
 310:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 493              		.loc 1 310 0
 494 00c0 4260     		str	r2, [r0, #4]
 311:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 495              		.loc 1 311 0
 496 00c2 2544     		add	r5, r5, r4
 497              	.LVL77:
 498 00c4 8560     		str	r5, [r0, #8]
 312:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       mem->small_list[pool_id] = hdr_ptr;
 499              		.loc 1 312 0
 500 00c6 0FB1     		cbz	r7, .L36
 315:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 501              		.loc 1 315 0
 502 00c8 3860     		str	r0, [r7]
 503 00ca C8E7     		b	.L24
 504              	.L36:
 313:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     else
 505              		.loc 1 313 0
ARM GAS  /tmp/ccQQGSTq.s 			page 24


 506 00cc 09F10C09 		add	r9, r9, #12
 507              	.LVL78:
 508 00d0 0AEB8909 		add	r9, r10, r9, lsl #2
 509              	.LVL79:
 510 00d4 C9F80400 		str	r0, [r9, #4]
 511 00d8 C1E7     		b	.L24
 512              	.L38:
 513 00da 00BF     		.align	2
 514              	.L37:
 515 00dc 00000000 		.word	.LANCHOR1
 516 00e0 00000000 		.word	.LANCHOR0
 517              		.cfi_endproc
 518              	.LFE4:
 520              		.section	.text.request_virt_barray,"ax",%progbits
 521              		.align	1
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 525              		.fpu fpv5-sp-d16
 527              	request_virt_barray:
 528              	.LFB9:
 558:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 529              		.loc 1 558 0
 530              		.cfi_startproc
 531              		@ args = 8, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              	.LVL80:
 534 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 535              	.LCFI8:
 536              		.cfi_def_cfa_offset 24
 537              		.cfi_offset 4, -24
 538              		.cfi_offset 5, -20
 539              		.cfi_offset 6, -16
 540              		.cfi_offset 7, -12
 541              		.cfi_offset 8, -8
 542              		.cfi_offset 14, -4
 543 0004 0446     		mov	r4, r0
 544 0006 0D46     		mov	r5, r1
 545 0008 1746     		mov	r7, r2
 546 000a 9846     		mov	r8, r3
 559:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_barray_ptr result;
 547              		.loc 1 559 0
 548 000c 4668     		ldr	r6, [r0, #4]
 549              	.LVL81:
 563:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 550              		.loc 1 563 0
 551 000e 0129     		cmp	r1, #1
 552 0010 07D0     		beq	.L40
 564:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 553              		.loc 1 564 0
 554 0012 0368     		ldr	r3, [r0]
 555              	.LVL82:
 556 0014 0F22     		movs	r2, #15
 557              	.LVL83:
 558 0016 5A61     		str	r2, [r3, #20]
 559 0018 0368     		ldr	r3, [r0]
 560 001a 9961     		str	r1, [r3, #24]
ARM GAS  /tmp/ccQQGSTq.s 			page 25


 561 001c 0368     		ldr	r3, [r0]
 562 001e 1B68     		ldr	r3, [r3]
 563 0020 9847     		blx	r3
 564              	.LVL84:
 565              	.L40:
 567:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					  SIZEOF(struct jvirt_barray_control));
 566              		.loc 1 567 0
 567 0022 3C22     		movs	r2, #60
 568 0024 2946     		mov	r1, r5
 569 0026 2046     		mov	r0, r4
 570 0028 FFF7FEFF 		bl	alloc_small
 571              	.LVL85:
 570:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->rows_in_array = numrows;
 572              		.loc 1 570 0
 573 002c 0022     		movs	r2, #0
 574 002e 0260     		str	r2, [r0]
 571:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->blocksperrow = blocksperrow;
 575              		.loc 1 571 0
 576 0030 0699     		ldr	r1, [sp, #24]
 577 0032 4160     		str	r1, [r0, #4]
 572:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->maxaccess = maxaccess;
 578              		.loc 1 572 0
 579 0034 C0F80880 		str	r8, [r0, #8]
 573:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->pre_zero = pre_zero;
 580              		.loc 1 573 0
 581 0038 0799     		ldr	r1, [sp, #28]
 582 003a C160     		str	r1, [r0, #12]
 574:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 583              		.loc 1 574 0
 584 003c 0762     		str	r7, [r0, #32]
 575:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 585              		.loc 1 575 0
 586 003e 8262     		str	r2, [r0, #40]
 576:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->virt_barray_list = result;
 587              		.loc 1 576 0
 588 0040 B26C     		ldr	r2, [r6, #72]
 589 0042 C262     		str	r2, [r0, #44]
 577:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 590              		.loc 1 577 0
 591 0044 B064     		str	r0, [r6, #72]
 580:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 592              		.loc 1 580 0
 593 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 594              		.cfi_endproc
 595              	.LFE9:
 597              		.section	.text.request_virt_sarray,"ax",%progbits
 598              		.align	1
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv5-sp-d16
 604              	request_virt_sarray:
 605              	.LFB8:
 528:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 606              		.loc 1 528 0
 607              		.cfi_startproc
 608              		@ args = 8, pretend = 0, frame = 0
ARM GAS  /tmp/ccQQGSTq.s 			page 26


 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              	.LVL86:
 611 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 612              	.LCFI9:
 613              		.cfi_def_cfa_offset 24
 614              		.cfi_offset 4, -24
 615              		.cfi_offset 5, -20
 616              		.cfi_offset 6, -16
 617              		.cfi_offset 7, -12
 618              		.cfi_offset 8, -8
 619              		.cfi_offset 14, -4
 620 0004 0446     		mov	r4, r0
 621 0006 0D46     		mov	r5, r1
 622 0008 1746     		mov	r7, r2
 623 000a 9846     		mov	r8, r3
 529:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jvirt_sarray_ptr result;
 624              		.loc 1 529 0
 625 000c 4668     		ldr	r6, [r0, #4]
 626              	.LVL87:
 533:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 627              		.loc 1 533 0
 628 000e 0129     		cmp	r1, #1
 629 0010 07D0     		beq	.L43
 534:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 630              		.loc 1 534 0
 631 0012 0368     		ldr	r3, [r0]
 632              	.LVL88:
 633 0014 0F22     		movs	r2, #15
 634              	.LVL89:
 635 0016 5A61     		str	r2, [r3, #20]
 636 0018 0368     		ldr	r3, [r0]
 637 001a 9961     		str	r1, [r3, #24]
 638 001c 0368     		ldr	r3, [r0]
 639 001e 1B68     		ldr	r3, [r3]
 640 0020 9847     		blx	r3
 641              	.LVL90:
 642              	.L43:
 537:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					  SIZEOF(struct jvirt_sarray_control));
 643              		.loc 1 537 0
 644 0022 3C22     		movs	r2, #60
 645 0024 2946     		mov	r1, r5
 646 0026 2046     		mov	r0, r4
 647 0028 FFF7FEFF 		bl	alloc_small
 648              	.LVL91:
 540:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->rows_in_array = numrows;
 649              		.loc 1 540 0
 650 002c 0022     		movs	r2, #0
 651 002e 0260     		str	r2, [r0]
 541:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->samplesperrow = samplesperrow;
 652              		.loc 1 541 0
 653 0030 0699     		ldr	r1, [sp, #24]
 654 0032 4160     		str	r1, [r0, #4]
 542:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->maxaccess = maxaccess;
 655              		.loc 1 542 0
 656 0034 C0F80880 		str	r8, [r0, #8]
 543:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->pre_zero = pre_zero;
 657              		.loc 1 543 0
ARM GAS  /tmp/ccQQGSTq.s 			page 27


 658 0038 0799     		ldr	r1, [sp, #28]
 659 003a C160     		str	r1, [r0, #12]
 544:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 660              		.loc 1 544 0
 661 003c 0762     		str	r7, [r0, #32]
 545:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 662              		.loc 1 545 0
 663 003e 8262     		str	r2, [r0, #40]
 546:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->virt_sarray_list = result;
 664              		.loc 1 546 0
 665 0040 726C     		ldr	r2, [r6, #68]
 666 0042 C262     		str	r2, [r0, #44]
 547:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 667              		.loc 1 547 0
 668 0044 7064     		str	r0, [r6, #68]
 550:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 669              		.loc 1 550 0
 670 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 671              		.cfi_endproc
 672              	.LFE8:
 674              		.section	.text.free_pool,"ax",%progbits
 675              		.align	1
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 679              		.fpu fpv5-sp-d16
 681              	free_pool:
 682              	.LFB15:
 754:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 755:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 756:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(JSAMPARRAY)
 757:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,
 758:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		    JDIMENSION start_row, JDIMENSION num_rows,
 759:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		    boolean writable)
 760:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Access the part of a virtual sample array starting at start_row */
 761:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* and extending for num_rows rows.  writable is true if  */
 762:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* caller intends to modify the accessed area. */
 763:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 764:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 765:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION undef_row;
 766:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 767:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* debugging check */
 768:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 769:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->mem_buffer == NULL)
 770:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 771:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 772:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Make the desired part of the virtual array accessible */
 773:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (start_row < ptr->cur_start_row ||
 774:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 775:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (! ptr->b_s_open)
 776:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 777:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Flush old buffer contents if necessary */
 778:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->dirty) {
 779:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       do_sarray_io(cinfo, ptr, TRUE);
 780:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->dirty = FALSE;
 781:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 782:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Decide what part of virtual array to access.
ARM GAS  /tmp/ccQQGSTq.s 			page 28


 783:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * Algorithm: if target address > current window, assume forward scan,
 784:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * load starting at target address.  If target address < current window,
 785:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * assume backward scan, load so that target area is top of window.
 786:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * Note that when switching from forward write to forward read, will have
 787:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * start_row = 0, so the limiting case applies and we load from 0 anyway.
 788:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      */
 789:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (start_row > ptr->cur_start_row) {
 790:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->cur_start_row = start_row;
 791:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 792:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       /* use long arithmetic here to avoid overflow & unsigned problems */
 793:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       long ltemp;
 794:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 795:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ltemp = (long) end_row - (long) ptr->rows_in_mem;
 796:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (ltemp < 0)
 797:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 798:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->cur_start_row = (JDIMENSION) ltemp;
 799:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 800:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Read in the selected part of the array.
 801:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * During the initial write pass, we will do no actual read
 802:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * because the selected part is all undefined.
 803:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      */
 804:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     do_sarray_io(cinfo, ptr, FALSE);
 805:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 806:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Ensure the accessed part of the array is defined; prezero if needed.
 807:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * To improve locality of access, we only prezero the part of the array
 808:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * that the caller is about to access, not the entire in-memory array.
 809:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
 810:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (ptr->first_undef_row < end_row) {
 811:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 812:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 813:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 814:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 815:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 816:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row = ptr->first_undef_row;
 817:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 818:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (writable)
 819:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->first_undef_row = end_row;
 820:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->pre_zero) {
 821:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 822:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 823:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 824:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       while (undef_row < end_row) {
 825:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 826:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	undef_row++;
 827:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 828:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 829:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (! writable)		/* reader looking at undefined data */
 830:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 831:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 832:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 833:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Flag the buffer dirty if caller will write in it */
 834:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (writable)
 835:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ptr->dirty = TRUE;
 836:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Return address of proper part of the buffer */
 837:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 838:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 839:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
ARM GAS  /tmp/ccQQGSTq.s 			page 29


 840:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 841:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(JBLOCKARRAY)
 842:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** access_virt_barray (j_common_ptr cinfo, jvirt_barray_ptr ptr,
 843:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		    JDIMENSION start_row, JDIMENSION num_rows,
 844:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		    boolean writable)
 845:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* Access the part of a virtual block array starting at start_row */
 846:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* and extending for num_rows rows.  writable is true if  */
 847:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /* caller intends to modify the accessed area. */
 848:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 849:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 850:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION undef_row;
 851:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 852:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* debugging check */
 853:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 854:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->mem_buffer == NULL)
 855:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 856:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 857:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Make the desired part of the virtual array accessible */
 858:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (start_row < ptr->cur_start_row ||
 859:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 860:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (! ptr->b_s_open)
 861:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 862:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Flush old buffer contents if necessary */
 863:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->dirty) {
 864:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       do_barray_io(cinfo, ptr, TRUE);
 865:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->dirty = FALSE;
 866:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 867:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Decide what part of virtual array to access.
 868:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * Algorithm: if target address > current window, assume forward scan,
 869:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * load starting at target address.  If target address < current window,
 870:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * assume backward scan, load so that target area is top of window.
 871:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * Note that when switching from forward write to forward read, will have
 872:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * start_row = 0, so the limiting case applies and we load from 0 anyway.
 873:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      */
 874:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (start_row > ptr->cur_start_row) {
 875:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->cur_start_row = start_row;
 876:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 877:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       /* use long arithmetic here to avoid overflow & unsigned problems */
 878:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       long ltemp;
 879:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 880:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ltemp = (long) end_row - (long) ptr->rows_in_mem;
 881:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (ltemp < 0)
 882:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 883:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->cur_start_row = (JDIMENSION) ltemp;
 884:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 885:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Read in the selected part of the array.
 886:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * During the initial write pass, we will do no actual read
 887:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      * because the selected part is all undefined.
 888:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****      */
 889:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     do_barray_io(cinfo, ptr, FALSE);
 890:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 891:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Ensure the accessed part of the array is defined; prezero if needed.
 892:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * To improve locality of access, we only prezero the part of the array
 893:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * that the caller is about to access, not the entire in-memory array.
 894:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
 895:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (ptr->first_undef_row < end_row) {
 896:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
ARM GAS  /tmp/ccQQGSTq.s 			page 30


 897:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 898:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 899:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 900:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 901:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row = ptr->first_undef_row;
 902:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 903:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (writable)
 904:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->first_undef_row = end_row;
 905:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->pre_zero) {
 906:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 907:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 908:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 909:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       while (undef_row < end_row) {
 910:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 911:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	undef_row++;
 912:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 913:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 914:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (! writable)		/* reader looking at undefined data */
 915:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 916:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 917:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 918:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Flag the buffer dirty if caller will write in it */
 919:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (writable)
 920:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ptr->dirty = TRUE;
 921:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Return address of proper part of the buffer */
 922:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 923:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 924:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 925:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 926:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
 927:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Release all objects belonging to a specified pool.
 928:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
 929:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 930:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(void)
 931:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** free_pool (j_common_ptr cinfo, int pool_id)
 932:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 683              		.loc 1 932 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL92:
 688 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 689              	.LCFI10:
 690              		.cfi_def_cfa_offset 24
 691              		.cfi_offset 4, -24
 692              		.cfi_offset 5, -20
 693              		.cfi_offset 6, -16
 694              		.cfi_offset 7, -12
 695              		.cfi_offset 8, -8
 696              		.cfi_offset 14, -4
 697 0004 0646     		mov	r6, r0
 698 0006 8846     		mov	r8, r1
 933:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 699              		.loc 1 933 0
 700 0008 4568     		ldr	r5, [r0, #4]
 701              	.LVL93:
 934:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   small_pool_ptr shdr_ptr;
ARM GAS  /tmp/ccQQGSTq.s 			page 31


 935:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   large_pool_ptr lhdr_ptr;
 936:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   size_t space_freed;
 937:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 938:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 702              		.loc 1 938 0
 703 000a 0129     		cmp	r1, #1
 704 000c 07D9     		bls	.L46
 939:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 705              		.loc 1 939 0
 706 000e 0368     		ldr	r3, [r0]
 707 0010 0F22     		movs	r2, #15
 708 0012 5A61     		str	r2, [r3, #20]
 709 0014 0368     		ldr	r3, [r0]
 710 0016 9961     		str	r1, [r3, #24]
 711 0018 0368     		ldr	r3, [r0]
 712 001a 1B68     		ldr	r3, [r3]
 713 001c 9847     		blx	r3
 714              	.LVL94:
 715              	.L46:
 940:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 941:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #ifdef MEM_STATS
 942:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (cinfo->err->trace_level > 1)
 943:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
 944:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #endif
 945:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 946:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* If freeing IMAGE pool, close any virtual arrays first */
 947:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (pool_id == JPOOL_IMAGE) {
 716              		.loc 1 947 0
 717 001e B8F1010F 		cmp	r8, #1
 718 0022 07D0     		beq	.L59
 719              	.L47:
 948:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     jvirt_sarray_ptr sptr;
 949:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     jvirt_barray_ptr bptr;
 950:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 951:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 952:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 953:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 954:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 955:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 956:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 957:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     mem->virt_sarray_list = NULL;
 958:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 959:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 960:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 961:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 962:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 963:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 964:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     mem->virt_barray_list = NULL;
 965:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 966:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 967:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Release large objects */
 968:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   lhdr_ptr = mem->large_list[pool_id];
 720              		.loc 1 968 0
 721 0024 08F10E03 		add	r3, r8, #14
 722 0028 05EB8303 		add	r3, r5, r3, lsl #2
 723 002c 5968     		ldr	r1, [r3, #4]
 724              	.LVL95:
ARM GAS  /tmp/ccQQGSTq.s 			page 32


 969:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->large_list[pool_id] = NULL;
 725              		.loc 1 969 0
 726 002e 0022     		movs	r2, #0
 727 0030 5A60     		str	r2, [r3, #4]
 970:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 971:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   while (lhdr_ptr != NULL) {
 728              		.loc 1 971 0
 729 0032 2FE0     		b	.L54
 730              	.LVL96:
 731              	.L59:
 732              	.LBB2:
 951:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 733              		.loc 1 951 0
 734 0034 6C6C     		ldr	r4, [r5, #68]
 735              	.LVL97:
 736 0036 00E0     		b	.L48
 737              	.L49:
 951:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 738              		.loc 1 951 0 is_stmt 0 discriminator 2
 739 0038 E46A     		ldr	r4, [r4, #44]
 740              	.LVL98:
 741              	.L48:
 951:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 742              		.loc 1 951 0 discriminator 1
 743 003a 54B1     		cbz	r4, .L60
 952:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 744              		.loc 1 952 0 is_stmt 1
 745 003c A36A     		ldr	r3, [r4, #40]
 746 003e 002B     		cmp	r3, #0
 747 0040 FAD0     		beq	.L49
 953:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 748              		.loc 1 953 0
 749 0042 0023     		movs	r3, #0
 750 0044 A362     		str	r3, [r4, #40]
 954:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 751              		.loc 1 954 0
 752 0046 A36B     		ldr	r3, [r4, #56]
 753 0048 04F13001 		add	r1, r4, #48
 754 004c 3046     		mov	r0, r6
 755 004e 9847     		blx	r3
 756              	.LVL99:
 757 0050 F2E7     		b	.L49
 758              	.L60:
 957:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 759              		.loc 1 957 0
 760 0052 0023     		movs	r3, #0
 761 0054 6B64     		str	r3, [r5, #68]
 958:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 762              		.loc 1 958 0
 763 0056 AC6C     		ldr	r4, [r5, #72]
 764              	.LVL100:
 765 0058 00E0     		b	.L51
 766              	.L52:
 958:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 767              		.loc 1 958 0 is_stmt 0 discriminator 2
 768 005a E46A     		ldr	r4, [r4, #44]
 769              	.LVL101:
ARM GAS  /tmp/ccQQGSTq.s 			page 33


 770              	.L51:
 958:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 771              		.loc 1 958 0 discriminator 1
 772 005c 54B1     		cbz	r4, .L61
 959:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 773              		.loc 1 959 0 is_stmt 1
 774 005e A36A     		ldr	r3, [r4, #40]
 775 0060 002B     		cmp	r3, #0
 776 0062 FAD0     		beq	.L52
 960:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 777              		.loc 1 960 0
 778 0064 0023     		movs	r3, #0
 779 0066 A362     		str	r3, [r4, #40]
 961:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 780              		.loc 1 961 0
 781 0068 A36B     		ldr	r3, [r4, #56]
 782 006a 04F13001 		add	r1, r4, #48
 783 006e 3046     		mov	r0, r6
 784 0070 9847     		blx	r3
 785              	.LVL102:
 786 0072 F2E7     		b	.L52
 787              	.L61:
 964:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 788              		.loc 1 964 0
 789 0074 0023     		movs	r3, #0
 790 0076 AB64     		str	r3, [r5, #72]
 791 0078 D4E7     		b	.L47
 792              	.LVL103:
 793              	.L55:
 794              	.LBE2:
 795              	.LBB3:
 972:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
 796              		.loc 1 972 0
 797 007a 0F68     		ldr	r7, [r1]
 798              	.LVL104:
 973:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     space_freed = lhdr_ptr->hdr.bytes_used +
 799              		.loc 1 973 0
 800 007c 4C68     		ldr	r4, [r1, #4]
 974:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		  lhdr_ptr->hdr.bytes_left +
 801              		.loc 1 974 0
 802 007e 8B68     		ldr	r3, [r1, #8]
 973:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     space_freed = lhdr_ptr->hdr.bytes_used +
 803              		.loc 1 973 0
 804 0080 1C44     		add	r4, r4, r3
 805 0082 1034     		adds	r4, r4, #16
 806              	.LVL105:
 975:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		  SIZEOF(large_pool_hdr);
 976:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 807              		.loc 1 976 0
 808 0084 2246     		mov	r2, r4
 809 0086 3046     		mov	r0, r6
 810 0088 FFF7FEFF 		bl	jpeg_free_large
 811              	.LVL106:
 977:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     mem->total_space_allocated -= space_freed;
 812              		.loc 1 977 0
 813 008c EB6C     		ldr	r3, [r5, #76]
 814 008e 1C1B     		subs	r4, r3, r4
ARM GAS  /tmp/ccQQGSTq.s 			page 34


 815              	.LVL107:
 816 0090 EC64     		str	r4, [r5, #76]
 817              	.LVL108:
 978:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     lhdr_ptr = next_lhdr_ptr;
 818              		.loc 1 978 0
 819 0092 3946     		mov	r1, r7
 820              	.LVL109:
 821              	.L54:
 822              	.LBE3:
 971:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
 823              		.loc 1 971 0
 824 0094 0029     		cmp	r1, #0
 825 0096 F0D1     		bne	.L55
 979:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 980:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 981:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Release small objects */
 982:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   shdr_ptr = mem->small_list[pool_id];
 826              		.loc 1 982 0
 827 0098 08F10C08 		add	r8, r8, #12
 828              	.LVL110:
 829 009c 05EB8808 		add	r8, r5, r8, lsl #2
 830              	.LVL111:
 831 00a0 D8F80410 		ldr	r1, [r8, #4]
 832              	.LVL112:
 983:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->small_list[pool_id] = NULL;
 833              		.loc 1 983 0
 834 00a4 0023     		movs	r3, #0
 835 00a6 C8F80430 		str	r3, [r8, #4]
 984:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 985:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   while (shdr_ptr != NULL) {
 836              		.loc 1 985 0
 837 00aa 0CE0     		b	.L56
 838              	.L57:
 839              	.LBB4:
 986:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
 840              		.loc 1 986 0
 841 00ac 0F68     		ldr	r7, [r1]
 842              	.LVL113:
 987:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     space_freed = shdr_ptr->hdr.bytes_used +
 843              		.loc 1 987 0
 844 00ae 4C68     		ldr	r4, [r1, #4]
 988:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		  shdr_ptr->hdr.bytes_left +
 845              		.loc 1 988 0
 846 00b0 8B68     		ldr	r3, [r1, #8]
 987:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     space_freed = shdr_ptr->hdr.bytes_used +
 847              		.loc 1 987 0
 848 00b2 1C44     		add	r4, r4, r3
 849 00b4 1034     		adds	r4, r4, #16
 850              	.LVL114:
 989:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		  SIZEOF(small_pool_hdr);
 990:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 851              		.loc 1 990 0
 852 00b6 2246     		mov	r2, r4
 853 00b8 3046     		mov	r0, r6
 854 00ba FFF7FEFF 		bl	jpeg_free_small
 855              	.LVL115:
 991:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     mem->total_space_allocated -= space_freed;
ARM GAS  /tmp/ccQQGSTq.s 			page 35


 856              		.loc 1 991 0
 857 00be EB6C     		ldr	r3, [r5, #76]
 858 00c0 1C1B     		subs	r4, r3, r4
 859              	.LVL116:
 860 00c2 EC64     		str	r4, [r5, #76]
 861              	.LVL117:
 992:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     shdr_ptr = next_shdr_ptr;
 862              		.loc 1 992 0
 863 00c4 3946     		mov	r1, r7
 864              	.LVL118:
 865              	.L56:
 866              	.LBE4:
 985:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
 867              		.loc 1 985 0
 868 00c6 0029     		cmp	r1, #0
 869 00c8 F0D1     		bne	.L57
 993:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 994:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 870              		.loc 1 994 0
 871 00ca BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 872              		.cfi_endproc
 873              	.LFE15:
 875              		.section	.text.self_destruct,"ax",%progbits
 876              		.align	1
 877              		.syntax unified
 878              		.thumb
 879              		.thumb_func
 880              		.fpu fpv5-sp-d16
 882              	self_destruct:
 883              	.LFB16:
 995:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 996:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 997:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
 998:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Close up shop entirely.
 999:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Note that this cannot be called unless cinfo->mem is non-NULL.
1000:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
1001:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1002:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** METHODDEF(void)
1003:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** self_destruct (j_common_ptr cinfo)
1004:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 884              		.loc 1 1004 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888              	.LVL119:
 889 0000 38B5     		push	{r3, r4, r5, lr}
 890              	.LCFI11:
 891              		.cfi_def_cfa_offset 16
 892              		.cfi_offset 3, -16
 893              		.cfi_offset 4, -12
 894              		.cfi_offset 5, -8
 895              		.cfi_offset 14, -4
 896 0002 0546     		mov	r5, r0
 897              	.LVL120:
1005:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   int pool;
1006:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1007:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Close all backing store, release all memory.
ARM GAS  /tmp/ccQQGSTq.s 			page 36


1008:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * Releasing pools in reverse order might help avoid fragmentation
1009:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * with some (brain-damaged) malloc libraries.
1010:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
1011:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 898              		.loc 1 1011 0
 899 0004 0124     		movs	r4, #1
 900 0006 04E0     		b	.L63
 901              	.LVL121:
 902              	.L64:
1012:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     free_pool(cinfo, pool);
 903              		.loc 1 1012 0 discriminator 3
 904 0008 2146     		mov	r1, r4
 905 000a 2846     		mov	r0, r5
 906 000c FFF7FEFF 		bl	free_pool
 907              	.LVL122:
1011:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     free_pool(cinfo, pool);
 908              		.loc 1 1011 0 discriminator 3
 909 0010 013C     		subs	r4, r4, #1
 910              	.LVL123:
 911              	.L63:
1011:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     free_pool(cinfo, pool);
 912              		.loc 1 1011 0 is_stmt 0 discriminator 1
 913 0012 002C     		cmp	r4, #0
 914 0014 F8DA     		bge	.L64
1013:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
1014:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1015:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Release the memory manager control block too. */
1016:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 915              		.loc 1 1016 0 is_stmt 1
 916 0016 5422     		movs	r2, #84
 917 0018 6968     		ldr	r1, [r5, #4]
 918 001a 2846     		mov	r0, r5
 919 001c FFF7FEFF 		bl	jpeg_free_small
 920              	.LVL124:
1017:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   cinfo->mem = NULL;		/* ensures I will be called only once */
 921              		.loc 1 1017 0
 922 0020 0023     		movs	r3, #0
 923 0022 6B60     		str	r3, [r5, #4]
1018:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1019:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 924              		.loc 1 1019 0
 925 0024 2846     		mov	r0, r5
 926 0026 FFF7FEFF 		bl	jpeg_mem_term
 927              	.LVL125:
1020:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 928              		.loc 1 1020 0
 929 002a 38BD     		pop	{r3, r4, r5, pc}
 930              		.cfi_endproc
 931              	.LFE16:
 933              		.section	.text.access_virt_barray,"ax",%progbits
 934              		.align	1
 935              		.syntax unified
 936              		.thumb
 937              		.thumb_func
 938              		.fpu fpv5-sp-d16
 940              	access_virt_barray:
 941              	.LFB14:
ARM GAS  /tmp/ccQQGSTq.s 			page 37


 848:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 942              		.loc 1 848 0
 943              		.cfi_startproc
 944              		@ args = 4, pretend = 0, frame = 0
 945              		@ frame_needed = 0, uses_anonymous_args = 0
 946              	.LVL126:
 947 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 948              	.LCFI12:
 949              		.cfi_def_cfa_offset 32
 950              		.cfi_offset 3, -32
 951              		.cfi_offset 4, -28
 952              		.cfi_offset 5, -24
 953              		.cfi_offset 6, -20
 954              		.cfi_offset 7, -16
 955              		.cfi_offset 8, -12
 956              		.cfi_offset 9, -8
 957              		.cfi_offset 14, -4
 958 0004 8146     		mov	r9, r0
 959 0006 0C46     		mov	r4, r1
 960 0008 1746     		mov	r7, r2
 961 000a DDF82080 		ldr	r8, [sp, #32]
 849:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION undef_row;
 962              		.loc 1 849 0
 963 000e D618     		adds	r6, r2, r3
 964              	.LVL127:
 853:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->mem_buffer == NULL)
 965              		.loc 1 853 0
 966 0010 4A68     		ldr	r2, [r1, #4]
 967              	.LVL128:
 968 0012 B242     		cmp	r2, r6
 969 0014 46D2     		bcs	.L86
 970              	.LVL129:
 971              	.L67:
 855:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 972              		.loc 1 855 0
 973 0016 D9F80030 		ldr	r3, [r9]
 974 001a 1722     		movs	r2, #23
 975 001c 5A61     		str	r2, [r3, #20]
 976 001e D9F80030 		ldr	r3, [r9]
 977 0022 1B68     		ldr	r3, [r3]
 978 0024 4846     		mov	r0, r9
 979              	.LVL130:
 980 0026 9847     		blx	r3
 981              	.LVL131:
 982              	.L68:
 858:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 983              		.loc 1 858 0
 984 0028 A369     		ldr	r3, [r4, #24]
 985 002a BB42     		cmp	r3, r7
 986 002c 03D8     		bhi	.L69
 859:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (! ptr->b_s_open)
 987              		.loc 1 859 0 discriminator 1
 988 002e 2269     		ldr	r2, [r4, #16]
 989 0030 1344     		add	r3, r3, r2
 858:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 990              		.loc 1 858 0 discriminator 1
 991 0032 B342     		cmp	r3, r6
ARM GAS  /tmp/ccQQGSTq.s 			page 38


 992 0034 16D2     		bcs	.L70
 993              	.L69:
 860:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 994              		.loc 1 860 0
 995 0036 A36A     		ldr	r3, [r4, #40]
 996 0038 43B9     		cbnz	r3, .L71
 861:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Flush old buffer contents if necessary */
 997              		.loc 1 861 0
 998 003a D9F80030 		ldr	r3, [r9]
 999 003e 4722     		movs	r2, #71
 1000 0040 5A61     		str	r2, [r3, #20]
 1001 0042 D9F80030 		ldr	r3, [r9]
 1002 0046 1B68     		ldr	r3, [r3]
 1003 0048 4846     		mov	r0, r9
 1004 004a 9847     		blx	r3
 1005              	.LVL132:
 1006              	.L71:
 863:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       do_barray_io(cinfo, ptr, TRUE);
 1007              		.loc 1 863 0
 1008 004c 636A     		ldr	r3, [r4, #36]
 1009 004e 002B     		cmp	r3, #0
 1010 0050 2FD1     		bne	.L87
 1011              	.L72:
 874:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->cur_start_row = start_row;
 1012              		.loc 1 874 0
 1013 0052 A369     		ldr	r3, [r4, #24]
 1014 0054 BB42     		cmp	r3, r7
 1015 0056 34D2     		bcs	.L73
 875:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 1016              		.loc 1 875 0
 1017 0058 A761     		str	r7, [r4, #24]
 1018              	.L74:
 889:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 1019              		.loc 1 889 0
 1020 005a 0022     		movs	r2, #0
 1021 005c 2146     		mov	r1, r4
 1022 005e 4846     		mov	r0, r9
 1023 0060 FFF7FEFF 		bl	do_barray_io
 1024              	.LVL133:
 1025              	.L70:
 895:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 1026              		.loc 1 895 0
 1027 0064 E569     		ldr	r5, [r4, #28]
 1028 0066 B542     		cmp	r5, r6
 1029 0068 3ED2     		bcs	.L76
 896:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 1030              		.loc 1 896 0
 1031 006a BD42     		cmp	r5, r7
 1032 006c 0CD2     		bcs	.L77
 897:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 1033              		.loc 1 897 0
 1034 006e B8F1000F 		cmp	r8, #0
 1035 0072 2DD0     		beq	.L84
 898:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 1036              		.loc 1 898 0
 1037 0074 D9F80030 		ldr	r3, [r9]
 1038 0078 1722     		movs	r2, #23
ARM GAS  /tmp/ccQQGSTq.s 			page 39


 1039 007a 5A61     		str	r2, [r3, #20]
 1040 007c D9F80030 		ldr	r3, [r9]
 1041 0080 1B68     		ldr	r3, [r3]
 1042 0082 4846     		mov	r0, r9
 1043 0084 9847     		blx	r3
 1044              	.LVL134:
 899:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 1045              		.loc 1 899 0
 1046 0086 3D46     		mov	r5, r7
 1047              	.L77:
 1048              	.LVL135:
 903:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->first_undef_row = end_row;
 1049              		.loc 1 903 0
 1050 0088 B8F1000F 		cmp	r8, #0
 1051 008c 00D0     		beq	.L78
 904:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->pre_zero) {
 1052              		.loc 1 904 0
 1053 008e E661     		str	r6, [r4, #28]
 1054              	.L78:
 905:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1055              		.loc 1 905 0
 1056 0090 236A     		ldr	r3, [r4, #32]
 1057 0092 002B     		cmp	r3, #0
 1058 0094 34D0     		beq	.L79
 1059              	.LBB5:
 906:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 1060              		.loc 1 906 0
 1061 0096 A368     		ldr	r3, [r4, #8]
 1062 0098 4FEAC319 		lsl	r9, r3, #7
 1063              	.LVL136:
 907:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 1064              		.loc 1 907 0
 1065 009c A369     		ldr	r3, [r4, #24]
 1066 009e ED1A     		subs	r5, r5, r3
 1067              	.LVL137:
 908:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       while (undef_row < end_row) {
 1068              		.loc 1 908 0
 1069 00a0 F61A     		subs	r6, r6, r3
 1070              	.LVL138:
 909:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1071              		.loc 1 909 0
 1072 00a2 1FE0     		b	.L80
 1073              	.LVL139:
 1074              	.L86:
 1075              	.LBE5:
 853:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->mem_buffer == NULL)
 1076              		.loc 1 853 0 discriminator 1
 1077 00a4 CA68     		ldr	r2, [r1, #12]
 1078 00a6 9A42     		cmp	r2, r3
 1079 00a8 B5D3     		bcc	.L67
 854:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 1080              		.loc 1 854 0 discriminator 2
 1081 00aa 0B68     		ldr	r3, [r1]
 1082              	.LVL140:
 853:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->mem_buffer == NULL)
 1083              		.loc 1 853 0 discriminator 2
 1084 00ac 002B     		cmp	r3, #0
ARM GAS  /tmp/ccQQGSTq.s 			page 40


 1085 00ae BBD1     		bne	.L68
 1086 00b0 B1E7     		b	.L67
 1087              	.LVL141:
 1088              	.L87:
 864:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->dirty = FALSE;
 1089              		.loc 1 864 0
 1090 00b2 0122     		movs	r2, #1
 1091 00b4 2146     		mov	r1, r4
 1092 00b6 4846     		mov	r0, r9
 1093 00b8 FFF7FEFF 		bl	do_barray_io
 1094              	.LVL142:
 865:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1095              		.loc 1 865 0
 1096 00bc 0023     		movs	r3, #0
 1097 00be 6362     		str	r3, [r4, #36]
 1098 00c0 C7E7     		b	.L72
 1099              	.L73:
 1100              	.LBB6:
 880:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (ltemp < 0)
 1101              		.loc 1 880 0
 1102 00c2 2369     		ldr	r3, [r4, #16]
 1103              	.LVL143:
 881:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 1104              		.loc 1 881 0
 1105 00c4 F31A     		subs	r3, r6, r3
 1106              	.LVL144:
 1107 00c6 01D4     		bmi	.L88
 1108              	.LVL145:
 1109              	.L75:
 883:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1110              		.loc 1 883 0
 1111 00c8 A361     		str	r3, [r4, #24]
 1112 00ca C6E7     		b	.L74
 1113              	.L88:
 882:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->cur_start_row = (JDIMENSION) ltemp;
 1114              		.loc 1 882 0
 1115 00cc 0023     		movs	r3, #0
 1116              	.LVL146:
 1117 00ce FBE7     		b	.L75
 1118              	.LVL147:
 1119              	.L84:
 1120              	.LBE6:
 899:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 1121              		.loc 1 899 0
 1122 00d0 3D46     		mov	r5, r7
 1123 00d2 D9E7     		b	.L77
 1124              	.LVL148:
 1125              	.L81:
 1126              	.LBB7:
 910:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	undef_row++;
 1127              		.loc 1 910 0
 1128 00d4 2368     		ldr	r3, [r4]
 1129 00d6 4A46     		mov	r2, r9
 1130 00d8 0021     		movs	r1, #0
 1131 00da 53F82500 		ldr	r0, [r3, r5, lsl #2]
 1132 00de FFF7FEFF 		bl	memset
 1133              	.LVL149:
ARM GAS  /tmp/ccQQGSTq.s 			page 41


 911:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 1134              		.loc 1 911 0
 1135 00e2 0135     		adds	r5, r5, #1
 1136              	.LVL150:
 1137              	.L80:
 909:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1138              		.loc 1 909 0
 1139 00e4 B542     		cmp	r5, r6
 1140 00e6 F5D3     		bcc	.L81
 1141              	.LVL151:
 1142              	.L76:
 1143              	.LBE7:
 919:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ptr->dirty = TRUE;
 1144              		.loc 1 919 0
 1145 00e8 B8F1000F 		cmp	r8, #0
 1146 00ec 01D0     		beq	.L82
 920:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Return address of proper part of the buffer */
 1147              		.loc 1 920 0
 1148 00ee 0123     		movs	r3, #1
 1149 00f0 6362     		str	r3, [r4, #36]
 1150              	.L82:
 922:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 1151              		.loc 1 922 0
 1152 00f2 2068     		ldr	r0, [r4]
 1153 00f4 A269     		ldr	r2, [r4, #24]
 1154 00f6 BA1A     		subs	r2, r7, r2
 923:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1155              		.loc 1 923 0
 1156 00f8 00EB8200 		add	r0, r0, r2, lsl #2
 1157 00fc BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1158              	.LVL152:
 1159              	.L79:
 914:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 1160              		.loc 1 914 0
 1161 0100 B8F1000F 		cmp	r8, #0
 1162 0104 F0D1     		bne	.L76
 915:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1163              		.loc 1 915 0
 1164 0106 D9F80030 		ldr	r3, [r9]
 1165 010a 1722     		movs	r2, #23
 1166 010c 5A61     		str	r2, [r3, #20]
 1167 010e D9F80030 		ldr	r3, [r9]
 1168 0112 1B68     		ldr	r3, [r3]
 1169 0114 4846     		mov	r0, r9
 1170 0116 9847     		blx	r3
 1171              	.LVL153:
 1172 0118 E6E7     		b	.L76
 1173              		.cfi_endproc
 1174              	.LFE14:
 1176              		.section	.text.access_virt_sarray,"ax",%progbits
 1177              		.align	1
 1178              		.syntax unified
 1179              		.thumb
 1180              		.thumb_func
 1181              		.fpu fpv5-sp-d16
 1183              	access_virt_sarray:
 1184              	.LFB13:
ARM GAS  /tmp/ccQQGSTq.s 			page 42


 763:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 1185              		.loc 1 763 0
 1186              		.cfi_startproc
 1187              		@ args = 4, pretend = 0, frame = 0
 1188              		@ frame_needed = 0, uses_anonymous_args = 0
 1189              	.LVL154:
 1190 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1191              	.LCFI13:
 1192              		.cfi_def_cfa_offset 32
 1193              		.cfi_offset 3, -32
 1194              		.cfi_offset 4, -28
 1195              		.cfi_offset 5, -24
 1196              		.cfi_offset 6, -20
 1197              		.cfi_offset 7, -16
 1198              		.cfi_offset 8, -12
 1199              		.cfi_offset 9, -8
 1200              		.cfi_offset 14, -4
 1201 0004 8146     		mov	r9, r0
 1202 0006 0C46     		mov	r4, r1
 1203 0008 1746     		mov	r7, r2
 1204 000a DDF82080 		ldr	r8, [sp, #32]
 764:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JDIMENSION undef_row;
 1205              		.loc 1 764 0
 1206 000e D618     		adds	r6, r2, r3
 1207              	.LVL155:
 768:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->mem_buffer == NULL)
 1208              		.loc 1 768 0
 1209 0010 4A68     		ldr	r2, [r1, #4]
 1210              	.LVL156:
 1211 0012 B242     		cmp	r2, r6
 1212 0014 44D2     		bcs	.L109
 1213              	.LVL157:
 1214              	.L90:
 770:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1215              		.loc 1 770 0
 1216 0016 D9F80030 		ldr	r3, [r9]
 1217 001a 1722     		movs	r2, #23
 1218 001c 5A61     		str	r2, [r3, #20]
 1219 001e D9F80030 		ldr	r3, [r9]
 1220 0022 1B68     		ldr	r3, [r3]
 1221 0024 4846     		mov	r0, r9
 1222              	.LVL158:
 1223 0026 9847     		blx	r3
 1224              	.LVL159:
 1225              	.L91:
 773:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 1226              		.loc 1 773 0
 1227 0028 A369     		ldr	r3, [r4, #24]
 1228 002a BB42     		cmp	r3, r7
 1229 002c 03D8     		bhi	.L92
 774:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (! ptr->b_s_open)
 1230              		.loc 1 774 0 discriminator 1
 1231 002e 2269     		ldr	r2, [r4, #16]
 1232 0030 1344     		add	r3, r3, r2
 773:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 1233              		.loc 1 773 0 discriminator 1
 1234 0032 B342     		cmp	r3, r6
ARM GAS  /tmp/ccQQGSTq.s 			page 43


 1235 0034 15D2     		bcs	.L93
 1236              	.L92:
 775:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 1237              		.loc 1 775 0
 1238 0036 A36A     		ldr	r3, [r4, #40]
 1239 0038 43B9     		cbnz	r3, .L94
 776:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* Flush old buffer contents if necessary */
 1240              		.loc 1 776 0
 1241 003a D9F80030 		ldr	r3, [r9]
 1242 003e 4722     		movs	r2, #71
 1243 0040 5A61     		str	r2, [r3, #20]
 1244 0042 D9F80030 		ldr	r3, [r9]
 1245 0046 1B68     		ldr	r3, [r3]
 1246 0048 4846     		mov	r0, r9
 1247 004a 9847     		blx	r3
 1248              	.LVL160:
 1249              	.L94:
 778:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       do_sarray_io(cinfo, ptr, TRUE);
 1250              		.loc 1 778 0
 1251 004c 636A     		ldr	r3, [r4, #36]
 1252 004e 73BB     		cbnz	r3, .L110
 1253              	.L95:
 789:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->cur_start_row = start_row;
 1254              		.loc 1 789 0
 1255 0050 A369     		ldr	r3, [r4, #24]
 1256 0052 BB42     		cmp	r3, r7
 1257 0054 33D2     		bcs	.L96
 790:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 1258              		.loc 1 790 0
 1259 0056 A761     		str	r7, [r4, #24]
 1260              	.L97:
 804:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 1261              		.loc 1 804 0
 1262 0058 0022     		movs	r2, #0
 1263 005a 2146     		mov	r1, r4
 1264 005c 4846     		mov	r0, r9
 1265 005e FFF7FEFF 		bl	do_sarray_io
 1266              	.LVL161:
 1267              	.L93:
 810:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 1268              		.loc 1 810 0
 1269 0062 E569     		ldr	r5, [r4, #28]
 1270 0064 B542     		cmp	r5, r6
 1271 0066 3DD2     		bcs	.L99
 811:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 1272              		.loc 1 811 0
 1273 0068 BD42     		cmp	r5, r7
 1274 006a 0CD2     		bcs	.L100
 812:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 1275              		.loc 1 812 0
 1276 006c B8F1000F 		cmp	r8, #0
 1277 0070 2CD0     		beq	.L107
 813:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 1278              		.loc 1 813 0
 1279 0072 D9F80030 		ldr	r3, [r9]
 1280 0076 1722     		movs	r2, #23
 1281 0078 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccQQGSTq.s 			page 44


 1282 007a D9F80030 		ldr	r3, [r9]
 1283 007e 1B68     		ldr	r3, [r3]
 1284 0080 4846     		mov	r0, r9
 1285 0082 9847     		blx	r3
 1286              	.LVL162:
 814:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 1287              		.loc 1 814 0
 1288 0084 3D46     		mov	r5, r7
 1289              	.L100:
 1290              	.LVL163:
 818:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->first_undef_row = end_row;
 1291              		.loc 1 818 0
 1292 0086 B8F1000F 		cmp	r8, #0
 1293 008a 00D0     		beq	.L101
 819:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (ptr->pre_zero) {
 1294              		.loc 1 819 0
 1295 008c E661     		str	r6, [r4, #28]
 1296              	.L101:
 820:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 1297              		.loc 1 820 0
 1298 008e 236A     		ldr	r3, [r4, #32]
 1299 0090 002B     		cmp	r3, #0
 1300 0092 33D0     		beq	.L102
 1301              	.LBB8:
 821:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 1302              		.loc 1 821 0
 1303 0094 D4F80890 		ldr	r9, [r4, #8]
 1304              	.LVL164:
 822:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 1305              		.loc 1 822 0
 1306 0098 A369     		ldr	r3, [r4, #24]
 1307 009a ED1A     		subs	r5, r5, r3
 1308              	.LVL165:
 823:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       while (undef_row < end_row) {
 1309              		.loc 1 823 0
 1310 009c F61A     		subs	r6, r6, r3
 1311              	.LVL166:
 824:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1312              		.loc 1 824 0
 1313 009e 1FE0     		b	.L103
 1314              	.LVL167:
 1315              	.L109:
 1316              	.LBE8:
 768:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->mem_buffer == NULL)
 1317              		.loc 1 768 0 discriminator 1
 1318 00a0 CA68     		ldr	r2, [r1, #12]
 1319 00a2 9A42     		cmp	r2, r3
 1320 00a4 B7D3     		bcc	.L90
 769:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 1321              		.loc 1 769 0 discriminator 2
 1322 00a6 0B68     		ldr	r3, [r1]
 1323              	.LVL168:
 768:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->mem_buffer == NULL)
 1324              		.loc 1 768 0 discriminator 2
 1325 00a8 002B     		cmp	r3, #0
 1326 00aa BDD1     		bne	.L91
 1327 00ac B3E7     		b	.L90
ARM GAS  /tmp/ccQQGSTq.s 			page 45


 1328              	.LVL169:
 1329              	.L110:
 779:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->dirty = FALSE;
 1330              		.loc 1 779 0
 1331 00ae 0122     		movs	r2, #1
 1332 00b0 2146     		mov	r1, r4
 1333 00b2 4846     		mov	r0, r9
 1334 00b4 FFF7FEFF 		bl	do_sarray_io
 1335              	.LVL170:
 780:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1336              		.loc 1 780 0
 1337 00b8 0023     		movs	r3, #0
 1338 00ba 6362     		str	r3, [r4, #36]
 1339 00bc C8E7     		b	.L95
 1340              	.L96:
 1341              	.LBB9:
 795:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (ltemp < 0)
 1342              		.loc 1 795 0
 1343 00be 2369     		ldr	r3, [r4, #16]
 1344              	.LVL171:
 796:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 1345              		.loc 1 796 0
 1346 00c0 F31A     		subs	r3, r6, r3
 1347              	.LVL172:
 1348 00c2 01D4     		bmi	.L111
 1349              	.LVL173:
 1350              	.L98:
 798:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1351              		.loc 1 798 0
 1352 00c4 A361     		str	r3, [r4, #24]
 1353 00c6 C7E7     		b	.L97
 1354              	.L111:
 797:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       ptr->cur_start_row = (JDIMENSION) ltemp;
 1355              		.loc 1 797 0
 1356 00c8 0023     		movs	r3, #0
 1357              	.LVL174:
 1358 00ca FBE7     		b	.L98
 1359              	.LVL175:
 1360              	.L107:
 1361              	.LBE9:
 814:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     } else {
 1362              		.loc 1 814 0
 1363 00cc 3D46     		mov	r5, r7
 1364 00ce DAE7     		b	.L100
 1365              	.LVL176:
 1366              	.L104:
 1367              	.LBB10:
 825:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	undef_row++;
 1368              		.loc 1 825 0
 1369 00d0 2368     		ldr	r3, [r4]
 1370 00d2 4A46     		mov	r2, r9
 1371 00d4 0021     		movs	r1, #0
 1372 00d6 53F82500 		ldr	r0, [r3, r5, lsl #2]
 1373 00da FFF7FEFF 		bl	memset
 1374              	.LVL177:
 826:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 1375              		.loc 1 826 0
ARM GAS  /tmp/ccQQGSTq.s 			page 46


 1376 00de 0135     		adds	r5, r5, #1
 1377              	.LVL178:
 1378              	.L103:
 824:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1379              		.loc 1 824 0
 1380 00e0 B542     		cmp	r5, r6
 1381 00e2 F5D3     		bcc	.L104
 1382              	.LVL179:
 1383              	.L99:
 1384              	.LBE10:
 834:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ptr->dirty = TRUE;
 1385              		.loc 1 834 0
 1386 00e4 B8F1000F 		cmp	r8, #0
 1387 00e8 01D0     		beq	.L105
 835:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Return address of proper part of the buffer */
 1388              		.loc 1 835 0
 1389 00ea 0123     		movs	r3, #1
 1390 00ec 6362     		str	r3, [r4, #36]
 1391              	.L105:
 837:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 1392              		.loc 1 837 0
 1393 00ee 2068     		ldr	r0, [r4]
 1394 00f0 A269     		ldr	r2, [r4, #24]
 1395 00f2 BA1A     		subs	r2, r7, r2
 838:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1396              		.loc 1 838 0
 1397 00f4 00EB8200 		add	r0, r0, r2, lsl #2
 1398 00f8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1399              	.LVL180:
 1400              	.L102:
 829:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 1401              		.loc 1 829 0
 1402 00fc B8F1000F 		cmp	r8, #0
 1403 0100 F0D1     		bne	.L99
 830:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1404              		.loc 1 830 0
 1405 0102 D9F80030 		ldr	r3, [r9]
 1406 0106 1722     		movs	r2, #23
 1407 0108 5A61     		str	r2, [r3, #20]
 1408 010a D9F80030 		ldr	r3, [r9]
 1409 010e 1B68     		ldr	r3, [r3]
 1410 0110 4846     		mov	r0, r9
 1411 0112 9847     		blx	r3
 1412              	.LVL181:
 1413 0114 E6E7     		b	.L99
 1414              		.cfi_endproc
 1415              	.LFE13:
 1417              		.section	.text.alloc_large,"ax",%progbits
 1418              		.align	1
 1419              		.syntax unified
 1420              		.thumb
 1421              		.thumb_func
 1422              		.fpu fpv5-sp-d16
 1424              	alloc_large:
 1425              	.LFB5:
 345:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1426              		.loc 1 345 0
ARM GAS  /tmp/ccQQGSTq.s 			page 47


 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 0
 1429              		@ frame_needed = 0, uses_anonymous_args = 0
 1430              	.LVL182:
 1431 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1432              	.LCFI14:
 1433              		.cfi_def_cfa_offset 24
 1434              		.cfi_offset 4, -24
 1435              		.cfi_offset 5, -20
 1436              		.cfi_offset 6, -16
 1437              		.cfi_offset 7, -12
 1438              		.cfi_offset 8, -8
 1439              		.cfi_offset 14, -4
 1440 0004 0546     		mov	r5, r0
 1441 0006 8846     		mov	r8, r1
 1442 0008 1446     		mov	r4, r2
 346:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   large_pool_ptr hdr_ptr;
 1443              		.loc 1 346 0
 1444 000a 4668     		ldr	r6, [r0, #4]
 1445              	.LVL183:
 351:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 1446              		.loc 1 351 0
 1447 000c 4FF6F073 		movw	r3, #65520
 1448 0010 9A42     		cmp	r2, r3
 1449 0012 2AD8     		bhi	.L118
 1450              	.LVL184:
 1451              	.L113:
 356:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 1452              		.loc 1 356 0
 1453 0014 14F00703 		ands	r3, r4, #7
 1454              	.LVL185:
 1455 0018 01D0     		beq	.L114
 357:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1456              		.loc 1 357 0
 1457 001a E41A     		subs	r4, r4, r3
 1458              	.LVL186:
 1459 001c 0834     		adds	r4, r4, #8
 1460              	.LVL187:
 1461              	.L114:
 360:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 1462              		.loc 1 360 0
 1463 001e B8F1010F 		cmp	r8, #1
 1464 0022 09D9     		bls	.L115
 361:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1465              		.loc 1 361 0
 1466 0024 2B68     		ldr	r3, [r5]
 1467              	.LVL188:
 1468 0026 0F22     		movs	r2, #15
 1469 0028 5A61     		str	r2, [r3, #20]
 1470 002a 2B68     		ldr	r3, [r5]
 1471 002c C3F81880 		str	r8, [r3, #24]
 1472 0030 2B68     		ldr	r3, [r5]
 1473 0032 1B68     		ldr	r3, [r3]
 1474 0034 2846     		mov	r0, r5
 1475 0036 9847     		blx	r3
 1476              	.LVL189:
 1477              	.L115:
ARM GAS  /tmp/ccQQGSTq.s 			page 48


 363:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 					    SIZEOF(large_pool_hdr));
 1478              		.loc 1 363 0
 1479 0038 04F11001 		add	r1, r4, #16
 1480 003c 2846     		mov	r0, r5
 1481 003e FFF7FEFF 		bl	jpeg_get_large
 1482              	.LVL190:
 365:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 1483              		.loc 1 365 0
 1484 0042 0746     		mov	r7, r0
 1485 0044 A8B1     		cbz	r0, .L119
 1486              	.LVL191:
 1487              	.L116:
 367:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1488              		.loc 1 367 0
 1489 0046 F36C     		ldr	r3, [r6, #76]
 1490 0048 2344     		add	r3, r3, r4
 1491 004a 1033     		adds	r3, r3, #16
 1492 004c F364     		str	r3, [r6, #76]
 370:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* We maintain space counts in each pool header for statistical purposes,
 1493              		.loc 1 370 0
 1494 004e 08F10E08 		add	r8, r8, #14
 1495              	.LVL192:
 1496 0052 06EB8806 		add	r6, r6, r8, lsl #2
 1497              	.LVL193:
 1498 0056 7368     		ldr	r3, [r6, #4]
 1499 0058 3B60     		str	r3, [r7]
 374:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   hdr_ptr->hdr.bytes_left = 0;
 1500              		.loc 1 374 0
 1501 005a 7C60     		str	r4, [r7, #4]
 375:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->large_list[pool_id] = hdr_ptr;
 1502              		.loc 1 375 0
 1503 005c 0023     		movs	r3, #0
 1504 005e BB60     		str	r3, [r7, #8]
 376:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1505              		.loc 1 376 0
 1506 0060 7760     		str	r7, [r6, #4]
 379:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1507              		.loc 1 379 0
 1508 0062 07F11000 		add	r0, r7, #16
 1509 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1510              	.LVL194:
 1511              	.L118:
 352:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1512              		.loc 1 352 0
 1513 006a 0321     		movs	r1, #3
 1514              	.LVL195:
 1515 006c FFF7FEFF 		bl	out_of_memory
 1516              	.LVL196:
 1517 0070 D0E7     		b	.L113
 1518              	.LVL197:
 1519              	.L119:
 366:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 1520              		.loc 1 366 0
 1521 0072 0421     		movs	r1, #4
 1522 0074 2846     		mov	r0, r5
 1523              	.LVL198:
 1524 0076 FFF7FEFF 		bl	out_of_memory
ARM GAS  /tmp/ccQQGSTq.s 			page 49


 1525              	.LVL199:
 1526 007a E4E7     		b	.L116
 1527              		.cfi_endproc
 1528              	.LFE5:
 1530              		.section	.text.alloc_barray,"ax",%progbits
 1531              		.align	1
 1532              		.syntax unified
 1533              		.thumb
 1534              		.thumb_func
 1535              		.fpu fpv5-sp-d16
 1537              	alloc_barray:
 1538              	.LFB7:
 447:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1539              		.loc 1 447 0
 1540              		.cfi_startproc
 1541              		@ args = 0, pretend = 0, frame = 0
 1542              		@ frame_needed = 0, uses_anonymous_args = 0
 1543              	.LVL200:
 1544 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1545              	.LCFI15:
 1546              		.cfi_def_cfa_offset 40
 1547              		.cfi_offset 3, -40
 1548              		.cfi_offset 4, -36
 1549              		.cfi_offset 5, -32
 1550              		.cfi_offset 6, -28
 1551              		.cfi_offset 7, -24
 1552              		.cfi_offset 8, -20
 1553              		.cfi_offset 9, -16
 1554              		.cfi_offset 10, -12
 1555              		.cfi_offset 11, -8
 1556              		.cfi_offset 14, -4
 1557 0004 8146     		mov	r9, r0
 1558 0006 8A46     		mov	r10, r1
 1559 0008 9346     		mov	fp, r2
 1560 000a 9846     		mov	r8, r3
 448:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JBLOCKARRAY result;
 1561              		.loc 1 448 0
 1562 000c 4468     		ldr	r4, [r0, #4]
 1563              	.LVL201:
 456:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (ltemp <= 0)
 1564              		.loc 1 456 0
 1565 000e D601     		lsls	r6, r2, #7
 455:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	  ((long) blocksperrow * SIZEOF(JBLOCK));
 1566              		.loc 1 455 0
 1567 0010 4FF6F077 		movw	r7, #65520
 1568 0014 B7FBF6F7 		udiv	r7, r7, r6
 1569 0018 3D46     		mov	r5, r7
 1570              	.LVL202:
 457:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 1571              		.loc 1 457 0
 1572 001a 2FB9     		cbnz	r7, .L121
 458:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (ltemp < (long) numrows)
 1573              		.loc 1 458 0
 1574 001c 0368     		ldr	r3, [r0]
 1575              	.LVL203:
 1576 001e 4822     		movs	r2, #72
 1577              	.LVL204:
ARM GAS  /tmp/ccQQGSTq.s 			page 50


 1578 0020 5A61     		str	r2, [r3, #20]
 1579 0022 0368     		ldr	r3, [r0]
 1580 0024 1B68     		ldr	r3, [r3]
 1581 0026 9847     		blx	r3
 1582              	.LVL205:
 1583              	.L121:
 459:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 1584              		.loc 1 459 0
 1585 0028 A845     		cmp	r8, r5
 1586 002a 00DC     		bgt	.L122
 462:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->last_rowsperchunk = rowsperchunk;
 1587              		.loc 1 462 0
 1588 002c 4746     		mov	r7, r8
 1589              	.L122:
 1590              	.LVL206:
 463:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1591              		.loc 1 463 0
 1592 002e 2765     		str	r7, [r4, #80]
 466:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 1593              		.loc 1 466 0
 1594 0030 4FEA8802 		lsl	r2, r8, #2
 1595 0034 5146     		mov	r1, r10
 1596 0036 4846     		mov	r0, r9
 1597 0038 FFF7FEFF 		bl	alloc_small
 1598              	.LVL207:
 1599 003c 0546     		mov	r5, r0
 1600              	.LVL208:
 470:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   while (currow < numrows) {
 1601              		.loc 1 470 0
 1602 003e 0024     		movs	r4, #0
 1603              	.LVL209:
 471:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 1604              		.loc 1 471 0
 1605 0040 06E0     		b	.L123
 1606              	.LVL210:
 1607              	.L125:
 477:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       workspace += blocksperrow;
 1608              		.loc 1 477 0 discriminator 3
 1609 0042 45F82400 		str	r0, [r5, r4, lsl #2]
 478:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1610              		.loc 1 478 0 discriminator 3
 1611 0046 3044     		add	r0, r0, r6
 1612              	.LVL211:
 476:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       result[currow++] = workspace;
 1613              		.loc 1 476 0 discriminator 3
 1614 0048 013B     		subs	r3, r3, #1
 1615              	.LVL212:
 477:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       workspace += blocksperrow;
 1616              		.loc 1 477 0 discriminator 3
 1617 004a 0134     		adds	r4, r4, #1
 1618              	.LVL213:
 1619              	.L124:
 476:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       result[currow++] = workspace;
 1620              		.loc 1 476 0 discriminator 1
 1621 004c 002B     		cmp	r3, #0
 1622 004e F8D1     		bne	.L125
 1623              	.LVL214:
ARM GAS  /tmp/ccQQGSTq.s 			page 51


 1624              	.L123:
 471:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 1625              		.loc 1 471 0
 1626 0050 4445     		cmp	r4, r8
 1627 0052 0DD2     		bcs	.L129
 472:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 1628              		.loc 1 472 0
 1629 0054 A8EB0403 		sub	r3, r8, r4
 1630 0058 9F42     		cmp	r7, r3
 1631 005a 28BF     		it	cs
 1632 005c 1F46     		movcs	r7, r3
 1633              	.LVL215:
 474:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		  * SIZEOF(JBLOCK)));
 1634              		.loc 1 474 0
 1635 005e 07FB0BF2 		mul	r2, r7, fp
 473:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 1636              		.loc 1 473 0
 1637 0062 D201     		lsls	r2, r2, #7
 1638 0064 5146     		mov	r1, r10
 1639 0066 4846     		mov	r0, r9
 1640 0068 FFF7FEFF 		bl	alloc_large
 1641              	.LVL216:
 476:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       result[currow++] = workspace;
 1642              		.loc 1 476 0
 1643 006c 3B46     		mov	r3, r7
 1644 006e EDE7     		b	.L124
 1645              	.LVL217:
 1646              	.L129:
 483:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1647              		.loc 1 483 0
 1648 0070 2846     		mov	r0, r5
 1649 0072 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1650              		.cfi_endproc
 1651              	.LFE7:
 1653              		.section	.text.alloc_sarray,"ax",%progbits
 1654              		.align	1
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1658              		.fpu fpv5-sp-d16
 1660              	alloc_sarray:
 1661              	.LFB6:
 399:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1662              		.loc 1 399 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 0
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 1666              	.LVL218:
 1667 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1668              	.LCFI16:
 1669              		.cfi_def_cfa_offset 32
 1670              		.cfi_offset 4, -32
 1671              		.cfi_offset 5, -28
 1672              		.cfi_offset 6, -24
 1673              		.cfi_offset 7, -20
 1674              		.cfi_offset 8, -16
 1675              		.cfi_offset 9, -12
ARM GAS  /tmp/ccQQGSTq.s 			page 52


 1676              		.cfi_offset 10, -8
 1677              		.cfi_offset 14, -4
 1678 0004 8146     		mov	r9, r0
 1679 0006 8A46     		mov	r10, r1
 1680 0008 1546     		mov	r5, r2
 1681 000a 9846     		mov	r8, r3
 400:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   JSAMPARRAY result;
 1682              		.loc 1 400 0
 1683 000c 4468     		ldr	r4, [r0, #4]
 1684              	.LVL219:
 407:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	  ((long) samplesperrow * SIZEOF(JSAMPLE));
 1685              		.loc 1 407 0
 1686 000e 4FF6F077 		movw	r7, #65520
 1687 0012 B7FBF2F7 		udiv	r7, r7, r2
 1688 0016 3E46     		mov	r6, r7
 1689              	.LVL220:
 409:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 1690              		.loc 1 409 0
 1691 0018 2FB9     		cbnz	r7, .L131
 410:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (ltemp < (long) numrows)
 1692              		.loc 1 410 0
 1693 001a 0368     		ldr	r3, [r0]
 1694              	.LVL221:
 1695 001c 4822     		movs	r2, #72
 1696              	.LVL222:
 1697 001e 5A61     		str	r2, [r3, #20]
 1698 0020 0368     		ldr	r3, [r0]
 1699 0022 1B68     		ldr	r3, [r3]
 1700 0024 9847     		blx	r3
 1701              	.LVL223:
 1702              	.L131:
 411:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 1703              		.loc 1 411 0
 1704 0026 B045     		cmp	r8, r6
 1705 0028 00DC     		bgt	.L132
 414:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->last_rowsperchunk = rowsperchunk;
 1706              		.loc 1 414 0
 1707 002a 4746     		mov	r7, r8
 1708              	.L132:
 1709              	.LVL224:
 415:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1710              		.loc 1 415 0
 1711 002c 2765     		str	r7, [r4, #80]
 418:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 1712              		.loc 1 418 0
 1713 002e 4FEA8802 		lsl	r2, r8, #2
 1714 0032 5146     		mov	r1, r10
 1715 0034 4846     		mov	r0, r9
 1716 0036 FFF7FEFF 		bl	alloc_small
 1717              	.LVL225:
 1718 003a 0646     		mov	r6, r0
 1719              	.LVL226:
 422:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   while (currow < numrows) {
 1720              		.loc 1 422 0
 1721 003c 0024     		movs	r4, #0
 1722              	.LVL227:
 423:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
ARM GAS  /tmp/ccQQGSTq.s 			page 53


 1723              		.loc 1 423 0
 1724 003e 06E0     		b	.L133
 1725              	.LVL228:
 1726              	.L135:
 429:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       workspace += samplesperrow;
 1727              		.loc 1 429 0 discriminator 3
 1728 0040 46F82400 		str	r0, [r6, r4, lsl #2]
 430:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1729              		.loc 1 430 0 discriminator 3
 1730 0044 2844     		add	r0, r0, r5
 1731              	.LVL229:
 428:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       result[currow++] = workspace;
 1732              		.loc 1 428 0 discriminator 3
 1733 0046 013B     		subs	r3, r3, #1
 1734              	.LVL230:
 429:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       workspace += samplesperrow;
 1735              		.loc 1 429 0 discriminator 3
 1736 0048 0134     		adds	r4, r4, #1
 1737              	.LVL231:
 1738              	.L134:
 428:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       result[currow++] = workspace;
 1739              		.loc 1 428 0 discriminator 1
 1740 004a 002B     		cmp	r3, #0
 1741 004c F8D1     		bne	.L135
 1742              	.LVL232:
 1743              	.L133:
 423:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 1744              		.loc 1 423 0
 1745 004e 4445     		cmp	r4, r8
 1746 0050 0CD2     		bcs	.L139
 424:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 1747              		.loc 1 424 0
 1748 0052 A8EB0403 		sub	r3, r8, r4
 1749 0056 9F42     		cmp	r7, r3
 1750 0058 28BF     		it	cs
 1751 005a 1F46     		movcs	r7, r3
 1752              	.LVL233:
 425:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
 1753              		.loc 1 425 0
 1754 005c 07FB05F2 		mul	r2, r7, r5
 1755 0060 5146     		mov	r1, r10
 1756 0062 4846     		mov	r0, r9
 1757 0064 FFF7FEFF 		bl	alloc_large
 1758              	.LVL234:
 428:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       result[currow++] = workspace;
 1759              		.loc 1 428 0
 1760 0068 3B46     		mov	r3, r7
 1761 006a EEE7     		b	.L134
 1762              	.LVL235:
 1763              	.L139:
 435:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 1764              		.loc 1 435 0
 1765 006c 3046     		mov	r0, r6
 1766 006e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1767              		.cfi_endproc
 1768              	.LFE6:
 1770              		.section	.text.realize_virt_arrays,"ax",%progbits
ARM GAS  /tmp/ccQQGSTq.s 			page 54


 1771              		.align	1
 1772              		.syntax unified
 1773              		.thumb
 1774              		.thumb_func
 1775              		.fpu fpv5-sp-d16
 1777              	realize_virt_arrays:
 1778              	.LFB10:
 586:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1779              		.loc 1 586 0
 1780              		.cfi_startproc
 1781              		@ args = 0, pretend = 0, frame = 0
 1782              		@ frame_needed = 0, uses_anonymous_args = 0
 1783              	.LVL236:
 1784 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1785              	.LCFI17:
 1786              		.cfi_def_cfa_offset 24
 1787              		.cfi_offset 3, -24
 1788              		.cfi_offset 4, -20
 1789              		.cfi_offset 5, -16
 1790              		.cfi_offset 6, -12
 1791              		.cfi_offset 7, -8
 1792              		.cfi_offset 14, -4
 587:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   long space_per_minheight, maximum_space, avail_mem;
 1793              		.loc 1 587 0
 1794 0002 4568     		ldr	r5, [r0, #4]
 1795              	.LVL237:
 599:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 1796              		.loc 1 599 0
 1797 0004 6B6C     		ldr	r3, [r5, #68]
 1798              	.LVL238:
 598:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 1799              		.loc 1 598 0
 1800 0006 0024     		movs	r4, #0
 597:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   maximum_space = 0;
 1801              		.loc 1 597 0
 1802 0008 2646     		mov	r6, r4
 599:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 1803              		.loc 1 599 0
 1804 000a 00E0     		b	.L141
 1805              	.LVL239:
 1806              	.L142:
 599:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 1807              		.loc 1 599 0 is_stmt 0 discriminator 2
 1808 000c DB6A     		ldr	r3, [r3, #44]
 1809              	.LVL240:
 1810              	.L141:
 599:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 1811              		.loc 1 599 0 discriminator 1
 1812 000e 53B1     		cbz	r3, .L162
 600:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       space_per_minheight += (long) sptr->maxaccess *
 1813              		.loc 1 600 0 is_stmt 1
 1814 0010 1A68     		ldr	r2, [r3]
 1815 0012 002A     		cmp	r2, #0
 1816 0014 FAD1     		bne	.L142
 601:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 1817              		.loc 1 601 0
 1818 0016 D968     		ldr	r1, [r3, #12]
ARM GAS  /tmp/ccQQGSTq.s 			page 55


 602:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       maximum_space += (long) sptr->rows_in_array *
 1819              		.loc 1 602 0
 1820 0018 9A68     		ldr	r2, [r3, #8]
 601:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 1821              		.loc 1 601 0
 1822 001a 02FB0166 		mla	r6, r2, r1, r6
 1823              	.LVL241:
 603:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 1824              		.loc 1 603 0
 1825 001e 5968     		ldr	r1, [r3, #4]
 1826 0020 01FB0244 		mla	r4, r1, r2, r4
 1827              	.LVL242:
 1828 0024 F2E7     		b	.L142
 1829              	.L162:
 607:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 1830              		.loc 1 607 0
 1831 0026 AB6C     		ldr	r3, [r5, #72]
 1832              	.LVL243:
 1833 0028 00E0     		b	.L144
 1834              	.L145:
 607:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 1835              		.loc 1 607 0 is_stmt 0 discriminator 2
 1836 002a DB6A     		ldr	r3, [r3, #44]
 1837              	.LVL244:
 1838              	.L144:
 607:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 1839              		.loc 1 607 0 discriminator 1
 1840 002c 73B1     		cbz	r3, .L163
 608:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       space_per_minheight += (long) bptr->maxaccess *
 1841              		.loc 1 608 0 is_stmt 1
 1842 002e 1A68     		ldr	r2, [r3]
 1843 0030 002A     		cmp	r2, #0
 1844 0032 FAD1     		bne	.L145
 609:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 1845              		.loc 1 609 0
 1846 0034 D968     		ldr	r1, [r3, #12]
 610:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       maximum_space += (long) bptr->rows_in_array *
 1847              		.loc 1 610 0
 1848 0036 9F68     		ldr	r7, [r3, #8]
 609:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 1849              		.loc 1 609 0
 1850 0038 07FB01F1 		mul	r1, r7, r1
 1851 003c 06EBC116 		add	r6, r6, r1, lsl #7
 1852              	.LVL245:
 611:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 1853              		.loc 1 611 0
 1854 0040 5A68     		ldr	r2, [r3, #4]
 1855 0042 02FB07F2 		mul	r2, r2, r7
 1856 0046 04EBC214 		add	r4, r4, r2, lsl #7
 1857              	.LVL246:
 1858 004a EEE7     		b	.L145
 1859              	.L163:
 616:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     return;			/* no unrealized arrays, no work */
 1860              		.loc 1 616 0
 1861 004c 002E     		cmp	r6, #0
 1862 004e 65DD     		ble	.L140
 1863 0050 0746     		mov	r7, r0
ARM GAS  /tmp/ccQQGSTq.s 			page 56


 620:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				 mem->total_space_allocated);
 1864              		.loc 1 620 0
 1865 0052 EB6C     		ldr	r3, [r5, #76]
 1866              	.LVL247:
 1867 0054 2246     		mov	r2, r4
 1868 0056 3146     		mov	r1, r6
 1869 0058 FFF7FEFF 		bl	jpeg_mem_available
 1870              	.LVL248:
 627:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     max_minheights = 1000000000L;
 1871              		.loc 1 627 0
 1872 005c 8442     		cmp	r4, r0
 1873 005e 05DD     		ble	.L159
 630:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     /* If there doesn't seem to be enough space, try to get the minimum
 1874              		.loc 1 630 0
 1875 0060 90FBF6F6 		sdiv	r6, r0, r6
 1876              	.LVL249:
 634:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       max_minheights = 1;
 1877              		.loc 1 634 0
 1878 0064 002E     		cmp	r6, #0
 1879 0066 02DC     		bgt	.L148
 635:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 1880              		.loc 1 635 0
 1881 0068 0126     		movs	r6, #1
 1882              	.LVL250:
 1883 006a 00E0     		b	.L148
 1884              	.LVL251:
 1885              	.L159:
 628:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   else {
 1886              		.loc 1 628 0
 1887 006c 2C4E     		ldr	r6, .L165
 1888              	.LVL252:
 1889              	.L148:
 640:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 1890              		.loc 1 640 0
 1891 006e 6C6C     		ldr	r4, [r5, #68]
 1892              	.LVL253:
 1893 0070 1AE0     		b	.L149
 1894              	.LVL254:
 1895              	.L151:
 648:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 1896              		.loc 1 648 0
 1897 0072 06FB01F1 		mul	r1, r6, r1
 1898 0076 2161     		str	r1, [r4, #16]
 651:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) SIZEOF(JSAMPLE));
 1899              		.loc 1 651 0
 1900 0078 A368     		ldr	r3, [r4, #8]
 1901              	.LVL255:
 649:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) sptr->rows_in_array *
 1902              		.loc 1 649 0
 1903 007a 03FB02F2 		mul	r2, r3, r2
 1904              	.LVL256:
 1905 007e 04F13001 		add	r1, r4, #48
 1906 0082 3846     		mov	r0, r7
 1907 0084 FFF7FEFF 		bl	jpeg_open_backing_store
 1908              	.LVL257:
 653:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 1909              		.loc 1 653 0
ARM GAS  /tmp/ccQQGSTq.s 			page 57


 1910 0088 0123     		movs	r3, #1
 1911 008a A362     		str	r3, [r4, #40]
 1912              	.L152:
 655:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				      sptr->samplesperrow, sptr->rows_in_mem);
 1913              		.loc 1 655 0
 1914 008c 2369     		ldr	r3, [r4, #16]
 1915 008e A268     		ldr	r2, [r4, #8]
 1916 0090 0121     		movs	r1, #1
 1917 0092 3846     		mov	r0, r7
 1918 0094 FFF7FEFF 		bl	alloc_sarray
 1919              	.LVL258:
 1920 0098 2060     		str	r0, [r4]
 657:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       sptr->cur_start_row = 0;
 1921              		.loc 1 657 0
 1922 009a 2B6D     		ldr	r3, [r5, #80]
 1923 009c 6361     		str	r3, [r4, #20]
 658:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       sptr->first_undef_row = 0;
 1924              		.loc 1 658 0
 1925 009e 0023     		movs	r3, #0
 1926 00a0 A361     		str	r3, [r4, #24]
 659:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       sptr->dirty = FALSE;
 1927              		.loc 1 659 0
 1928 00a2 E361     		str	r3, [r4, #28]
 660:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1929              		.loc 1 660 0
 1930 00a4 6362     		str	r3, [r4, #36]
 1931              	.L150:
 640:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 1932              		.loc 1 640 0 discriminator 2
 1933 00a6 E46A     		ldr	r4, [r4, #44]
 1934              	.LVL259:
 1935              	.L149:
 640:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 1936              		.loc 1 640 0 is_stmt 0 discriminator 1
 1937 00a8 64B1     		cbz	r4, .L164
 641:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 1938              		.loc 1 641 0 is_stmt 1
 1939 00aa 2368     		ldr	r3, [r4]
 1940 00ac 002B     		cmp	r3, #0
 1941 00ae FAD1     		bne	.L150
 642:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (minheights <= max_minheights) {
 1942              		.loc 1 642 0
 1943 00b0 6268     		ldr	r2, [r4, #4]
 1944 00b2 531E     		subs	r3, r2, #1
 1945 00b4 E168     		ldr	r1, [r4, #12]
 1946 00b6 B3FBF1F3 		udiv	r3, r3, r1
 1947 00ba 0133     		adds	r3, r3, #1
 1948              	.LVL260:
 643:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	/* This buffer fits in memory */
 1949              		.loc 1 643 0
 1950 00bc 9E42     		cmp	r6, r3
 1951 00be D8DB     		blt	.L151
 645:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       } else {
 1952              		.loc 1 645 0
 1953 00c0 2261     		str	r2, [r4, #16]
 1954 00c2 E3E7     		b	.L152
 1955              	.LVL261:
ARM GAS  /tmp/ccQQGSTq.s 			page 58


 1956              	.L164:
 664:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 1957              		.loc 1 664 0
 1958 00c4 AC6C     		ldr	r4, [r5, #72]
 1959              	.LVL262:
 1960 00c6 1BE0     		b	.L154
 1961              	.LVL263:
 1962              	.L156:
 672:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 1963              		.loc 1 672 0
 1964 00c8 06FB01F1 		mul	r1, r6, r1
 1965 00cc 2161     		str	r1, [r4, #16]
 675:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) SIZEOF(JBLOCK));
 1966              		.loc 1 675 0
 1967 00ce A368     		ldr	r3, [r4, #8]
 1968              	.LVL264:
 674:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) bptr->blocksperrow *
 1969              		.loc 1 674 0
 1970 00d0 03FB02F2 		mul	r2, r3, r2
 1971              	.LVL265:
 673:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				(long) bptr->rows_in_array *
 1972              		.loc 1 673 0
 1973 00d4 D201     		lsls	r2, r2, #7
 1974 00d6 04F13001 		add	r1, r4, #48
 1975 00da 3846     		mov	r0, r7
 1976 00dc FFF7FEFF 		bl	jpeg_open_backing_store
 1977              	.LVL266:
 677:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
 1978              		.loc 1 677 0
 1979 00e0 0123     		movs	r3, #1
 1980 00e2 A362     		str	r3, [r4, #40]
 1981              	.L157:
 679:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 				      bptr->blocksperrow, bptr->rows_in_mem);
 1982              		.loc 1 679 0
 1983 00e4 2369     		ldr	r3, [r4, #16]
 1984 00e6 A268     		ldr	r2, [r4, #8]
 1985 00e8 0121     		movs	r1, #1
 1986 00ea 3846     		mov	r0, r7
 1987 00ec FFF7FEFF 		bl	alloc_barray
 1988              	.LVL267:
 1989 00f0 2060     		str	r0, [r4]
 681:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       bptr->cur_start_row = 0;
 1990              		.loc 1 681 0
 1991 00f2 2B6D     		ldr	r3, [r5, #80]
 1992 00f4 6361     		str	r3, [r4, #20]
 682:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       bptr->first_undef_row = 0;
 1993              		.loc 1 682 0
 1994 00f6 0023     		movs	r3, #0
 1995 00f8 A361     		str	r3, [r4, #24]
 683:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       bptr->dirty = FALSE;
 1996              		.loc 1 683 0
 1997 00fa E361     		str	r3, [r4, #28]
 684:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
 1998              		.loc 1 684 0
 1999 00fc 6362     		str	r3, [r4, #36]
 2000              	.L155:
 664:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
ARM GAS  /tmp/ccQQGSTq.s 			page 59


 2001              		.loc 1 664 0 discriminator 2
 2002 00fe E46A     		ldr	r4, [r4, #44]
 2003              	.LVL268:
 2004              	.L154:
 664:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2005              		.loc 1 664 0 is_stmt 0 discriminator 1
 2006 0100 64B1     		cbz	r4, .L140
 665:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 2007              		.loc 1 665 0 is_stmt 1
 2008 0102 2368     		ldr	r3, [r4]
 2009 0104 002B     		cmp	r3, #0
 2010 0106 FAD1     		bne	.L155
 666:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (minheights <= max_minheights) {
 2011              		.loc 1 666 0
 2012 0108 6268     		ldr	r2, [r4, #4]
 2013 010a 531E     		subs	r3, r2, #1
 2014 010c E168     		ldr	r1, [r4, #12]
 2015 010e B3FBF1F3 		udiv	r3, r3, r1
 2016 0112 0133     		adds	r3, r3, #1
 2017              	.LVL269:
 667:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	/* This buffer fits in memory */
 2018              		.loc 1 667 0
 2019 0114 9E42     		cmp	r6, r3
 2020 0116 D7DB     		blt	.L156
 669:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       } else {
 2021              		.loc 1 669 0
 2022 0118 2261     		str	r2, [r4, #16]
 2023 011a E3E7     		b	.L157
 2024              	.LVL270:
 2025              	.L140:
 687:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
 2026              		.loc 1 687 0
 2027 011c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2028              	.LVL271:
 2029              	.L166:
 2030 011e 00BF     		.align	2
 2031              	.L165:
 2032 0120 00CA9A3B 		.word	1000000000
 2033              		.cfi_endproc
 2034              	.LFE10:
 2036              		.section	.text.jinit_memory_mgr,"ax",%progbits
 2037              		.align	1
 2038              		.global	jinit_memory_mgr
 2039              		.syntax unified
 2040              		.thumb
 2041              		.thumb_func
 2042              		.fpu fpv5-sp-d16
 2044              	jinit_memory_mgr:
 2045              	.LFB17:
1021:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1022:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1023:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** /*
1024:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * Memory manager initialization.
1025:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  * When this is called, only the error manager pointer is valid in cinfo!
1026:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****  */
1027:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1028:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** GLOBAL(void)
ARM GAS  /tmp/ccQQGSTq.s 			page 60


1029:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** jinit_memory_mgr (j_common_ptr cinfo)
1030:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** {
 2046              		.loc 1 1030 0
 2047              		.cfi_startproc
 2048              		@ args = 0, pretend = 0, frame = 0
 2049              		@ frame_needed = 0, uses_anonymous_args = 0
 2050              	.LVL272:
 2051 0000 70B5     		push	{r4, r5, r6, lr}
 2052              	.LCFI18:
 2053              		.cfi_def_cfa_offset 16
 2054              		.cfi_offset 4, -16
 2055              		.cfi_offset 5, -12
 2056              		.cfi_offset 6, -8
 2057              		.cfi_offset 14, -4
 2058 0002 0546     		mov	r5, r0
1031:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   my_mem_ptr mem;
1032:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   long max_to_use;
1033:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   int pool;
1034:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   size_t test_mac;
1035:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1036:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   cinfo->mem = NULL;		/* for safety if init fails */
 2059              		.loc 1 1036 0
 2060 0004 0023     		movs	r3, #0
 2061 0006 4360     		str	r3, [r0, #4]
 2062              	.LVL273:
1037:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1038:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Check for configuration errors.
1039:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably
1040:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * doesn't reflect any real hardware alignment requirement.
1041:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * The test is a little tricky: for X>0, X and X-1 have no one-bits
1042:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * in common if and only if X is a power of 2, ie has only one one-bit.
1043:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * Some compilers may give an "unreachable code" warning here; ignore it.
1044:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
1045:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if ((SIZEOF(ALIGN_TYPE) & (SIZEOF(ALIGN_TYPE)-1)) != 0)
1046:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_ALIGN_TYPE);
1047:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
1048:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * a multiple of SIZEOF(ALIGN_TYPE).
1049:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * Again, an "unreachable code" warning may be ignored here.
1050:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
1051:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
1052:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   test_mac = (size_t) MAX_ALLOC_CHUNK;
1053:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if ((long) test_mac != MAX_ALLOC_CHUNK ||
1054:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
1055:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
1056:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1057:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 2063              		.loc 1 1057 0
 2064 0008 FFF7FEFF 		bl	jpeg_mem_init
 2065              	.LVL274:
 2066 000c 0646     		mov	r6, r0
 2067              	.LVL275:
1058:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1059:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Attempt to allocate memory manager's control block */
1060:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 2068              		.loc 1 1060 0
 2069 000e 5421     		movs	r1, #84
 2070 0010 2846     		mov	r0, r5
ARM GAS  /tmp/ccQQGSTq.s 			page 61


 2071              	.LVL276:
 2072 0012 FFF7FEFF 		bl	jpeg_get_small
 2073              	.LVL277:
1061:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1062:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   if (mem == NULL) {
 2074              		.loc 1 1062 0
 2075 0016 0446     		mov	r4, r0
 2076 0018 D8B1     		cbz	r0, .L172
 2077              	.LVL278:
 2078              	.L168:
1063:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     jpeg_mem_term(cinfo);	/* system-dependent cleanup */
1064:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
1065:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
1066:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1067:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* OK, fill in the method pointers */
1068:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.alloc_small = alloc_small;
 2079              		.loc 1 1068 0
 2080 001a 1F4B     		ldr	r3, .L173
 2081 001c 2360     		str	r3, [r4]
1069:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.alloc_large = alloc_large;
 2082              		.loc 1 1069 0
 2083 001e 1F4B     		ldr	r3, .L173+4
 2084 0020 6360     		str	r3, [r4, #4]
1070:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.alloc_sarray = alloc_sarray;
 2085              		.loc 1 1070 0
 2086 0022 1F4B     		ldr	r3, .L173+8
 2087 0024 A360     		str	r3, [r4, #8]
1071:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.alloc_barray = alloc_barray;
 2088              		.loc 1 1071 0
 2089 0026 1F4B     		ldr	r3, .L173+12
 2090 0028 E360     		str	r3, [r4, #12]
1072:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.request_virt_sarray = request_virt_sarray;
 2091              		.loc 1 1072 0
 2092 002a 1F4B     		ldr	r3, .L173+16
 2093 002c 2361     		str	r3, [r4, #16]
1073:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.request_virt_barray = request_virt_barray;
 2094              		.loc 1 1073 0
 2095 002e 1F4B     		ldr	r3, .L173+20
 2096 0030 6361     		str	r3, [r4, #20]
1074:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.realize_virt_arrays = realize_virt_arrays;
 2097              		.loc 1 1074 0
 2098 0032 1F4B     		ldr	r3, .L173+24
 2099 0034 A361     		str	r3, [r4, #24]
1075:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.access_virt_sarray = access_virt_sarray;
 2100              		.loc 1 1075 0
 2101 0036 1F4B     		ldr	r3, .L173+28
 2102 0038 E361     		str	r3, [r4, #28]
1076:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.access_virt_barray = access_virt_barray;
 2103              		.loc 1 1076 0
 2104 003a 1F4B     		ldr	r3, .L173+32
 2105 003c 2362     		str	r3, [r4, #32]
1077:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.free_pool = free_pool;
 2106              		.loc 1 1077 0
 2107 003e 1F4B     		ldr	r3, .L173+36
 2108 0040 6362     		str	r3, [r4, #36]
1078:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.self_destruct = self_destruct;
 2109              		.loc 1 1078 0
ARM GAS  /tmp/ccQQGSTq.s 			page 62


 2110 0042 1F4B     		ldr	r3, .L173+40
 2111 0044 A362     		str	r3, [r4, #40]
1079:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1080:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Make MAX_ALLOC_CHUNK accessible to other modules */
1081:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 2112              		.loc 1 1081 0
 2113 0046 4FF48033 		mov	r3, #65536
 2114 004a 2363     		str	r3, [r4, #48]
1082:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1083:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Initialize working state */
1084:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->pub.max_memory_to_use = max_to_use;
 2115              		.loc 1 1084 0
 2116 004c E662     		str	r6, [r4, #44]
 2117              	.LVL279:
1085:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1086:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 2118              		.loc 1 1086 0
 2119 004e 0123     		movs	r3, #1
 2120 0050 19E0     		b	.L169
 2121              	.LVL280:
 2122              	.L172:
1063:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 2123              		.loc 1 1063 0
 2124 0052 2846     		mov	r0, r5
 2125              	.LVL281:
 2126 0054 FFF7FEFF 		bl	jpeg_mem_term
 2127              	.LVL282:
1064:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
 2128              		.loc 1 1064 0
 2129 0058 2B68     		ldr	r3, [r5]
 2130 005a 3822     		movs	r2, #56
 2131 005c 5A61     		str	r2, [r3, #20]
 2132 005e 2B68     		ldr	r3, [r5]
 2133 0060 0022     		movs	r2, #0
 2134 0062 9A61     		str	r2, [r3, #24]
 2135 0064 2B68     		ldr	r3, [r5]
 2136 0066 1B68     		ldr	r3, [r3]
 2137 0068 2846     		mov	r0, r5
 2138 006a 9847     		blx	r3
 2139              	.LVL283:
 2140 006c D5E7     		b	.L168
 2141              	.LVL284:
 2142              	.L170:
1087:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     mem->small_list[pool] = NULL;
 2143              		.loc 1 1087 0 discriminator 3
 2144 006e 03F10C02 		add	r2, r3, #12
 2145 0072 04EB8202 		add	r2, r4, r2, lsl #2
 2146 0076 0021     		movs	r1, #0
 2147 0078 5160     		str	r1, [r2, #4]
1088:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     mem->large_list[pool] = NULL;
 2148              		.loc 1 1088 0 discriminator 3
 2149 007a 03F10E02 		add	r2, r3, #14
 2150 007e 04EB8202 		add	r2, r4, r2, lsl #2
 2151 0082 5160     		str	r1, [r2, #4]
1086:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     mem->small_list[pool] = NULL;
 2152              		.loc 1 1086 0 discriminator 3
 2153 0084 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccQQGSTq.s 			page 63


 2154              	.LVL285:
 2155              	.L169:
1086:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     mem->small_list[pool] = NULL;
 2156              		.loc 1 1086 0 is_stmt 0 discriminator 1
 2157 0086 002B     		cmp	r3, #0
 2158 0088 F1DA     		bge	.L170
1089:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
1090:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->virt_sarray_list = NULL;
 2159              		.loc 1 1090 0 is_stmt 1
 2160 008a 0023     		movs	r3, #0
 2161              	.LVL286:
 2162 008c 6364     		str	r3, [r4, #68]
1091:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->virt_barray_list = NULL;
 2163              		.loc 1 1091 0
 2164 008e A364     		str	r3, [r4, #72]
1092:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1093:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   mem->total_space_allocated = SIZEOF(my_memory_mgr);
 2165              		.loc 1 1093 0
 2166 0090 5423     		movs	r3, #84
 2167 0092 E364     		str	r3, [r4, #76]
1094:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1095:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Declare ourselves open for business */
1096:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   cinfo->mem = & mem->pub;
 2168              		.loc 1 1096 0
 2169 0094 6C60     		str	r4, [r5, #4]
1097:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1098:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   /* Check for an environment variable JPEGMEM; if found, override the
1099:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * default max_memory setting from jpeg_mem_init.  Note that the
1100:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * surrounding application may again override this value.
1101:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * If your system doesn't support getenv(), define NO_GETENV to disable
1102:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    * this feature.
1103:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****    */
1104:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #ifndef NO_GETENV
1105:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   { char * memenv;
1106:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1107:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     if ((memenv = getenv("JPEGMEM")) != NULL) {
1108:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       char ch = 'x';
1109:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1110:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
1111:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	if (ch == 'm' || ch == 'M')
1112:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	  max_to_use *= 1000L;
1113:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 	mem->pub.max_memory_to_use = max_to_use * 1000L;
1114:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****       }
1115:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****     }
1116:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c ****   }
1117:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** #endif
1118:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** 
1119:Middlewares/Third_Party/LibJPEG/source/jmemmgr.c **** }
 2170              		.loc 1 1119 0
 2171 0096 70BD     		pop	{r4, r5, r6, pc}
 2172              	.LVL287:
 2173              	.L174:
 2174              		.align	2
 2175              	.L173:
 2176 0098 00000000 		.word	alloc_small
 2177 009c 00000000 		.word	alloc_large
 2178 00a0 00000000 		.word	alloc_sarray
ARM GAS  /tmp/ccQQGSTq.s 			page 64


 2179 00a4 00000000 		.word	alloc_barray
 2180 00a8 00000000 		.word	request_virt_sarray
 2181 00ac 00000000 		.word	request_virt_barray
 2182 00b0 00000000 		.word	realize_virt_arrays
 2183 00b4 00000000 		.word	access_virt_sarray
 2184 00b8 00000000 		.word	access_virt_barray
 2185 00bc 00000000 		.word	free_pool
 2186 00c0 00000000 		.word	self_destruct
 2187              		.cfi_endproc
 2188              	.LFE17:
 2190              		.section	.rodata.extra_pool_slop,"a",%progbits
 2191              		.align	2
 2192              		.set	.LANCHOR1,. + 0
 2195              	extra_pool_slop:
 2196 0000 00000000 		.word	0
 2197 0004 88130000 		.word	5000
 2198              		.section	.rodata.first_pool_slop,"a",%progbits
 2199              		.align	2
 2200              		.set	.LANCHOR0,. + 0
 2203              	first_pool_slop:
 2204 0000 40060000 		.word	1600
 2205 0004 803E0000 		.word	16000
 2206              		.text
 2207              	.Letext0:
 2208              		.file 2 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/std
 2209              		.file 3 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 2210              		.file 4 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 2211              		.file 5 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 2212              		.file 6 "/home/jaxc/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 2213              		.file 7 "Inc/jmorecfg.h"
 2214              		.file 8 "Middlewares/Third_Party/LibJPEG/include/jpeglib.h"
 2215              		.file 9 "Middlewares/Third_Party/LibJPEG/include/jpegint.h"
 2216              		.file 10 "Middlewares/Third_Party/LibJPEG/include/jmemsys.h"
 2217              		.file 11 "Middlewares/Third_Party/LibJPEG/include/jerror.h"
 2218              		.file 12 "<built-in>"
ARM GAS  /tmp/ccQQGSTq.s 			page 65


DEFINED SYMBOLS
                            *ABS*:0000000000000000 jmemmgr.c
     /tmp/ccQQGSTq.s:18     .text.out_of_memory:0000000000000000 $t
     /tmp/ccQQGSTq.s:24     .text.out_of_memory:0000000000000000 out_of_memory
     /tmp/ccQQGSTq.s:53     .text.do_sarray_io:0000000000000000 $t
     /tmp/ccQQGSTq.s:59     .text.do_sarray_io:0000000000000000 do_sarray_io
     /tmp/ccQQGSTq.s:185    .text.do_barray_io:0000000000000000 $t
     /tmp/ccQQGSTq.s:191    .text.do_barray_io:0000000000000000 do_barray_io
     /tmp/ccQQGSTq.s:318    .text.alloc_small:0000000000000000 $t
     /tmp/ccQQGSTq.s:324    .text.alloc_small:0000000000000000 alloc_small
     /tmp/ccQQGSTq.s:515    .text.alloc_small:00000000000000dc $d
     /tmp/ccQQGSTq.s:521    .text.request_virt_barray:0000000000000000 $t
     /tmp/ccQQGSTq.s:527    .text.request_virt_barray:0000000000000000 request_virt_barray
     /tmp/ccQQGSTq.s:598    .text.request_virt_sarray:0000000000000000 $t
     /tmp/ccQQGSTq.s:604    .text.request_virt_sarray:0000000000000000 request_virt_sarray
     /tmp/ccQQGSTq.s:675    .text.free_pool:0000000000000000 $t
     /tmp/ccQQGSTq.s:681    .text.free_pool:0000000000000000 free_pool
     /tmp/ccQQGSTq.s:876    .text.self_destruct:0000000000000000 $t
     /tmp/ccQQGSTq.s:882    .text.self_destruct:0000000000000000 self_destruct
     /tmp/ccQQGSTq.s:934    .text.access_virt_barray:0000000000000000 $t
     /tmp/ccQQGSTq.s:940    .text.access_virt_barray:0000000000000000 access_virt_barray
     /tmp/ccQQGSTq.s:1177   .text.access_virt_sarray:0000000000000000 $t
     /tmp/ccQQGSTq.s:1183   .text.access_virt_sarray:0000000000000000 access_virt_sarray
     /tmp/ccQQGSTq.s:1418   .text.alloc_large:0000000000000000 $t
     /tmp/ccQQGSTq.s:1424   .text.alloc_large:0000000000000000 alloc_large
     /tmp/ccQQGSTq.s:1531   .text.alloc_barray:0000000000000000 $t
     /tmp/ccQQGSTq.s:1537   .text.alloc_barray:0000000000000000 alloc_barray
     /tmp/ccQQGSTq.s:1654   .text.alloc_sarray:0000000000000000 $t
     /tmp/ccQQGSTq.s:1660   .text.alloc_sarray:0000000000000000 alloc_sarray
     /tmp/ccQQGSTq.s:1771   .text.realize_virt_arrays:0000000000000000 $t
     /tmp/ccQQGSTq.s:1777   .text.realize_virt_arrays:0000000000000000 realize_virt_arrays
     /tmp/ccQQGSTq.s:2032   .text.realize_virt_arrays:0000000000000120 $d
     /tmp/ccQQGSTq.s:2037   .text.jinit_memory_mgr:0000000000000000 $t
     /tmp/ccQQGSTq.s:2044   .text.jinit_memory_mgr:0000000000000000 jinit_memory_mgr
     /tmp/ccQQGSTq.s:2176   .text.jinit_memory_mgr:0000000000000098 $d
     /tmp/ccQQGSTq.s:2191   .rodata.extra_pool_slop:0000000000000000 $d
     /tmp/ccQQGSTq.s:2195   .rodata.extra_pool_slop:0000000000000000 extra_pool_slop
     /tmp/ccQQGSTq.s:2199   .rodata.first_pool_slop:0000000000000000 $d
     /tmp/ccQQGSTq.s:2203   .rodata.first_pool_slop:0000000000000000 first_pool_slop

UNDEFINED SYMBOLS
jpeg_get_small
jpeg_free_large
jpeg_free_small
jpeg_mem_term
memset
jpeg_get_large
jpeg_mem_available
jpeg_open_backing_store
jpeg_mem_init
